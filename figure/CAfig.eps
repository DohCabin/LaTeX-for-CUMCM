%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Simplified Chinese
%%Title: CA.eps
%%Creator: Adobe Illustrator(R) 19.1
%%For: keming yang
%%CreationDate: 8/8/2015
%%BoundingBox: 91 474 258 803
%%HiResBoundingBox: 0 0 594.7500 841.5000
%%CropBox: 0 0 594.7500 841.5000
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.1.0 x29 R agm 4.7731 ct 5.3840%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 92 128 8%%BeginData: 3535 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDFCFFFDFCFFFD43FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD
%4AFF7D7D7D7E7D7D7D7E7D7D597D7D7D537D5952A8FD49FF7DA9FF7EA9A8
%A87DA87DA8A87E7EAFA9A953FD49FF7D7DFFA8F8275905F8F8270027F828
%84A9537EFD49FF52AFA9AF7DA8A9A984A884A87DA884AF847DAFFD48FF7D
%52537D537D537D537D537D537D537D53527DFD4AFFA8FFA8AFA8FFA8AFA8
%A9A8AFA8FFA8AFA8FD54FFA9FD54FFCFFFFFFFCFFFA984A8FD50FFA8FD04
%7D7E7D7D7D7E59FD077D537DA8FD48FF7DA97EA87E7E84AF7DA87D7E7E84
%7D7E7DA953FD48FFA8A852002727275227F82752F8272727F827847DA8FD
%48FF7DA97D5227522752F8272827F827270052A959FD48FFA87DA9A95252
%285252522E59525227595284847DA8FD48FF52A87EA87E847E847EA87E84
%7E847EA87E7E53FD49FFA87D7E7D7E7D847D7E7D847D7E7D847D7E7DA8AF
%FDA6FFCFA8FFA8FFA8A853A8A8FFA8FFA8FD4DFFA859A87D7E7D7D7D7E7D
%7E7D7D597D52A8FD4BFF7DA95227287D275227595352272759847DFD4BFF
%A8847D27527E532752595227272E847E84FD4BFF7D7D7EA87E847E847E84
%7E7E7D847E597DFD4CFF7D7D7D7E7D7D7D7E7D7D7D7E7D7D7DAFFDAFFFA9
%FD55FF7D7D7D847D7E537D7D847D7D7DFD4EFF7DA8A87E537D597E7D7D7D
%7E7E59A8FD4DFFA87EA8F8272E272727F82727A9535AA9FFA8FD4AFF7DA8
%A87D7EA984A87D847D84A97D7EFFFFFFA9FD49FFA8527D597D537D537D53
%7D537D2EFD50FFA8FFA8FFA8AFA8FFA8FFA8FD04FFA8A8FD50FFA9FD09FF
%5227A8FD4FFF7EFD0AFFA8FD4EFFA87D527DA8FD07FFAFFD4DFFA87D7EA8
%FF7E7E7DA8FD51FF7D52277D847E59847D5327537DFD4DFFA8277E272727
%52F8F82727F859845327AFFFFFA9FD48FFA8A8535252A87E7E597D597D53
%5953A8A8FD4EFFA8A8537E84FF847E537EA8FD54FF7D7D527D7DFD58FFA8
%A8FD5AFF7D517DFD59FFA884A8FD52FFA87D7D7E7D7D7D7E597E7D7E7D7D
%597D7D53A8FD49FF7DA8FFA8A884A87DA87D847D7EA8A984A952FD49FFA8
%59FFA97DF85228270027F82827A984A9537DFD49FF7DAFA9AF847EA8A97D
%A884847EA9A9A9847DA9FD48FF7D527D7E7D7E7D7E7D7E7D847D7E7D7E7D
%537DFD4AFF7D847DA87D847DA87D847DA87D847DA87DFDFCFFFDFCFFFDFC
%FFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFC
%FFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFC
%FFFDFCFFFDFCFFFDFCFFFDDDFFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=100 RasterRes=1200 GradRes=300 Text=0 Stroke=0 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c067 79.157747, 2015/03/30-23:40:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmp:CreateDate>2015-08-08T22:40:51+08:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:ModifyDate>2015-08-08T22:40:52+08:00</xmp:ModifyDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>184</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAC4AwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYql+ta/pei28U+oysizyiCBIopZ5Z&#xA;JSrPwjihWSRzwRm+FegJ6DFUqP5ieWx1TU/+4Rqn/ZNh4SiwtP5j+WB1XUv+4Tqn/ZNh4SvEGj+Z&#xA;XlYdf0j/ANwnVP8Asmx4D3LxBSn/ADT8m28Mk88t9FDEpeWV9L1JVVVFWZmNtQADqceA9yOIMrhl&#xA;SaJJUrwkUOtQVNGFRVWAI+RyLJdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiryXWvPXl&#xA;q68/Xj3urWdtB5dDafZwT3EUbG7lCteT8WYH4BwhQ0qCJOzZdiiOZa5lil/rVzceb7/UIPzGsLXQ&#xA;LmGH6rpolt3aG4hMZqCXWsbtGfUFfiVmXbZhZW/Nhe3JjUtl5g+tTOn5w27WkplcQFoVZGkqECuJ&#xA;y1EopHbbpucHD5p4vJdD+nxPa+v+aNk1taPa1QTw8pkhUCYSnmrEyGu/LvU1NOMgPNF+T0OC60/z&#xA;frFnoemXcN9ZBxdaxJbyLMiwRMDHA5QsB68tKqesavhySFIhE29kjRURUXooAH0ZhkuQ3irsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirH9S84eU7W/nsryctd2pVLhEgnm4MyLKqs0cbrXhIr&#xA;Ur3wglBpCnzz5HH+7X/6Q7r/AKpYbkjZBT+f/KK6naqivJaukonufq1wBGfhKgoYuTcqU2ywA8J3&#xA;3Ykixsi/8feQx/x8N/0iXX/VLIepls5PzE8hRuCLz0iSFDtbXCAcjTdmjAH04kSUEMsyDJ2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KvHfOOn+ZdR1PzFB5f1ptDurfXLa5nuVj9YyQpo9q&#xA;Gh4Drycqfoy6EbDXI0Xi9756/MvT55J59Q1tnt5rib0GsnQFZ3i9GFUkK8zCFLhXG6N81x3XZc3m&#xA;j807jX76Ka71y4s5XLQyWtm6cBaK6qyxxmNf38iboGA7VOH1WjZKLfzV+cEt3b6XJea4gvJY1WeS&#xA;xkUxC5eF92+FyICrKanv4bFBl5rszvyO/ne4/L/W77zXPdvNdOfqltfxNDPDGhoQVIUUaoIIGWRv&#xA;hNsJVez6gtf95of9Rf1Ziy5t45KmBLsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirEtV/Lu&#xA;zvtVvNSh1O+sZb90luooHT0zIkKQBgGRiP3cKg75OOQhjKNoX/lV6/8AUwan/wAHF/1TyfjFj4YQ&#xA;Nx5EsYNVtNNk8w6oLi9SV4F+Eg+lxLfGIii0B7nwyYlIxMu5gYgEDvRv/KrY/wDq/wCp/wDBw/8A&#xA;VPIeMWfhhZN+U1nPGYrnWtRnganqQu8fFgDXieKKaH2OJzFfDDOYk9OJErXioWvyFMqJbAuwK7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqw38yoLK5/w3b30Ed1Zy6qwmt50WSNwNOvGUMjAq&#xA;aMoYV7jJwFljI0HiVr5M/Mj9PSi60rywdGmjuTCUsLX1IXaKRbYN+634ycGf7Q/ULRjLDjCjZeS/&#xA;zLTW4YrvTPLD6NFdRfWJvqduJZrVXAkKqkHwyMlSOgFaYRjkgzCA1Hyh+al1dQJZ6L5csYyzLNJ9&#xA;StGiArVXJIlkaq7UVBv7fET4cu4I4w9Y/LXS49J83WdulvbW1zLo5/SJtIkhjlmSSPk9EVP2q02y&#xA;OWIATjO71zMdudirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqB1nSdE1Oxa31m0t72xQ+&#xA;q0d3GkkSlQfjpICAQCd8VYN9U/5x5/79b/g7D+uS4iigg5z/AM4+x6la2wg8uPFOkpadDYGFGTiR&#xA;6jcvhJ3C7b/fkxZiT3MDVgIz6r/zjx/36v8Awdh/XIcRZ0GUeV9B8i28Q1PyvZ6fHDcgqLzTVi4S&#xA;BGKkc4fhbiwI67HAZFaT/Al2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpV5sVm8rayq&#xA;gsxsbkKo3JJhbYYq8L81+YbzVH0Y6D560/R7GC39PUrf65CskjMoAIPGShQV7jf5ZkmPcWm/JJbp&#xA;/MUbNNp/5o2QrBDElvcTxSqjoo5t6rM3Iuw+0Y/oO9Xh81vyRfla+1DTNStZNY/MSw1ewhilWeJ5&#xA;4UaWSRiUY/E1OA2HxfRk47cyxlv0es/lE+o3Hl65uoryCbSpr6/awCoXIrqFyztzDUZX5KVp/aas&#xA;pj0G+7OAl8GdQPKxlWQqTG/EFQVFOKt0JbxykhsCrgS7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FVM21uSSYkJO5JUYbKKYnq3nfylp3mW102e6sVTjLHfXDTRqtrJ8JjSfbijSMOKhmFf1&#xA;2R+km99mB+obMrW3tGUMscbKwqrBVIIPcZXxFnQVEjRBRFCjrQCn6sBKWLeUNB816Zqeqyatr/6X&#xA;sbiXna2rW4jeBjQ0EvNiyiPitCOu/wAyUMqwJdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VSjzVqus6Xo8l5o+ktrN6rKBZpKsPwH7UhZgxIQb8UUsewxV8++ZPPf5r695ouNMsbdNW0qC2SSe&#xA;xi56aqSk/Ek1u88F4wA2Kytxf+UA5YIb97AyVLrzz+Zelzmw038vootBiWZI4oK9FaiERxKFUSAE&#xA;cQp6hq0622R0Ybd6H8teZfPmnam101snkjRA0bAEn6rN6sUhKfU7hwiuJkVT6UaSPXtg4L57J4q5&#xA;bvavIfnHzLraTrq2iPbpDxFvqUavBHdVryItbnjPBSnRywPZjlRhXVmJMutw9ZXZSnN+QU0JoEVe&#xA;xI7ZEpCrgS7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUp17yn5e1+NV1WySeSKpguRW&#xA;O4iJFOUM8ZWWNvdWGEEhBDyzzD9Q0HzH/h+bzfcadbuISrX9sk8/+kllhjtbqhVizRv/AH0MhHHc&#xA;9MuGY0wOMPQ9C/LryzpFwt6sDXmpgEHUbtjPcEE1IEkhZkU0+wtF9srMyWQiGSqqqoVQFUdANhkG&#xA;TeKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVi/mzXNQj1Gx0TSbgW15cK91e3XBZDB&#xA;axjiKK9V5yzMqryH2Q56rkoxtEjTA/NH5lf4Z1eLSdV82XMd5PaTX8SpY20gMNurvJ9mM0PGJiK9&#xA;aZMwAY8RY1qv526Jb3Prz+aL+SW0t4bomLT4WT07iKOaEtxT02JE441+ya9OuEcIBCN7tMvL/wCc&#xA;X+INRsbDSfNNzNLqMdxLbO1jaopW2bi9eSBhWhK7b4xhEqZEJ7rmv+ebKzH1XX2mv7mRLawga1tq&#xA;PPKeKcqJXgv23I6KCe2TlhADEZCS9WtfW+rResay8R6hpSppuadvlmOW4KmBXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXnl75W8+DzBqupW50+4W/lUwySyTI6W8S8YYeIR9l+JjvuzMe+XQ&#xA;mAGuUSVCTyp58kuY7p7TSGuYQVhnaSUugbZgrGKor3pk/FDHwyoP5G84vcPctp2iG4kUpJMWkLsp&#xA;ABUt6VSKKPux8UL4ZXx+TfPUVPStNIj4/Z4SSrSvhSLD4wR4ZTHy95J17/EMGq6+bb07GNxY21sz&#xA;uoll2eVzIq/EEHBaD7LP45CeW2UYUz3KG12KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kv8A/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmp:MetadataDate>2015-08-08T22:40:52+08:00</xmp:MetadataDate>
         <pdf:Keywords/>
         <pdf:Producer>Microsoft® Visio® 2013</pdf:Producer>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>Lenovo User</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:description>
            <rdf:Alt>
               <rdf:li xml:lang="x-default"/>
            </rdf:Alt>
         </dc:description>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default"/>
            </rdf:Alt>
         </dc:title>
         <dc:format>application/postscript</dc:format>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>594.750000</stDim:w>
            <stDim:h>841.500000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>TimesNewRomanPSMT</stFnt:fontName>
                  <stFnt:fontFamily>Times New Roman</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 6.90</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>times.ttf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>#e5#be#ae#e8#bd#af#e9#9b#85#e9#bb#91</stFnt:fontName>
                  <stFnt:fontFamily>#e5#be#ae#e8#bd#af#e9#9b#85#e9#bb#91</stFnt:fontFamily>
                  <stFnt:fontType>Unknown</stFnt:fontType>
                  <stFnt:versionString>Version 5.016;PS 5.006;hotconv 1.0.67;makeotf.lib2.5.33168</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>AdobeHeitiStd-Regular.otf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>默认色板组</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <xmpMM:DerivedFrom rdf:parseType="Resource"/>
         <xmpMM:DocumentID>xmp.did:fec93436-c014-eb44-af76-a0388cc85ff5</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:fec93436-c014-eb44-af76-a0388cc85ff5</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:fec93436-c014-eb44-af76-a0388cc85ff5</xmpMM:OriginalDocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:fec93436-c014-eb44-af76-a0388cc85ff5</stEvt:instanceID>
                  <stEvt:when>2015-08-08T22:40:52+08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -841.5 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 841.5 li
594.75 841.5 li
594.75 0 li
cp
clp
gsave
0 841.5 mo
594.75 841.5 li
594.75 0 li
0 0 li
0 841.5 li
clp
243 83.9999 mo
112.5 83.9999 li
112.5 50.25 li
243 50.25 li
243 83.9999 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 841.5 ]ct
[132 0 0 35.25 111.75 756.75 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 176 
/H 47 
/M[176 0 0 -47 0 47 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 176 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 176 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 176 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 176 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
JcLB&JcLB&JcLB&JcLB&JcLB&JcO^/!<Nn1(s*Tq'E[Iu!".9dQjj$&li?ta!<E:Y"Qfgf!s,"oRfEF6
kq%H<!%S!PlMpntRhj?drrVKdb6=LAj8ac3ec5[\Xt74:rrq`h!!qHtM\c<oq>g*e!!A>ef`eAUOT5A-
o.5JEpFH:el2UetV&%&d!"nJr!!LjVPm%3l!!%TN]DqpBa=O&:!"/#l!!rB9Jemhk!!VZg!!B8*^BFT>
`;kJip&G(=N\'!;!$LP,!#**_X;1dJl2Ueen-+CIq?6j%M?'p^!"[L/Qn/4Eli7%d#_WuU('"O(!!!,/
"gnL6"4$t!!:0[c-($74/-$gX!!!\S(8;QE&aB>r"Sr:R"n2Zq"I&nb!!!Pb/<27]$MFJn!!!:b(>KZ*
"mZ-g"2>#?"TSYX!.k41!!"=>/BKFC+R/q,'@R_a('"sE!:Kmf"I0/A"TS\.!0.$Z&,%Q+/FtCm$L7Zl
#cJNU('"O(!!!,S"d&rg"7lME!6>-?-+ke4/-$gX!!!]"(4m>#('"s3!!!.o"j@,M"LnGb!!*T]Jh6.;
!"/#l!!okG\/#&JlMpneirt2A!!E0"JcNLb!%#W9V(;Thl2UetpD/>ro+h<<l2UeeW<L-B!!L.=JcPTH
!"Xu=h^ea7lMpnj]G@Xc!!VZg!!DTlJd)&U!!A#WZiC(Pcn(Y;!$M(;nc/Y'Oqu^d!"nJr!!L1CW!*/(
g]2p+hZ*WeV(BS:!"/#l!!q-kPSO6&n,W@d!!A#\iWT;aU&^V^!%$n]Jh-pR+R/q,':]ia('"s3!!!/H
"eGkt"Qf]9!7_&L&$IOr/-$%C!!!;_(5`k-"o85i!!!+a"kWtY"0;Ka!!">;/:oGH/-$gX!!!\0(<%$h
&aB>r"P3gA"TS\p!.k3o!!!P?/?p`+$L7Zl#jN1W('56e"mZ-g".TP?"TSY5!0R?T!!"=+/DMcV+R/q,
'>PBa('"s3!!!/l"bHpR"TS[`!3lM(&(<(r/-$%E!!3-##_a&U('"O(!!!,0"geF5"4.%"!:'Ub-(-=4
/-$gX!!!\T(82KD&aB>r"T&@S"n)Tp"I/tb!!!Pc/<)1\$MOPn!!!:c(>BT)"mZ-g"2G)?"TSYY!.k40
!!"=?/BB@B+R/q,'@[ea('"s6!<)ru"GR*A"TS[t!1a)i&*GKr/-$%C!!!:m(=<lt"mZ-g"3Le?"TSYs
!.k3k!!"=Y/?UN(+R/q,'CHWf(AnpJ&aB>r"J>qA"TS\9!.t7O%tZ@r/-$%C!!!;2(:P%Z"mZ-g"69W?
"TSZ(!.k3a!!"=c/>Ofs+R/q,'DN>p(@i4@&aB>r"KDXA"TS\C!.k4G!!!Og/D_oX$L7Zl#e_"U('"O(
!!!,h"bHpT"TSX]!4)Y*-.+94/-$gX!!![b(?cM6&aB>r"LJ?A"TS\M!.k4=!!!Oq/CZ3N$L7Zl#fd^U
('"O.!;c`r",R3?"TSY"!1<fe-0m+6/-7@R+R/q,':foa('"s3!!!/I"e>es"Qoc:!7UuK&$RUr/-$%C
!!!;`(5We,"oA;i!!!+b"kNnX"0DQa!!"></:oGG/-$gX!!!\1(;psg&aB>r"P<mA"TS\q!.k3n!!!P@
/?gZ*$L7Zl#jW7X(B,'L"mZ-g".]V?"TSY6!/1CS,qLU!/F+he+R/q,'<r=a('"s3!!!/]"c3B_"T&1N
!5JR7&&^#r/-$%F!<)ru#_j,U('"O(!!!,1"g\@4"47+#!9sOa-(6C4/-$gX!!!\U(8)EC&aB>r"T/FT
"muNo"I9%b!!!Pd/;u+[$MXVn!!!:d(>9N("mZ-g"2P/?"TSYZ!.k4/!!"(9/B9:A+R/q,&(MG]('"s7
!;ult"G[0A"TS[u!1Nrh'IrB!K.I!P!"%oj!",22ckZTal2UeebQXUB!!;6^JcO:#!!TS9]aXrCkPtSa
i<YAJpAj[_P6'>;WW81^rVup%L(3;T!!;?a!!9V8[Ku!qkQ->;rr@WN]E!H~>

%%EndBinary
grestore
np
110.2 77.95 mo
222.17 77.95 li
237.05 48.19 li
125.08 48.19 li
110.2 77.95 li
cp
level3{
gsave
[179.39 0 0 42.092 110.2 48.19 ]ct
<<
/PatternType 2
/Shading
/0 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~*=`/O*=`/O*Y/>Q*tJJS+:nYU+V4bV+qOkW,7t%Y,S:1[,n^@]-5$I^-PHX`-kcaa-kcdb.22sd.MN'e
.hr6g//AEi/J\Nj/f+`m/f+`m0,Ooo0Gk#p0c:2r1)U>t1E$N!1`?W"2&cf$2B)r&2]E&'2]N,(3#i5)
3?8D+3ZSM,4!"\.4<=e/4Wb"24Wb"24s11459L:55TpI75p6R866Zd;6Qum<6R)s=6mE'>73i6@7O/BB
7jSQD80nZE81"`F8L=iG8gb&J9.15L9IL>M9dpMO:+6VP:FZeR:aunS;(E(U;(E+V;Ci:X;_/CY<%SR[
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~<%SR[<%SR[<%SR[<%SR[<%SR[<%SR[<%SR[<%SR[<%SR[<%SR[<%SR[<%SR[<%SR[<%SR[<%SR[<%SR[
<%SR[<%SR[<%SR[<%SR[<%SR[<%SR[<%SR[<%SR[<%SR[<%SR[<%SR[<%SR[<%SR[<%SR[<%SR[<%SR[
<%SR[<%SR[<%SR[<%SR[<%SR[<%SR[<%SR[<%SR[<%SR[<%SR[<%SR[<%SR[<%SR[<%SR[<%SR[<%SR[
<%SR[<%SR[<%SR[<%SR[<%SR[<%SR[<%SR[<%SR[<%SR[<%SR[<%SR[<%SR[<%SR[<%SR[<%SR[<%SR[
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [.71 ]
/Encode [0 1 0 1 ]
>>
>> /Gradient add_res /0 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[179.39 0 0 42.092 110.2 48.19 ]ct
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~*#oq=*??1B*ZlIG+<VdM+X&$R+sS<W,U=Z^,pjrc-RU8h-RU;j-n-So.Olnu.k</%/M/P+/M/S-/h\k2
0JG180ekF=1,C^B1c.'I2)[?N2E!HP2`E]U3&ruZ3]];`4$5Vf4?P_h4Zttm5!M7r5X7S#5s[h(6:+"+
6UO706q'O57Rfj;7n6'>7n?0A8P)KG8kVfM9MA,S9heAX:/=Y]:f'tb:f("d;GpCk;c?Un;c?Un;c?Un
;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un
~>
<~%1NaV%LrsY%M''\%hB0]%hB3_&.fBa&J5Te&J>]h&eYfi&eYik',)#m'GM5r'bqGu()@Z$()@]&(Ddl(
(`4),(`4,.)&X;0)B'M4)B'M4)]K_8)]Kb:*#oq<*??.@*?H7C*Zc@E+!2RH+!;[K+<VdM+X&!P+X/*S
+sJ6V,9nEX,U=W\,U=Z^,pai`-71&e-RU8h-n$Jl-n$Mn.4H\p.Olnt.Olr!.k<,$/1`>'/1`>'/1`>'
/1`>'/1`>'/1`>'/1`>'/1`>'/1`>'/1`>'/1`>'/1`>'/1`>'/1`>'/1`>'/1`>'/1`>'/1`>'/1`>'
~>
<~!WiE)!WiH+!s8W-!s8W-!s8W-!sA`0"9\i1"9\i1"9\i2"U,&5"U,&5"U,&5"U,&5"pP89"pP89"pP89
"pP8:#6tJ=#6tJ=#6tM?#RC\A#RC\A#RC\A#RC\A#RC\A#RLeD#mgnE#mgnE#mgnE#mgnF$47+I$47+I
$47+I$4@4L$O[=M$O[=M$O[=M$k*OQ$k*OQ$k*OQ$k*OQ$k*OQ$k*OR%1NaU%1NaU%1NaU%1NaU%1NaU
%1NaU%1NaU%1NaU%1NaU%1NaU%1NaU%1NaU%1NaU%1NaU%1NaU%1NaU%1NaU%1NaU%1NaU%1NaU%1NaU
~>
0 ]
>>
0 0 0 0 0 1 [
]true true []
/DeviceCMYK
RadialShade
} /Gradient add_res <<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/0 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
2.16 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
110.2 77.95 mo
222.17 77.95 li
237.05 48.19 li
125.08 48.19 li
110.2 77.95 li
cp
0 0 0 1 cmyk
@
0 0 0 1 cmyk
%ADOBeginSubsetFont: SDYSLZ+#e5#be#ae#e8#bd#af#e9#9b#85#e9#bb#91-GBK-EUC-H-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (SDYSLZ+#e5#be#ae#e8#bd#af#e9#9b#85#e9#bb#91-GBK-EUC-H)
%%Title: (SDYSLZ+#e5#be#ae#e8#bd#af#e9#9b#85#e9#bb#91-GBK-EUC-H Adobe GB1 5)
%%Version: 5.005
/CIDInit /ProcSet findresource begin
15 dict begin
/CIDFontName /SDYSLZ+#e5#be#ae#e8#bd#af#e9#9b#85#e9#bb#91-GBK-EUC-H def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (GB1) def
/Supplement 5 def
end def
/FontBBox {-163 -283 1087 967} def
/XUID [1 11 9273739] def
systemdict /languagelevel known {mark {systemdict
/version get exec cvi 3011 le {currentdict /XUID
undef } if} stopped cleartomark} if
/FontInfo 5 dict dup begin
/Notice (Copyright 2006, 2008 Adobe Systems Incorporated. All Rights Reserved.) def
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 30284 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 10 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 11 dict dup begin
/BlueValues [-12 -0 767 779 552 564] def
/OtherBlues [-247 -231] def
/StdHW [92] def
/StdVW [113] def
/StemSnapH [80 92] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
dup 1
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 13 dict dup begin
/BlueValues [-250 -250 1100 1100] def
/StdHW [79] def
/StdVW [83] def
/StemSnapH [62 79] def
/StemSnapV [62 83] def
/LanguageGroup 1 def
/RndStemUp false def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}bind{}{}{}{}{}{}{
}{}{}{2{cvi{{pop 0 lt{exit}if}loop}repeat}repeat}bind]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
dup 2
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 11 dict dup begin
/BlueValues [-250 -250 1100 1100] def
/StdHW [50] def
/StdVW [50] def
/LanguageGroup 1 def
/RndStemUp false def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}bind{}{}{}{}{}{}{
}{}{}{2{cvi{{pop 0 lt{exit}if}loop}repeat}repeat}bind]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
dup 3
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 10 dict dup begin
/BlueValues [-10 -0 767 777 552 561] def
/OtherBlues [-232 -222] def
/StdHW [85] def
/StdVW [101] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
dup 4
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 9 dict dup begin
/BlueValues [-250 -250 1100 1100] def
/StdHW [101] def
/StdVW [85] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
dup 5
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 13 dict dup begin
/BlueValues [-250 -250 1100 1100] def
/StdHW [61] def
/StdVW [70] def
/StemSnapH [51 61 71] def
/StemSnapV [60 70 80] def
/LanguageGroup 1 def
/RndStemUp false def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}bind{}{}{}{}{}{}{
}{}{}{2{cvi{{pop 0 lt{exit}if}loop}repeat}repeat}bind]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
dup 6
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 13 dict dup begin
/BlueValues [-250 -250 1100 1100] def
/StdHW [91] def
/StdVW [99] def
/StemSnapH [79 91] def
/StemSnapV [85 99] def
/LanguageGroup 1 def
/RndStemUp false def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}bind{}{}{}{}{}{}{
}{}{}{2{cvi{{pop 0 lt{exit}if}loop}repeat}repeat}bind]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
dup 7
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 11 dict dup begin
/BlueValues [-12 -0 766 777 551 563] def
/StdHW [91] def
/StdVW [116] def
/StemSnapH [77 91] def
/StemSnapV [83 116] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
dup 8
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 11 dict dup begin
/BlueValues [-250 -250 1100 1100] def
/StdHW [116] def
/StdVW [91] def
/StemSnapH [83 116] def
/StemSnapV [77 91] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
dup 9
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 11 dict dup begin
/BlueValues [-250 -250 1100 1100] def
/StdHW [40] def
/StdVW [43] def
/LanguageGroup 1 def
/RndStemUp false def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}bind{}{}{}{}{}{}{
}{}{}{2{cvi{{pop 0 lt{exit}if}loop}repeat}repeat}bind]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 8 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
3451 <051C60D8A8C9B5EE313F809961E96D2B1E481B3A7E6CAC41516539A9D4
8E3C24D507D77C9BF20DD42558A911AE44B507F47C99A15779803D29BDBB3BE1
4E172C0BD5261938616DEE856C3C03FB59E30388DE74C5056CCA3835499295BA
F2720491E1985D8C3A18CB1C65F08791B54077306D1CD4D511C28A5DECD033AF
B4ECF937D559989D2EF587938BED7FA41537CDC1943CBEA313D3F4D7CE8B6CE8
78ABC2062717660F9CB98349B4AF6CFE7622952108B94AA44353142CC38DB8E5
3E8CCF1174889A62C70F6242443769616719A73978EA1D15CF4915CEF898BFDD
7967FE098AC73E6FC06F649A94DD15E76B6C63085295C1BF02EA2C6A136E0F63
F320607C913D1DA5A4E4859F45397AB5AB308F34D8FCFFA905140D4A4E734799
397A0BAF2C958EBB7DD1257F61A5C573400B25BB3AE8F274C052FB7FF0A77601
AA3AEA077BA15D90AAE379FC0329B53A7DCA309FBDB5EB04AF7C9A6E48F0D035
56B27965BA54711A39343D8E4753520C371723B23DB5FF28D9019452BEDC89F7
E58CC831EF673D63CDEE7BE92F1C538DD2A5E57C4B76BAC6D85F25F233A7D909
1DA8F1CFBF590DB48888347F9C86AE84CDB66BDD15481DEDD1E18D770FD202C3
5C8E66A412A94A1786BBDF2932E71C42852662C69769AE98A0E72BB9675B7E05
EEFD74BE5FBC08E656C1E4BB06C5F9011EB66B602945AF09F9B4B66579DE0590
38E7781ED84D02388D09A2884D28557F633F2D1D25FFDAC9D119D61AB2FB45EB
A415E525566E7D8CF6F0F9C5C79E703B28E00761A9AD5AF60A2A6F1C018D19E5
F940F9AC8A1C7124F029270B9C9104E1A84A726839EC4C54869764021DCE93AB
D5027F550BD3E34D5598F3AE2D3C7E56F32C9A5E81D0576983F631E782094A34
609333FACB11790E35299D5541779E54D4AAC6BEAA2589F3A165C87CCD91EB3C
B7161EEC7D722EFBEB9DAF23FFDA304924E460B66D41D3CD29A5015E36EE1D16
14F411D8626901DD824BBCE5D8DA3C492876D68FE18A1938AFE903116106B1EF
8C24D444C7916ADD00FAE538CC0A72> |
3270 <051C60D8A8C9B5EE31941216EDE42F89D2B6CE08D501E3950F8E63CD17
0161E6F948B7292CF388C13BF8B7DD49F03EE743EE553C8A867416B3D6FCCD6F
0901F73714AC4408156D023C5E940DD13E2B05283791B76BC76F0CBD6760BA60
C3DAA81DFEE2BAE2D97B569C2E9F36A7D0A03D11BED49F4E> |
3687 <051C60D8A8C9B5EE31764D853166F2644B9E85C9EA4B8CA841D1AB3E9B
EE15BFF89B496177E20B39FDA2F0561382A888496123B7348AF193B066A0AB47
35F2EC5BFC8D98AB7AFF5E414698F4E3669E28FE2FFE34ADBA1087666CFD6A53
49B2E7CE8B3EB2977AAF83E4291190385511B5962FA62A5703787D45EDAF7330
5043FC62B2D32013792D506C2EBFA3A1F184E006B893E3B64041418143ED98B8
557F86C487DD2BD1A9DA26C57A404970EB0C841308F3EA1B7765B3078F5F64DE
03DE678BCC5121948D5D371E12213D49362A889B5C3F1F2CBC6EEF88B6EC6CC3
604C266D83CB790C397BAB107DF5717E13A6B2877E3721A9B1AE6460D9D4C7E0
C6BE2830D7DB6194CDC8EFAE4F67E6B6929DC3FFB838875D0C982BE1AA2C7DBB
15939B1DB280E9D450E1AEB1732EA1C8A57BCC037560DD736012BB175A3A650A
5C00FD7C9888CEEAADD8C0F6735427851D99F828FD44FF90DE2CE73C72389F73
2A72153FC62AD435D8D87ECF0B8CEFC8B2F439E01EA191C34162C9230F4DED58
25FDF60AF37D1F8BE461BD9088689A3F62F19FB0B92809CDBCE7829E2FAB48B1
72C83507BB23BB6324F8DD747B127AB2AD> |
4245 <051C60D8A8C9B5EE31764D25BD5396B185306D60BC41CB82314AC39C9B
975A356DAB7676B3F0B6050FC4AEF4BFF242564E8CD146892BF6C3A456916FB7
0070334FFE0F3CD13F4025DF8732B1B71E25A4DE442DE0BEC120FDB71EEEFC13
81D0F21E64E55B59E0539E645A6A252C1538C0B49C4925966A19928E984F3041
7D6BFED27928A6B06903773BF670AB4B998D0A7A5ADD42A35F89C2BAFAC01A36
E2F4F037E352D38DF89802AFCF40378F7F11807AEE64ACCA480E3B36F8315843
9392ABBA9B474F1AEFAF20D3A4D284E8794ECEF61358A6F193A68B5F944D0343
8286621A62B477EDA79D03FE2F776509990E9E21496A446921DE135E891A92DF
8A7292C89CE0DCCE5FB7958EDA9126C257A66A195A3B0BC12959D351D7273825
830C5549B935C68C4CFC5CA04EDE01CA77EDA5ABD26F634865E6C00B47408C12
51C5099EF5CD297A6AC30F74A5F0F160208AE50116D309EAA864127EE4FF4910
C7748E8C176EB20F9095AF68E9C1CAECF47ECF24A3443B75019A88CDD4BE6FA1
E0DE32BAFE8F9BB9280D61CB2A33D9A0B849886F768887A3EBB39DCCB244FB52
36A038FE1EE7B8FAC5EBDD70C9512FD582346C79CA66A9A0A39ED239A4455296
8A756C74A83E0B947BF2DF88333AB66DB19E705184D81BF3AD8DF48F8EF85D8E
ED5A4380CCBE98E79006E7D3B634567C35F2C467A2B39757EB5C9752651B1D9E
596F48D7E2D87198F5705F62BCF2A564160EAEB9C15A9F51A8F4285B9FCBF7C6> |
3039 <051C60D8A8C9B5EE31764D1907641C9340D8E7DB5E79F53593490F1CC7
845D33A934355A66DAEDD9FD416D42ECF540031CE1C04AA0AC97186C2E7C425C
418F949EDFDE60EB6D74AFA90F938F0FCC8E18A3815BF4BA90E6187CC89D86E2
C42509DCDCF21C32E3850C370D7EF4633F60E1E27614B07BC70FD5E5AFF3C45A
E48CB350CFF1A04A191F4F3D1472C786E5944D2C615CDA5130E4348CD29C0ED2
3D149CFE959C66E46FAEAFF900BC333FDCEC7734B3D1779CA3022D0106ABF8BC
829D0DC11BD5C95FB4B60CF88086C35A33971EE1E912DB58B738286AC7FE0ED5
383490D54B3FBB00224D4870863FCB93CB6040CEFE84D1DA5EA7A4BE78F99FF5
45EBB2037DA2FB71370B773659E49F97B16E2BA7F8DF4FEAF8E7296684933FB7
FB3EDD15742A90B93DDB071A7574AD31DB3FF69E51F6AE919057A6FD9994177E
1B0F8774F562AA7B> |
2126 <051C60D8A8C9B5EE31713EB88C67926D13F71D9128DDB12F9F62835E19
77CC64A8E40D6B32FE1FBDFD1B98A71FC8767730AF5608FCCA2CBB102FA0BAA3
7EE4B079424C4A6E7BC9A140E76F78B6283F54D600456CC27DF8F069E6748732
334A90875B673C3DC98A04D383D9B4A530F0334B5B829D4B2887E8237E46AC91
C24528B5AF8DB923821A0A98F1DF348C38852493D65B6DE9A8BF7BAACCBAF76A
FBB1463CBFDD2598F2563B1BC2D015C703B7AAEB584E23607D61C9D29283C5EE
70AEB774CBB55B963FD862F1644D5B302CAF7B9360D17FF56E229465D4C3DCFD
1A51A9B8031823CE9151249CC24F117CD7A2300630E3E35573F9B592081A9AC6
E40FD9123E892E3CD9B6C9B5D81E602C5B176117EBE1241032BD2B8756F78892
4FA770150918BDFA14583A1976910AA4C43103915A838C6BE28894983909EF3E
63B8C96847A1E3F3AB25> |
4532 <051C60D8A8C9B5EE3176D77F96EE7BE0C190A3FB6A35C498B39D97BC7D
826B8E4C3A236F342ADD4B70BE043F7AB6FE1EAEE2FDB728C5530FA58869851E
BF3ED2E906345E91FF12EB5D400BD8DA6BA6A373D1CE45DDDFB9F136C336028E
66941865F516462A136BF0B9715B57D226FA9D62435E05469394A563B455DD7F
13167759A067C4318F0C86324519A24EEDAF6867192C2A3E09034D2E983DA268
3500E8963D54CFCDF1983360B1522DB3FEDC6C38E984CCF8C6DBE432E167743F
F343527C979DEC2CEEAFA07042EBE80376456159BC48C445A48B8CFE53BECE99
B3621B7AFDFCA618D1795FF665CD6BC3F8066D460953A15710F6501A8D8BA224
E632305E137EA84A6EB0E115A48FCC6AFF67F262B73C62E498551DCE5F9439F2
00EA7BDEE61A83928AD3D48647922A552F4A76B0F8C7A471D439875EE7E429D0
ACF0BB0B03F5A39B8EA2C2C22FE6D9FD3B50156C3FD9F8FD3764BAB217D164F9
73A4A9974A6E2827EBD27F9B21957179C43767F5496E468FBB9C171E7C661514
F48BFAD3D70C1154AB27410E161526363B3CA865B1218243835790B3F762> |
0 <021C60D8A8C9B5EE31016ECB81E0C1366BAD401163892378F09CCEE0154E6
2994282057923F54B325CC9A5AE05541130069BD6350B359AFF79DCF15A13080
B576C0432E7718B13311A2748A284DCCD3104ED44BDC470FDD3EC6A57500D66E
6B543AA> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /SDYSLZ+#e5#be#ae#e8#bd#af#e9#9b#85#e9#bb#91-GBK-EUC-H-Identity-H /Identity-H 0 [/SDYSLZ+#e5#be#ae#e8#bd#af#e9#9b#85#e9#bb#91-GBK-EUC-H] ct_ComposeFont pop end end
%ADOEndSubsetFont
/SDYSLZ+#e5#be#ae#e8#bd#af#e9#9b#85#e9#bb#91-GBK-EUC-H-Identity-H findfont [9.775 -1.19709e-015 -1.19709e-015 -9.775 0 0 ]msf
138.8 66.1196 mo
(\015{)sh
148.575 66.1196 mo
(\014\306)sh
159.093 66.1196 mo
(\016g\020\225)
[9.7749 0 ]xsh
178.643 66.1196 mo
(\013\337)sh
189.161 66.1196 mo
(\010N\021\264)
[9.7749 0 ]xsh
240 144 mo
115.5 144 li
115.5 103.5 li
240 103.5 li
240 144 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 841.5 ]ct
[126 0 0 42 114.75 696.75 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 168 
/H 56 
/M[168 0 0 -56 0 56 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 168 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 168 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 168 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 168 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
JcLB&JcLB&JcLB&JcLB&JcLB&ZiC(:ckqo_!>Yk:!!!<#%>#&Q%06k=qu?^!UBJ=7!!C1?O8o7koIPSF
lRW#^r;Zg'Sef0Y!#,;2!!C7FR0<QnlMuM:l2Uf$ROlE/r;Zg,_\SaXr;Zg#lihtEncb-U`;flT^FZ$/
r;Zg,kSAacp(mT,!!JGgbltNUU&Y5p!#UD@g+<1&!"H(HYnm9<!!LmWL^!YUJcOL)!#V^e[4M7V!"IBm
N#)?l!!N3'Jd(-;T`DJ#!#X$5O=^>1!"J]=JemJar;Zg#U'846`W2)#!#Y>ZJh61<r;Zg,Sef-Xr;Zg#
`s%h6lMuM:l2Uf$ROlE/r;Zg,_\SaXr;Zg#lihtEncb-U`;flT^FZ$/r;Zg,kSAacp(mT,!!JGgbltNU
U&Y5p!#UD@g+<1&!"H(HYnm9<!!LmWL^!YUJcOL)!#V^e[4M7V!"IBmN#)?l!!N3'Jd(-;T`DJ#!#X$5
O=^>1!"J]=JemJar;Zg#U'846`W2)#!#Y>ZJh61<r;Zg,Sef-Xr;Zg#`s%h6lMuM:l2Uf$ROlE/r;Zg,
_\SaXr;Zg#lihtEncb-U`;flT^FZ$/r;Zg,kSAacp(mT,!!JGgbltNUU&Y5p!#UD@g+<1&!"H(HYnm9<
!!LmWL^!YUJcOL)!#V^e[4M7V!"IBmN#)?l!!N3'Jd(-;T`DJ#!#X$5O=^>1!"J]=JemJar;Zg#U'846
`W2)#!#Y>ZJh61<r;Zg,Sef-Xr;Zg#`s%h6lMuM:l2Uf$ROlE/r;Zg,_\SaXr;Zg#lihtEncb-U`;flT
^FZ$/r;Zg,kSAacp(mT,!!JGgbltNUU&Y5p!#UD@g+<1&!"H(HYnm9<!!LmWL^!YUJcOL)!#V^e[4M7V
!"IBmN#)?l!!N3'Jd(-;T`DJ#!#X$5O=^>1!"J]=JemJar;Zg#U'846`W2)#!#Y>ZJh61<r;Zg,Sef-X
r;Zg#`s%h6lMuM:l2Uf$ROlE/r;Zg,_\SaXr;Zg#lihtEncb-U`;flT^FZ$/r;Zg,kSAacp(mT,!!JGg
bltNUU&Y5p!#UD@g+<1&!"H(HYnm9<!!LmWL^!YUJcOL)!#V^e[4M7V!"IBmN#)?l!!N3'Jd(-;T`DJ#
!#X$5O=^>1!"J]=JemJar;Zg#U'846`W2)#!#Y>ZJh61<r;Zg,Sef-Xr;Zg#`s%h6lMuM:l2Uf$ROlE/
r;Zg,_\SaXr;Zg#lihtEncb-U`;flT^FZ$/r;Zg,kSAacp(mT,!!JGgbltNUU&Y5p!#UD@g+<1&!"H(H
Ynm9<!!LmWL^!YUJcOL)!#V^e[4M7V!"IBmN#)?l!!N3'Jd(-;T`DJ#!#X$5O=^>1!"J]=JemJar;Zg#
U'846`W2)#!#Y>ZJh61<r;Zg,Sef-Xr;Zg#`s%h6lMuM:l2Uf$ROlE/r;Zg,_\SaXr;Zg#lihtEncb-U
`;flT^FZ$/r;Zg,kSAacp(mT,!!JGgbltNUU&Y5p!#UD@g+<1&!"H(HYnm9<!!LmWL^!YUJcOL)!#V^e
[4M7V!"IBmN#)?l!!N3'Jd(-;T`DJ#!#X$5O=^>1!"J]=JemJar;Zg#U'846`W2)#!#Y>ZJh61<r;Zg,
Sef-Xr;Zg#`s%h6lMuM:l2Uf$ROlE/r;Zg,_\SaXr;Zg#lihtEncb-U`;flT^FZ$/r;Zg,kSAacp(mT,
!!JGgbltNUU&Y5p!#UD@g+<1&!"H(HYnm9<!!LmWL^!YUJcOL)!#V^e[4M7V!"IBmN#)?l!!N3'Jd(-;
T`DJ#!#X$5O=^>1!"J]=JemJar;Zg#U'846`W2)#!#Y>ZJh61<r;Zg,Sef-Xr;Zg#`s%h6lMuM:l2Uf$
ROlE/r;Zg,_\SaXr;Zg#lihtEncb-U`;flK^FZ'0!%%RD!!qd(Jen(r!#,;2!!AAfc341N[K*$%rVup/
L)A\_!>Yk:!!!;.%C6KE$j->,!!CjVM?En]q>c*If`2!_Wu/;_!>Yk:!!!;S%?:ku$j->,!!E0&Jct-;
!!Ako[fCp~>

%%EndBinary
grestore
np
113.39 138.19 mo
233.86 138.19 li
233.86 101.34 li
113.39 101.34 li
113.39 138.19 li
cp
level3{
gsave
[170.37 0 0 52.114 113.39 101.34 ]ct
<<
/PatternType 2
/Shading
/0 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[170.37 0 0 52.114 113.39 101.34 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/0 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
113.39 138.19 mo
233.86 138.19 li
233.86 101.34 li
113.39 101.34 li
113.39 138.19 li
cp
0 0 0 1 cmyk
@
0 0 0 1 cmyk
%ADOBeginSubsetFont: SDYSLZ+#e5#be#ae#e8#bd#af#e9#9b#85#e9#bb#91-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
ct_GlyphDirProcs begin/SDYSLZ+#e5#be#ae#e8#bd#af#e9#9b#85#e9#bb#91-GBK-EUC-H 19 GetGlyphDirectory
4248 <051C60D8A8C9B5EE31777E98D09002118AA7F55840089F8700A675AD64
A970EB9BDCF215675B04D3D1295703EAC5881AB09E68743759073611424E4710
DF45CB8E6498AFC845738409C1F90E95FC37867D056D3594C3EF11C8BFEEFB2E
23C40683BFFBB97B6AEFF936C340A252DE87093B7C56CE9ED40359280FA99820
7254F67302118A746D5730628B449C8E5513860A8C13F89DEA38F62DB7FF9CA2
BC4A4A07B1CA145EF52DE66E54244C1A5F62B89426ABFF785D30DE50AADE8269
8A462F559F7A698986AB16EB0ED4FA4AFE91800C7757FAC5F2F9BF526C5F5DFF
B5574EBB3D6BF047EE75A866B829CCAC31A8E8D90EC7A3E1D0552DA6AF296967
B1E6C21C8B058A17A0AC2D8BCDBFE2950278898139F4DCEFA750A4A72359C4E6
BDECE5E7F7EC556741F6FB9A25494486BBE3C6B290A71EF5FBB68EC272DA17D5
2C162BF5F2C530769E6A6C42667E8605D48036F92949D438D3BD7D29839F9BEE
67C95B9398656199279D46EC7C61CC389DAFF520C40C3F3E34E4FCD82505F9B0
AC> |
3357 <051C60D8A8C9B5EE3176FA08833493C5FF5AF0FD73CAF4DADF513034C7
A5CF01475D8441ADC352ACE96ED027635F55DAF1BA82363E698B0E209F26894B
C81574EA4CEC78755818782CCD580C3EF8346B158D1AC9B9150E22407F891825
9957436C52ED17AF269F22991F23D7A3F2D0F32E1E87C77BBA4B78EACDB1154E
1E2A43245C5B069B199CB17E28B451AF558BA0D60984FFF400182EA9217A64DA
BFFF674661B3523FE693815E5013CEF34FF0CFDFBB1F89340B739265D378CB31
E62A7E3E377D9FCE0CAEC3417C27DE2472396F9385B2C4ACBE447152A9FC19CA
C262FCD591B8B096CBFA7B342F0520E07FA3F92D994E6874E23B422110BA065A
AB2B2F300033440CCE2769CFD9B38250D91FA8F76D8D38E2CC2EA7686B531E32
519BAD78C254AA58BBEF8D7196AF738CB48E5A5B2627F6941E6CE87A1F805F80
0B84DDED9A0657DB57263C668D0959141F3842F8DEED6A03B3C4E072E7056806
AF7708B2CC16E0E5FA2AF194710CF446049CAB5E86008942C05A719D4B82B15C
2EC47209F9BF5DEC3A42F49C3780DAB14EFC220B4B6C055CADD23B6FA703309B
6F55086E9E53AF2C9C9FA0900AA3B4FF74072F94BD8E18A33EBF7615798B9892
8FDA377E79649223EB3DC5E8BD31BC3E285D> |
1438 <051C60D8A8C9B5EE31764D191ED005951C7610CEEBA380C48D5E8CA1E5
F820D6C592169EA04982D0B228B7DBF2281B415C3F122443C5A324BEB086D817
31C92C5D0F7A8801928F5A572054B2A6F8F00287BEA65F20A69D658952C0462C
727E80823BD768AB1276161C0247904E035DA81CC7880B48C12508A43E39A509
9A1A113D98A784C2030ACCD3247432A05376CEEDF2CB27B256B9602E96E8678B
122BB0F14088EB4FDC914C9861FDFD2F54EA4B874A30133A7937A408C3865301
2E881E11D364B4BE5D0A1FE39AD71880BD4F3C073429A4E2E4DD141058687583
E69EAED5EF9180D70495B4CA77D0C6CB2202970C95E87383EF504D8EAC403EF1
51660AC113620934A3CF70D7EBB535236F294876C9D908B77F67885C8157A657
3D35E9A8C241E176039490E5C8A33212F4133D0F63CDFED4197B521F06C2F1DD
8D2325BA7892895B5D2067C736B9DC507DB1053724D9886A26BE1C9A32B5CF2A
12241632C940BB79F1C3A5A599003FD55C0F4C6A7CD4DF462C7EF4E86A18AB1C
C2AFB26D> |
1597 <051C60D8A8C9B5EE3176793B3C8246286DA9AD987D05C85960C1939B1B
64567625808A111CE167881BF20421A454D8A20562D95DF9CBF956C92E1B71C7
AD71C310E8A06B24D616B569FBC690F6195F3C532D3ADA6F38E23BAD2FAC6D17
E9F3AACD6C76EDDD9B305DE7782CF88746585A73EFE84F1C0A9C> |
3771 <051C60D8A8C9B5EE31762EBEDE3EF94B33EFA2BE5C930272F9F6992ACC
75DFC52AD346560052FF70C22D6DC6B4AF9294C047FB2D625E8532D1309ED037
733E1464D9BDBDC39F0D69A8149997062DC1050347A4FC6E8403622EE46E10E1
E4D99BC79CA01B6C4588D7E2847C07A09883AEA69E23460112AF289F83538F0B
41365553DEC6A2D79277131D557A97CFECB5FF2717374A988C65F8F08929247B
F870F5D31A86DB612E574D0C897BEA0B1DF9A70452196DBBAC5D7971662DAC5D
209B3474626FB3E5AD2D748EB06B2B8645EA46CB19C60FEA196C9BD01DEE24F1
31359BDC55DFABF253A89741FF2A290E2F4CEC6C13B3C48357FB8AE479B392E7
09F81F40641A8042B320821CD1CD01F4B7ED26CC08844D4F6B9427757604BEBC
B4BB35617BA8B3C368DAE0E8526A7B19B1CAC05A51EE3A8257BD9DD6E98A41B0
95D0E68EFAF38BFDFEADA945ACA6DE11574A73024C2A883C04214EA6730B8DA3
0A94F1531E3459D8939F18BBF965604532BC4DC4B2A22C6C43DBA4A2DF98CACB
F27007D985F2D660DAEDA750A7AD72292AC2DCA1E4CD26CC098CD3B9606C96C5
88C177238B690BCC18BF027D4F68D414D746686C535F90FC02B3BBF646E40DC7
9C7A313EF986ADB9976A03B6F4442BF46D75A77D2DDC93C682C8B52014EC2588
9F04CDFA01C00DCEC00C2146662DE484FAD2> |
4333 <051C60D8A8C9B5EE3176CC0BD8DA82C725DE2F9E23385CFD4031E75999
1F7EE8F5A773FF68A23778B1981B4F23AD42358455E971A5F5090F2524EE8A7F
D4E2340FAE7833B44CAC63336ACB3585521B0D28E063557EEEC2B9D50C79D69F
8283F2498B61148A9D355053EE3713C905DE407BBAA87EFF98801A42D87A8F43
8B9AFAC4C5D5F70B00F13EB29BBB2B082428F9BA7F17E7CACF48FC9A8DF92A91
C33609085A3AF8B0317EF9AB871CA0E9C6A86FCF40ECC19A85131AD61D2ED4BB
11E40207256DCFFAA108C58F> |
1030 <051C60D8A8C9B5EE313343C6AC96D6539535EF248ABF1033ED656EC024
7270AF76D619B1927D9B00D5F2F79EEDB3541DB6D3EEDC360257F4293968517F
EE11EF2D5E82208AD4BF18402BA26351898BDF533B42BC005EA390954C037F59
28B77AF15A9573C2FE3FE1FAFB9C2C0E60F8786733B07A3490166DF763F4EEA7
8D1E9B7DB42B7D695EFCAC8BDCDE6BB7EFE8A092159910F95F17D2414C5A1F2F
AFCCF7B7A115AE523897088C8B69B08258DF40413998E8AE19844A7C248C9674
31354FC0709B0D3D96197850FFB336DEACF801A9996DDE606749328C1513E4D7
0E6D9AC71FB73830E413EB268D445FA614A8E15E771A334C82C7E19EE69D2DD5
73922E1F371A7BC75AAF7B57156A1EC3B87DB24A280AAF7B35B3CC317B5071F5
7BA5BEA088E0136FBF2B97F45E051280B47F0F0A111E3B565990DC4F294976B5
051056C3CBD0C2CE6B2C712E50AE1778210451ECEB410907EBAED630882F5556
C13DC04468D3AF5B3AD03B6939A25EB5872FEC0804CB4A00618BF986A315DA0E
B0843A6EDBA92B404F701B03C535F3C69EE4667D04CAD282CA2FF10A33697DDA
928ABAA74CA54BCFE47660A1E84129BFC1F1D7533A234174FAD8AE32C5FA3346
56ED6E395FDDA1FE0C2ECA09B4E1209BCF738D853166F9D5E859EAB4360C61E1
8175C26E3CA88BA3FB2FDD00995D1B956FEABAB5409628B026480D480A5235F1
AD386DEBABFAC7720F54E437B42C7D4F7F881E820398C4A9659A51A5E0AED695
BE9F562023A061674643BAFA91E91F04> |
4657 <051C60D8A8C9B5EE31761F811ADD87CE9E7F440D5963DEA1A32A9CE91B
0EEDDA7515FC24E71859CC0BAC8A0FF247EE4001E81BDCC35C0BB786C828EE24
7D41F02769B43CFEC1AD9F941D9E81B5C06FF73F4B292CE69FAE0D877EA65164
8D16DD9990E171E4F5ACCE8C1B37FA73AAB008A0412AF32FABB1B164FDA7AC4D
619C1088334C817CCBE341B14B40C9C3C5FDB9A613F4C4783CA39A32660CA373
F4BF757DF21497934CD92903C5446F3D4BC6F788A2AA759B159DEB4835441ECC
B844578219A6A4> |
1518 <051C60D8A8C9B5EE317642C6611C582415443358924C432A277205B2C4
93DBB8E6D28FEF665FF96CEC034FECEB57A3D3A49E32F975D267E9893C1F686D
2FCA2D6DC886D2982DF30D9CBBAEF244A3A2FF6FC4A02C9DCAF3A705B4A457E7
392F09FEE97FFDBE7488D8F2519840B3C6BA4E798D14C740ED28217C9E2263B4
DC109B84F78C416598BEC0F1FEC11ACF32C94CBD781AC6D09D32D75C67C8B5B5
7A0C7D0A758DEBDE57CBD2BAC11446C8B416BF078B51189D68A467F8E7DCB637
2D95222C94F829F139BB1D75D9AD782544C885676B5188545D77A210B208B052
77EB64ADA7946EAA8783565A29AF438D4C6361B2D1696AA628CA246D22BBE236
D881AA8CA0CB25EEE30EF3F7E077BA1248D970688A40BEEBF94DCA073B4EB004
67F518B6D667DB6FEE65DA7862EBBEC8E55D1DF3A6E582778D8A33436C071C79
C82176EF69C8F8C68C80D2D81974C36E9F36896485C28054C4AAD0FCF55E4047
C0D09F1EBAE040C2270FAA9BBBF164140218C039491CAB726BD52874822D5092
D433B55ED23E266776A44C101703CD79104013E0FAAC6588200A8925AA965327
8199C514A62417C8346ECBB29C6E796C660C60B3735A3A8B1B3CA30159CA8A0F
CACB44> |
2063 <051C60D8A8C9B5EE3176F6056620452AA559C2957B1ADB7B51FD112BAA
B6F4281DD4CCC0269D2B98BFF59EF7F43BB065FC483C57F7BFF8D7BB08BA2330
72F4BA8D96979DA9B0B0779F83E940177248A0359D80923DCBF25154B034B7B3
F48B0FB59CC1D8AC84C1416C460003C7E408D66AA5B8FC3638ED272082B33751
56E8ACF2DD4D224C74E2A0C62559DB0F18A0A364EA336144D926DBC62FC55B9E
7A4B5BF4EE055705F3969009A3DC395E75FB4EC03379E52A4B06A3C5F565C5F9
5805C51D750F34D0F3D9E350B1FCFB08C8C9B44A3DE909AC8A6B6D5C4F29C164
EF8CCBE3B335E5C10947A2C1EA2404FA254E3BB1CC6787E74A4CBF300010E03F
66755F93C452C62223EEC7E26C790E4BD7584B581A8DD4FF46AF41D6653C5067
5CF749D8BEE82432A1031E56F3BFA61D83EC73E64A2DE3100758D91A984C81A5
16349B31997E9DC38E9AE607702B769C4D3299B3F18B2FE435D50267BA79B416
00163403CBF63873CB16B08E6888646DE974C2E06FABAC204D26FF00FB5D7666
87FEB2C068725C0E6519F2C59F1E4FEE8A2B2CF9D9C0F8CE> |
3336 <051C60D8A8C9B5EE3176363BA303CBC6092A01DC3A5F9CEF892DB840AA
3D57EE5441C1D2B2AEDAC41C22C2186C977147F9448F064B4573D16821CBAF9D
53BB46F0D260DC2AA5BE9A216105FE534714BA57F08461FAB28B3CB6E54AB862
CB2EAE7CCF55722EDEF77D6C965866C4B896744F8279E920DB676D2740A36CD0
336D86276B6B9AC6CC992FA42E> |
1129 <051C60D8A8C9B5EE31764DF4B6277822519D80A97620E2337B2C69B2D6
C035A048B49D1A00612065BF13244DF28908B5DAFB370C9EA172413BCFC41348
A653017E07B3CDDFC92C69E6B5905FDEA091DEA76D5AA5E88795702A19300DED
1AED5D5134CAD4034CAB0CBA0670C05F27306D1DCDA8368AD7453C5CCA3834EA
C75132ED853D741E6211246E07842A34D9AF6E8D28AB527C8694C5BA7A638D9A
A7393D5FCC97A6CA14D1F18AEE609B4F841CE7E01EE9D581616F08B5EABD02B4
087BC5B9375603934B90E5BF052D27576CCFB568FA9641DE44D4F81F6CC16ABB
FECAEA8E33595464CB23C6895FD56D9F6D17BEBB6179F57E232D6BF15B2CF5CF
424BA3B96D1233850BA627275083EC63443024DA07A94763B8> |
3905 <051C60D8A8C9B5EE3176CBD0A84B9DB2D77691F504A5328A865A6BE1C0
B268877CC18A5C1BCBB56048BC4271CBE369C865D65E593BA782F5A02C047C6C
D971712DFD5EE727496E7B7684DC8C938FD0BCBE98E199F2F690DE0179D51383
0E0CB13465D025A0757E809291799BA74CEED15B0A7D71E3501D4110D371AF64
B46B3FA28FE272CD86E23B43B914CEB243CD87EFC5CEEE9A24421A3927FFF072
5F2FB8CA371FF681CF71E0EA020071A3E3EA61BD81C755D6801C81DA90BB4BBF
47FB61BFCABDE68A568170D759F8851463101003186DF7E980E5E38EF0CD5FD3
4ED3AE514E0DFD7E7418D77ADE44A4ECC069F7E0920222DB923A6C1FA27A9F92
4121567FC9FDE81E2D396F9B31AEC50ABB406AA72000> |
3413 <051C60D8A8C9B5EE317642DF0C82A4550EEE94FBA20B64FB775FCEBE28
4F5BDC23574D6F3FE80E5BE90C31A462256878D96E10D01B409FB4BC76BA84E9
377348DA016083102FC137455160180C700BA267430F1E02CE4ED62CB8380F3A
A983A147723E4679FC014E432D3C95419536670F12915D76166C0619BA32CC3C
36ACA980F13E94FA492F72FF7F28753466FBBD0F2B6286BFBB8712CC2DB04E65
CCB495017147FB10A24323FCFF789543DC3BA43D272E12AFCF0FCF89DB959045
AF636C877F16341C42F269019BF9CE6FDBDDC1B5DDEEE2D6EB0F8BDB9399EB34
C9> |
1306 <051C60D8A8C9B5EE3103DC84122E8EEEA2AFEB94018CAA8C5F8B5A6A50
74A8BDBD29A30830AB1AE9317638430E9E86874FC3AAB6D7849CF245E25F1C63
A1C5A2771E9FD4A4F7F852B6AA645AB7D0FB67CAB7B5522EAAD53700844E04F5
8032155A3263BFFC5307EDDF54B097A737CB2BC6FBBEDEA2D96B79C56EB4FB1B
BDF326DF679B7F2B0D1DEC28ED3B1264C5DEC5E2FE1D5D8A9FE72DCF6038E295
77717CD1A1178ED879DB955C0D5EB446A65E9CCA801DDE82E0B6782FCC3FE7D4
CABB97927AEBFDB6D315DD1446B4B3DD59813F44F32AF3A434C6D18C1C95DC14
BB28AD4B40653628E10BED8B32AB06E4AB0E19E3437AB70C42A8368744CCBB67
28B548410EDFCE60A801D5CFF44B697019672C86356FD59477EBF7370CA0812F
B7D587922C42288D3135236961E1E22E2BF013E53F32650505ABE4BA0BE396D4
EA2AE6E996336EB2A956F6965F22DAFE17994E0218BC3C87355C403DB360D753
A932D6> |
3411 <051C60D8A8C9B5EE31761C3A29C7009DB4BE2A18496336172D0DA6074E
F1DEFD9CAAE92A0E0C60665066FCBBE172730CDC0928D6306885663C38D910BE
726118D775A0D5285EAFC2A42E6C4178455E39E79BEC7867317C15B694E0D206
A465C102F861EDF4FF2A9EF773E24D60E64A40B716A96A56B5677696C687412F
195A84F92593AD04B1DB4D5EF7304F94428C421D72B05F3654C95D02B3265E4F
552B6A7C620C735CC44AB134A9F7991B3AA5ED67BF88792A882850BDB454BAE4
135464D83F401A2C1408ADDC210756D3025A6475CC5BE996E27FEA2767D9BA76
0A6FDF52B4AD747D1C87BEB8066EC60AD8285F664BFB1F1DEC9F970DE1754DC4
EFF692E34F7303ACA941271C91C6355E4A5E32DE20AD9784D34EC49163264E31
7029C37A2F0D111D98C9B6A9760D5F2B59F25FE4D99F191DCB4DCCA07074AF02
D43779279B2D221ACC8EE05BB56A10FE9C07EDF5BBAF3B393E0AA0E45BBEBE40
B7CFD0C5FD70059A23B7662F660C057C5100EAA022A790F37BA5> |
2822 <051C60D8A8C9B5EE313E5B2A5897DAAD6B99C809C7FEFFEF8341634485
DE38A9560482A13DC7BA34DFBAA05877C47C4B3257CAC431FA387490259D49E8
92118D4C7F87D1FD7A04279D8AC7E0DA7F4B3775AD632D2E13782AD11F117021
6C4465F3AF0DB07D8328EBC5DC0CFA63748952817B2C8C46A008B736C72F94A8
F56CDBAD27795E67D1E79C5144793D63CE1DE3D663A03294DC2A308E076ACCEC
E8BC44ABDEAC33E206C97B9331EE0849DDD124E8F06C33CDF3A653C23E308241
384A509984E688E44ECF8B4F4381436D29394000C4BAB7F8F49DF396BF72B5C8
A8FEBFA0AA8D4768AEE74675C4A2921F38775B96292290F47580C3EE7AA2BBB6
413DA39B2A0760ABD181DEA18A284A316E7CF8FB28DCE3B63E1FF45D9FD7B8CB
11767BED480AE5A300F9DF8D6B3C1B6C1E8EA9B8FCAC0A384DA3148F52665B8E
C510A2FAA705FDEAB006CE440B041E8D05E31DA83923C3C3BA39893C02397430
F21AF862D453B7C477F6EDC5F62DF5559E99EA04AA24616748D81E6560038053
B04D6A6DFC76B53971A06EDA38E55573BB77CE2E9CD01ED8C313E99E7A96136D
05701DE7BB3A2355B4B89CCE03712A8E85D2BF97AD6490861A6EE0CB6D6776BC
E984865F977C35634E6463B7531337A3FFC7FB0DA9ECFD8D2EEEA8554DDDE963
2982366CCB55AE0808DC2A72CE2C853312E8847A7E31C9F2175E24022D593A9D
F48959140DD6BE5160BF0687593FD4D214DC9B9178386D00C13FEA95F15EBD94
008C1028616981A1D077D84041D34BEB4571D193ED948FE054A08A557842F1A2
35D04C162A870643393A169E21C628AB574BD735554699633DB2E142A37681B7
252A24> |
3992 <051C60D8A8C9B5EE3176D5DBB1F7CE09303ABF53EDC66ECD98AE340D42
25D6EF2D136761C9B2606B1C18D43E8486118238B755B7681679D00D72A30888
E73CD8B6583C9A677D399DF9E13CD957B866C346D76FF28A255D984C7600EE79
225A806ABE3662A37320B86EF714958A8AB58B1C75004759262D5CBD2D57A778
67CA106CD5F8BEBC9BEE1C74D2B517CB440DB7CF7E5438638CD7A4856F5BA0D6
C6A4D0B24B860AA36DC4F007C87438A98AAC1E811B4372629B9D53CA49C61386
912F42DF09186C83B6FE55FA825DE44A3F911DF40EB6243942C121CBB870C0A4
46E91D0550B644B2618B04B52D40B63E21F3DA723BB851C08520719B18B777B9
3673EC88B0F1B6844E881DBFEDBC0CA56E311024238A134842D2499E8B876DAA
EB22CEC0FC1A29FF4C682FBCE7C63DCA1B08B7B0629D4DB02F46D88EE390BCE1
A5A20273679C67B1169931D365DBBD36F32C8EE8939F6A3FD5458DEB47498AB6
DD1463ABC618AC47FA510026C86015BB2F03988C0FEB8AEEAE70EF820815D89C
A494D022256ACC827BCFBC590303AD13D5AD777698205057EFE776FF06F49E38
8B18F52A995A254BE1342C3E4D91BAA336ED290DF47B9BBBDCBF04DEE878FB83
06F5DCFF805709C4A41C69A79CF0A8415CF0D5E4539132665DBCD490D6D070CB
A5A01609E7CD355B210D566979E16EF6844B0C15B968F0537DBFDAFC1830731B
4FEF6078367DE464D2D719718078DA25FD3A22D85A536A024BE50B218947F956
AE0F3350F105476D1E1C96351F84673D7F00D28F9DDDF246259FE9C69BBA0FB6
DA9E35A399C778E29AF08DA6AFB933465BDA9670D3A6A4009BD8E71F06C44DF8
1D3D0C473A137C5476E0E6851126484BF22508BCD525AA9E89283E961BEE01FC
E3F68F08> |
3693 <051C60D8A8C9B5EE3176C0EB7AD004F80880F2EF82C344563EF16F4EF7
4BB31B706F7247F3B72233EB00DB83C287CCCC4A284FCDDC589FB9C5016E6083
F7333701546C6DD2D95163CEDC1A695FE5C5876F72D37973AB15D3F960433321
E3B62BF93DD75C4292CD04A11C8800342D5659CEC6CFF0F3E05D40E7D26926A0
E204E03FE6C88DEF26FCDD73628E665D7845D5F290A8D9356AF0070F65439981
35ECE18E6A8FF088886040B09A50B37CB1C9D78EAA4A506071C0B7E4411258E3
6C18156EB66688927496CC9F5F1233A065CC511EEC9D1E59AB91926786CB8C1F
48BCB88F5664DD2206B27129F125ADF0D58F8AC5734FE9CA722ECD8D108535D8
FA4F685BED630ECCBE65C260C4120012AA0AED9C96287C205CBE081334EAC6A3
356C99F557478721A6DE40AABE78E224DC212EA96FE08DCB> |
!
end
end end
%ADOEndSubsetFont
/SDYSLZ+#e5#be#ae#e8#bd#af#e9#9b#85#e9#bb#91-GBK-EUC-H-Identity-H findfont [9.75 -1.19403e-015 -1.19403e-015 -9.75 0 0 ]msf
123.77 116.87 mo
(\020\230)sh
133.52 116.87 mo
(\015\035)sh
144.05 116.87 mo
(\005\236)sh
153.8 116.87 mo
(\006=)sh
163.579 116.87 mo
(\016\273)sh
174.09 116.87 mo
(\020\355)sh
183.84 116.87 mo
(\004\006)sh
193.619 116.87 mo
(\0221)sh
204.129 116.87 mo
(\005\356\010\017)
[9.75 0 ]xsh
/SDYSLZ+#e5#be#ae#e8#bd#af#e9#9b#85#e9#bb#91-GBK-EUC-H-Identity-H findfont [9.775 -1.19709e-015 -1.19709e-015 -9.775 0 0 ]msf
128.77 128.87 mo
(\015\010)sh
138.545 128.87 mo
(\004i)sh
149.063 128.87 mo
(\017A\015U)
[9.7749 0 ]xsh
168.613 128.87 mo
(\005\032)sh
179.131 128.87 mo
(\015S\013\006)
[9.7749 0 ]xsh
198.681 128.87 mo
(\017\230)sh
209.199 128.87 mo
(\016m)sh
230.25 191.25 mo
126 191.25 li
126 162 li
230.25 162 li
230.25 191.25 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 841.5 ]ct
[105.75 0 0 30.75 125.25 649.5 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 141 
/H 41 
/M[141 0 0 -41 0 41 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 141 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 141 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 141 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 141 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
JcLB&JcLB&JcLB&JcLB&NrT/$odkkL!@ST[!!*'1KGO=u!>Gn>!!!.b"mQ6l#6UFqfDtpZXXq^J"<daF
"pV[T^D6qa!!!'%aT\mPdf?$@rse'@Pq3%^!!!91o+m)s";(V6!<IcUp]UX%Mu`#@rsbPNgaiRP!!!91
X;9(s";(V6!<Kb8^]a]B_uQt@rsdO1UauWm!!!91j;+$s";(V6!<M`pL]mb_quD<Kp&P+%O"BTJ![7UE
rs48np(dcC!!!$#Op1%Q!!\qnf)Yg[Xt7dJ"<mgG#RJ'Y^(ph`!!!$#ap#!Q!!^pQT)em#jt)`J"<mgG
#RL&<L)'k'!!!$"!J:RM"TSad!9O:]%A,3+/-I-s!!ik4(<mTt&HDe3!P8NM"TSbG!3Q>%%G*/+/-I-s
!!ikl(6oX<&HDe3!V6JM"TSc*!.k4D!<3Li/F"bh+ohTK#bDge('G3L!!*,%"jR8O#.=NF!<3ML/@$f0
+ohTK#hBce('G3L!!*,]"dT;l#4;JF!!3T=/:oGK/-I-s!!ijk(@)_;&HDh2!JCXM"TSae!9F4\%A59+
/-I-s!!ik5(<dNs&HDe3!PATM"TSbH!3H8$%G35+/-I-s!!ikm(6fR;&HDe3!V?PM"TSc+!.k4C!<3Lj
/En\g+ohTK#bMme('G3L!!*,&"jI2N#.FTF!<3MM/?p`/+ohTK#hKie('G3L!!*,^"dK5k#4DPF!<3L[
/GLb!+ohTK#`ohe('G3L!!*+l"l'7]#,hOF!<3M>/ANe>+ohTK#fmde('G3L!!*,O"f);%#2fKF!<3N!
/;Ph\+ohTK#Sr"-q%a)F!!!$#Ns4hQ!X8W)JcPBBrsb,BkUZi\!!!91TGH5s";(V6!<K>,bQRtN\,a,@
rsd+%YUfo$!!!91fG:1s";(V6!<M<dPQ_$kn,S(@!"Ao;K.QaJ"<mgG#RHP.knXC6!!!$#T*<sQ!!]D&
aoMGN].C]J"<mgG#RJNfYndHS!!!$#f*.oQ!!_B^OoYLko.5YJ"<mgG#RH"tp_EuE!!!$#O9OnQ!!\kl
f`;$]X=VXJ"<mgG#RJ!W^_R%b!!!$#a9AjQ!!^jOT`G*%j=HTJ"<mgG#RKu:L_^.+!!!$#"bHpR"TSab
!9aF_%>6;+/-I-s!!ijn(?cM:&HDe3!MBVM"TSb,!6G6@%D47+/-I-s!!ikQ(9ePW&HDe3!S@RM"TSbd
!0I9]%J23+/-@'r!!iQ1K,41s";(V6!<J;dklh%kRfM(@rsc(]bq&uA!!!91],&-s";(V6!<L:GYlt+3
df?$@rse'@Pq3%^!!!91o+m)s";(V6!<IcUp]UX%Mu`#@rsbPNgaiRP!!!91X;9(s";(V6!<Kb8^]a]B
_uQt@rsdO1UauWm!!!91j;+$s";(V6!<M`pL]mb_quD<Kp&P+%O"BTJ![7UErs48np(dcC!!!$#Op1%Q
!!\qnf)YgWXt7dJ"<daF"9c@Q^(ph`!!!'%ap"sPe,Z$>!#t)FPp-5P$iL&*%eUEg&HE%7!!*'&KEh2U
!<iOa!.k3&!.k3&!.k3&!.k3&!.k4D!.Y~>

%%EndBinary
grestore
np
123.31 184.96 mo
223.94 184.96 li
223.94 159.448 li
123.31 159.448 li
123.31 184.96 li
cp
level3{
gsave
[142.31 0 0 36.079 123.31 159.45 ]ct
<<
/PatternType 2
/Shading
/0 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[142.31 0 0 36.079 123.31 159.45 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/0 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
123.31 184.96 mo
223.94 184.96 li
223.94 159.448 li
123.31 159.448 li
123.31 184.96 li
cp
0 0 0 1 cmyk
@
0 0 0 1 cmyk
%ADOBeginSubsetFont: SDYSLZ+#e5#be#ae#e8#bd#af#e9#9b#85#e9#bb#91-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
ct_GlyphDirProcs begin/SDYSLZ+#e5#be#ae#e8#bd#af#e9#9b#85#e9#bb#91-GBK-EUC-H 6 GetGlyphDirectory
3361 <051C60D8A8C9B5EE31764D9A0664639F39DD869955AFE958D855E01658
E4DF7B82CB87958246BCD23DDB957E6C0D19EB42A548B21E296A91DB27A94A46
F377E4F82DD5677FC9E1151BCF714BC70D30881EAA3349625DC77602B693DF9E
D505D946FF36050813999F3DFDD1549702F909387B03632CB39D966F408E7E22
A2088580F2087796C6BD49084A02FB3149891A58E3E3CEAEA670F745C61EA030
14C8F89C5B21040CE4DBBAFBA825A631E110F32D93870E1C939462784C4F0517
F6A4A0D0E46D9EE618DFB5CD4EBEFB24DF596E7380BFF02BF3CFD1D0B5819EA1
7D4D7D27009ACD6193C49B8DDA3D41A9A2B3E23A9B6CDDB35FD4BC345A5E84DA
693635BF2458896A896E00B5E952DFE335F637275F94FEFB5E6042E915241978
9E9B2EC2DA01E5E5E03469E8D85E880435FEE60D5FCD4E35FFCE555B74DF42E5
B82D559307E5BFE51FDE3647C7B11200717FBB09957D9FB0D357515EC171D17C
17F1820E15DF07087C057BC108884186D789B25DD8EB20488180916233654A90
5547A0884252BEAD2EBBF4172C73CF6C363329BD20A5973D32388B165D693CAD
B4B0383DEAD46D92A6B2ED5D98ADB5A4D6A3> |
4546 <051C60D8A8C9B5EE31414256732C3A8FCA939B0097F62C872DBB237387
9202D649632CB4E46D6974EEEC8AC37AF97DF869B0903B2FBC554A8D73870E41
036CA6674859343D29B480B2600DD55A9D14E1C501DC825D74360D20A6980AE1
B699B6405E1635808F1171D521A7EB019E678D8C9A62C24D4315CD31F94D452D
30B2C22B057EB1650E897CCD037CEAB72164287D130132E0888CB36E2CC63247
DD33BF1474615A3BAB18FFEF8CFE188C706E1824363B33EA595B92C4801025BA
472D5EFB84563B354F7458CAD3B813A9F4A3B596A63379BC22550AEEF4595DB8
B9E9FBC80BCDF0DBF80EC18F9231CAFA456BF1B8FB377774F7AB8C125D1322E4
5622121145B09D4C4A688CD278DF3179534756681398C8B18B3EFE97052B0CAF
B3F6AA5D5AFCC879E71418FBAC9CA074C0D46474FB1D2579DE16724F6499CE52
F1AAA77F28FDDA8B647A842407CDEA1AE47432CC6D646EFA11140F6738F83725
B0A9A48CE11AE3967188C265C8C39E78F50B00B904E6807AB0936CBC8725A520
1A16D69487A14499A19D1549932C5E9E2D644CD4244BD6397F8258EB63073A88
967592521D9DE621B29711E7C2C62835EFECDB06216067E2C5C0FCD93D9CB296
D7605715B585C8DD107BF7C3FEDAD1FF31EDB63F76C9B339FB8E81F41514748C
2498B8A23D450562992151719FE289> |
4102 <051C60D8A8C9B5EE31764D7FC94E21EA15C2180B1DE0D527F96610A85A
BC71F8EB25EE5FC82FDC4E5FFFF49A5FC55CAA57F9CEBCD11C94C5C8D41F0CD7
53AAC072C0496DAFEF6094783D6E67E143DFCB37556AA32A686354407C986B51
ED421CA54C918D6B4EF0ADE3D103AC86EEF7401E13714611A133888B863B444C
24E2A769C778FA478F5B4F2BAFFBDE8B77E844C87F303E40C2C8B8BCAE28203A
2086B17D1C021E962536AABFD872D74E78E766FCE0E495C38A1BD677E92EDFC3
6E7D6C1DEC9A0782EF9F5C09F3AB6E093A21364449AA52748603801C28B66893
8CFE9C24538C6301D3A429328DE00044347D44A3CB88286B34415876109DB038
63BF0B46D2CE45D9EFE459E065DD98B567C39F3DF9B33AB40448DA77E5D4E327
7B4240D5CF4FAD76329319CE136F82F3B88DEE03B49A5992B02E3038DCAC3714
611247ABD735147AB5DF1B855A935AF1DE76D3B449EB4BB40B6C39F5D06A5F98
9494158E17E3A94933E094BB9B07E19F27BE23F6630B870D22E46BE37806F4BA
6FC1AE66525D627CDABEAE34006A59A72C5A770CE28B8AA9F8D320ED9F15E06C
C77D89FCE89FDA66AA512D96069EB7005E3B47F7291F00ECDFE81362D53E76E4
8B92E3ADD5FCF2A43BAC29AD625B23931EE2B3DB4673300E09D5B973A3A57B48
5E38C2C9882F71F96AE33F4495C6EAE1073C4AE00BC1D797CDC1B0F6CF0A613F
01ED3DC040E5D693BD7F2BD94453> |
1988 <051C60D8A8C9B5EE31713EB894F54A8BB8A4D7AC345FACAA20B64D9B70
4540E4A72E894CEB77C5D74DDA95C03445A6E2A4182443E1C5DDD13E20804CAF
5D846F6173EC1C77CB4549E431A802D6BFA169DD15AD4B12C8FBC21896A82DD0
8B8CFDB81A181D21C38CF496DA48D19F8B45B3E7691039BD2162970E03678800
150053A4111884B1B4DE911C1DF9BD074A45E148B33EEFFA8C7921EEBE316D7C
1A78EFE6EBB358243F4C52B877EB5B82477521F1A4C6811F6478BCFDF896FD88
AA30B58ADF44BEB8D7CE313CAE9FDD2E1B9C6EA277A939143A5113EF8487D5F6
07E2A7A7F87C311A089AE91D79408E1EDEFE2D71886DB6F44599AEB2AB60499A
4C22271FA90BEFD0733DFB5AC5F4F0807A> |
1855 <051C60D8A8C9B5EE3177D1A0713B20F4718CAA0B3D548669DFC9C52746
65AB97262501288A260D0D5450D71E37E7FD50F626A0DB68F717EFBCC8282613
B62772E331A0AF70C7DEFAB91868B0D595563C9F40C6C3E0D2C69F7E64F71EF2
43D26D2C38922A2E24A663F823DC3D67844FBE8BDFA8C4336B6EE456B3F619F1
D39BEF29F151B3999643268A8380933553A87789B57CEE33070C4274390E6F93
5CBBD7F024B1734AC55BFB284D5BCA8C82D754669C9884ABF9E2521503D830A3
FA89414E112B11185DF2810219495B2D72D5A567AC0CA67051B81C02ADF95C3B
5C2CA52D0C79946A882776F48B5E734EFB4C463D11060616A75F2326AEF3653E
F3C19AE295DD8DEA38950C374DB40FC1C8A293BD1D160D372DF633415D1A85F2
B582C274D76E6E94967B8F0871C7EC048A2337621A12746036AF0903A9E22AC7
D3F41D9F68CFD6B723F2154763DBCA3D98BA2FCA580D02C965DD2D8BEA1B66A9
0FEAF64B3DE1C753B72874A80047E632B3F6DD8082C7B8D8097CE73526326EBB
5AFBA9D0F8E2BFE817149828A5AD370C3241E1DA8D3531DC2420F92FBD16AEAD
1AC29C017FD3CF35BD6FE87EA4B78BEF267DFB2AE2FCDBC581D7BEAB6F9C6CE5
21A940F2460B40C5B5843DDA81BFBB7E84773A2F3802B46D165EFA398EC76209
C4F1> |
4405 <051C60D8A8C9B5EE31713EB8C57752811E77EE3CA96799C6CA1ECBE7BF
092995F4DF32AECDD614D788EF2C553215D0FEAE4F790B8E8EB6D1ED91834239
B4FDE6999A24424432D3B1480CB5B80C3F43F06503224EDF45E15BFDDACD166D
754C425D54973B45E13B946AA5DAFC3F9382668DF077A95ED513C7CCA670DAF4
8D1A782F2C8EE5540D8CF92B5911DAE84CE9E1D367B4FC928EEAC0BF0A3FF156
8951C146E819A85612A72684B92FCA8C46EAF309BDB48DC31A443948A9F6F28D
509D52E847DDF2D2A6760B0258C7F1EDFBE2B3B7E38DF2B0B0C1BAFF328C4C7C
E5D22EF2A848079F3B106339FD7C7DA0DAC3201E9C14519984E97FD1CE86C168
BC69628D65541B3E9163D80209A6DDFADCB515EA4A1C57B2076D046663AF6462
CD4D07A58AE736E92B2F402858E522D1E1739F094BBD47B2450C5842A837E28A
A08DC2CB393EFFBA> |
!
end
end end
%ADOEndSubsetFont
/SDYSLZ+#e5#be#ae#e8#bd#af#e9#9b#85#e9#bb#91-GBK-EUC-H-Identity-H findfont [9.75 -1.19403e-015 -1.19403e-015 -9.75 0 0 ]msf
133.8 175.37 mo
(\015!)sh
143.55 175.37 mo
(\021\302)sh
154.041 175.37 mo
(\020\355\004\006)
[9.75 0 ]xsh
173.541 175.37 mo
(\020\006)sh
184.032 175.37 mo
(\007\304\007?\0215)
[9.75 9.75 0 ]xsh
222 240.75 mo
134.25 240.75 li
134.25 211.5 li
222 211.5 li
222 240.75 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 841.5 ]ct
[89.25 0 0 30.75 133.5 600 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 119 
/H 41 
/M[119 0 0 -41 0 41 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 119 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 119 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 119 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 119 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
JcLB&JcLB&JcLB&JcNXf!WiEE`%91b"t0u^!!**2]GB'6"r%=C!!**'Zj#:i!=&_)!9+"Y%\kTB/-I:"
!!`au(A/FG'EA+7!g<fc"c*-Y&c`Q*/-I@$!"')0(7#^='EA+8"7cVe"TSei!2BPo'&kIF/-I@$!"'(e
(:Ft]'EA+8"4@@e"TSeI!5eg:'#H3F/-I@$!"'(E(=j6('EA+8"0r*e"TSe)!94(Z&u$rF/-I@$!"'(%
(A8LH'EA+8"-Nie"TSd`!<3[m/-I@$!"')/(7,d<'EA.5"-3Tc#PS4]!<3]'/=e<p-ia5S$L8J(('G<O
!!<>`"g%q.#M/s]!<3\\/A3S;-ia5S$Hj4(('G<O!!<>@"jI2N#Ia]]!<3\</DVi[-ia5S$EFs(('G<O
!!<=u"mlHn#F>G]!<3[q/H%+&-ia5S$BGr)'EA+8!!A8c!!i2tP5tUqngp@`"=O6M$4?&6VA9:K!!!*'
iWZIg!!h'TZN1"<dO`*`"=O6M$4=ok`YJ[k!!!*'_?J3g!!fq4dfBC\Z7Oi`"=O6M$4<dKjq\(6!!!*'
U'9rg!!eeio)Se'Ot?S`"=O6M$4;h0";Ch9!s=Sf!!i/sPQ:^rO":D^!!!?5q\GG4";Ch9!sA,uSHSuu
k5_4Vrt=?CXXjT'!!!?5gD714";Ch9!s@!U]`eB@`rNsVrt<4#bq&uG!!!?5],&p4";Ch9!s>k5h$!c`
VZ>]Vrt;(Xm48Ag!!!?5RhkZ4";Ch9!s=_jr<30+L]@Df!"t>D"=O6M$4?VFQ50T;!!!*'ncbTg!!hWd
UB(<,i[h5`"=O6M$4>K&[MAu[!!!*'dKR>g!!gLD_Z9]L_CWt`"=O6M$4=?[eeSB&!!!*'Z3B(g!!fA$
irK)lU+G^`"=O6M$4<4;p(dcF!!!*'Op1gg!!e;[rt:AD"=O6M$4?SEQPKW:!!*$$Ns,LgpAg?Vrt=oS
SLaml!!!?5lP?<4";Ch9!s@QeXT\\0f)W)Vrt<d3]ds:7!!!?5b8/&4";Ch9!s?FEbln(P[fFhVrt;Xh
h(/[W!!!?5Wtse4";Ch9!s>;%m0*IpQN6RVrt:MHr@A("!!!?5Ntqg3!!!*$"-3Tc#PJ.]!<3]&/=nBq
-ia5S$L/D(('G<O!!<>_"g/"/#M&m]!<3\[/A<Y<-ia5S$Ha.(('G<O!!<>?"jR8O#IXW]!<3\;/D_o\
-ia5S$E=m(('G<O!!<=t"muNo#F5A]!<3[p/H.1'-ia5S$BGr*'EA+8"-3Tc#PA(]!<3[m/-I@$!"')1
(6oX<'EA+8"7l\e"TSej!29Jn'&tOF/-I@$!"'(f(:=n\'EA+8"4IFe"TSeJ!5\a9'#Q9F/-I@$!"'(F
(=a0''EA+8"1&0e"TSe*!9+"Y&u.#F/-I:"!"'(&(A/FG'EA+8"-Wod"c*-Y!W`?HOXp\d'EA+6!>52E
Q50W2!!!$##4i"i"TSYe!.k3&!.k3&!.k3&!.k3&!94'0~>

%%EndBinary
grestore
np
131.46 234.57 mo
215.791 234.57 li
215.791 209.058 li
131.46 209.058 li
131.46 234.57 li
cp
level3{
gsave
[119.26 0 0 36.079 131.46 209.06 ]ct
<<
/PatternType 2
/Shading
/0 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[119.26 0 0 36.079 131.46 209.06 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/0 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
131.46 234.57 mo
215.791 234.57 li
215.791 209.058 li
131.46 209.058 li
131.46 234.57 li
cp
0 0 0 1 cmyk
@
0 0 0 1 cmyk
%ADOBeginSubsetFont: SDYSLZ+#e5#be#ae#e8#bd#af#e9#9b#85#e9#bb#91-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
ct_GlyphDirProcs begin/SDYSLZ+#e5#be#ae#e8#bd#af#e9#9b#85#e9#bb#91-GBK-EUC-H 3 GetGlyphDirectory
2249 <051C60D8A8C9B5EE3176428BD78CC1020FF7C128648AE27AD26C165980
5D340EFE730FD150B6988BA28729C691BDAFA2976B787752BE46C71578635EBD
84736F4E3FE38378395EB581B72D111BB322AD3B986789FBFB376D8C16881BE0
BF14D3A845F4B554D92A05C30D4272789F459F17E122701BCE6C5D7CF4ED4DBB
6D9810B21FA9D9A6F7B0A540D218CCD1449611617353704E71978C067C5ADCE9
DB60FD526C05FD4DA7B5A1AC7EF8E55FC842CC73DCD461512A33F8F79D128C6C
30E3F5A328763C8C7E0987F6133CD8007C2A8C439BC7AF3433E0EED22107EB97
2F89BC9B677BBF85F8CAE6650FBD1BFF53E51E6F4DF17B517BEAAEE74B78845A
9BD184120E0E06E27EB039721A01620C89BCC56EF0F315FCA247FC2C51E1AA41
8237296FCB061E97EB43268EA4DA03D704B7E2BAEFDC4820CB9B89200B33BC98
D4106CC84330DB1F10D72721D93E2F3425C89033B9EB9A2861B52AA046E1AE5A
4BCAC47D1A42954189744EA1FAD69F3340C1DBE68EDBF4D615A663125E074496
6C9593A650875B91900AF14D3C1B5197EB9946B86C978ECD0CA647F7AEF6838E
38FBD48E3852785C7E99FFFCC12B22F09BA318CD84D2C525D5F4B57051F40E09
38B4585F1CCE89C1D17FD2606A25BAF742BDEF87DDAD255BD22D1248750824> |
3995 <051C60D8A8C9B5EE317642B4FE5E48D4EE7B225FF89561BB2A315CAFBF
C907B5C33E7AA60CA13D4B67CE0D66E0DCB040FA3001FF77BF860F69221DF0A4
88121443B599BE5978BBD42FE1A14922034387583D0E25D5CAA7E2DEF8DC93C9
182C6FB374F4A4FB8B98968B27B91FF2C1E2B6CC8D19AC65D2AA34B597C646B8
7A1C5059655A758A4E3751C6DCB6FFC45B75AA0FE292ABE10F7408137A8A67AB
4ACDFB16715A12F7F8D595988B0083AF59E989FB2D612DC7A429BFE2CDB16F26
B4FEE74E4D4905730BD134ED9179FE0BF19CF784B63AC67316A90B5B730AAB2E
7C7BC09D990EBF216DC2A770F6DA888B594A2FF71C12ABB5B958767B21650222
292AFDEDD4ACF237609E00AF0E9D33BA8B08AA0D> |
2885 <051C60D8A8C9B5EE31713EB8AF271C7BAD5ECEEE431D1D430163E01198
CDA3F8A62D0DF40553525CC6E4DDF691353E58D595B0767C25A74363AA757FB0
FE9ECB8FDEB7F6BB0E8B05A7C52F863A3F5E7FECF769E8EE7A9E22199C1D1DFC
459CD36E18871DAB4CE0FF0D4E5DD5EA219335FBCC48372B0B976996CF0695E8
2FD55A28F2B52997B256CED5C8B0356497DDA5D5A4419A6A03B76BE1FCAA063B
02B00C3B3CEB7726449ACEFB94AB627BC867B9A3FF630450089B0512792F5C51
E9B49291593789BD74425FBF70A352E86747A990FCD155AE2359A2F9881A0425
87951C34752725F4DF8BC0713A1AAEC4702A160F20AE4B53AC9BE33A79AD667A
27266654710A521321F120B9A5516A7D41064C1CC185F2CA8FD1A564C6D3E06E
B784860605E77A2B3330D509B8800EE618603123FF917F925CA944BFAE480237
D913B090074D5BDD9EFF78D33507F88AA1AEB779E8FB533240088B9C575BA997
92E15E66C07D2FA3C0427E140EC8DE6B2D4C087ADC9A3A5C646D6CA973C8C4F2
D678> |
!
end
end end
%ADOEndSubsetFont
/SDYSLZ+#e5#be#ae#e8#bd#af#e9#9b#85#e9#bb#91-GBK-EUC-H-Identity-H findfont [9.75 -1.19403e-015 -1.19403e-015 -9.75 0 0 ]msf
143.8 225.03 mo
(\010\311)sh
153.55 225.03 mo
(\017\233)sh
164.08 225.03 mo
(\020\006)sh
173.83 225.03 mo
(\007\304)sh
183.609 225.03 mo
(\013\006)sh
194.12 225.03 mo
(\013E)sh
230.25 307.5 mo
126 307.5 li
126 261 li
230.25 261 li
230.25 307.5 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 841.5 ]ct
[105.75 0 0 48 125.25 533.25 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 141 
/H 64 
/M[141 0 0 -64 0 64 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 141 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 141 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 141 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 141 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
JcLB&JcLB&JcLB&JcLB&JcO!p!sKVd'"\.X!!<?6&IQV[Y5eV,"9[6UJcM):!=g7N/-748"nhqP!!*<:
r>#GK$j)+_q#CEs"T8K)#6U+hJcO^/!Wj&apacFe$aB]Z!!*E@p_El@#/:/V!!30(#P\H'"9QgJJcMeN
!XTeqoIL%h&d%D"S,`Qm%J(>:&de[9!0.$[!X/6$qum*'!Jpf.!:p0k&g?]p![noiVZ>fY!=BG-('50Z
"LS6]!!!,h"T\i2_>o/f^&S39(+AH!!?M^/!9aF(!!*KBl4sC2#hB!f!!30'#O2Hn"9IQ`JcMJE!X]tu
jt$KZ!>GU#!!*66neUj5!YbtBPlLjf"9mlj!<`Fr!.k49!!*]Xi@G$[)[3qUg].?^'&XN+%0XlTc2[hH
hZWu_f`6U([/^73(b"/j!?hsJ!2feu!Y#k$(B,'M&I4j,!<`Yp"n)Tp!gNb;!<)s!$QdnN![n`aZiKRq
!<s(d(',*V_#WHp!<NDU"Teo2!RLgu!6G3B!YQj//-7:B$17f*!!30.'[d`t%g;e1XT/A&"5!eR"T\`-
MZAq@!X0Gko.8ZJ!?r/X!!394(=!Zr&IPuIo`+spbln+P"2t7l!8IPT%NrkE![nffj8dI*!='4Y('50Y
!qH?T!8.>Q!X-UK!=&_h!.k3d!!339.)me?/1_hM[/^47'\!og('+pM[K$@0":*oiiroGd!ho[P!!3HG
.f:j:/-7(0!l4m6!!*33^D6k`$3AHQm/R.g"MP$?!s.3XJcO7"!>6Qf/-74;"oA;=!!*E=^_Zh`!Yc(H
^An69bm!M=!=&ao!1j/l!Z!3J/C,jJ*Y$!e!=T\9(;Uae%g^)R!W`B.[KQ[7!R^t"!9X=`$6C\&/-7.4
!q?9D!!*66YndHV$3:,,b5_PF"M+d2"T\`,NW?<a!>6[-/D;WV.N8Q9!!*E>iYK]Q!=]1V!!!,i"hb'>
"NLLo!;c`t"W/Yd/--n(joFcK!WifFW"oCG#P8#Q!!*3-VZd&%kl?;8h>dQa*iCRf/-746!nRDQ"qS*W
mhPp<$J#1X!X-CEi<98f!s,4uW;lu$&glEc_^kj=*XUU%!W`WBlP?iC!=o=g!!**&p][Mu!<`J]!.k4A
!!3<A.[hmh+qjhSj8]2`%A=R5(',!ShZ*WZY6F4q!<rXp!5&:4%NrkEbq&oE('We"!='4g(;CUd'FY')
!!*-(jTVmm!=&_V!/COW!Yd%6/<VOb*XhQ>pAb4$'Ta(2%gM;!!W`E/S-AQh!<`Ic!71]I#obA&/CuES
,SC1I!!*33_\U?0!YPh@mf3@i"ORCa"T\]+b5dt2!>6RA/=e<n-lE3[!!*E=q%f#,!Yc(HpAk-l!!@u[
!X/f3K`L<:r;Zm#(+>"jqCDXg%JKi'$l#$DlkTU4#l"B$!<WS'"l9C`"9GD#`rH/I*\+oU^aoL5'`7q3
":r]lZ5*HT$N'l)!X.3\UBLW#i;eu?!X/`WodkhK!uh4?!WW:S(AARE%K-9h"mH0j"IfDD!!3<-.]t>I
/-I!o!!EG:(;CUb&,cLM"gJ42"Od@B!!*NQk:DrN!\,&hr;Zj(&bQoq('+jFr;Zj!#)!0U"T\`,Mu_l<
!XTeqUFb=S![SH\q#CEu%BpVr('5-V!Vl]r!X-4@`!$2F!s-7=W;lu$'I_cgW[n/l$hF?!$5DeAS/),9
#4qls!<`Z'"c``e"9S;tJcP0<!=g9?/G(Ip-l<-_!;HNp#8)q2";Vae%0Gtu!!8SmnHApu"I&o1!!3<C
._71_/-."/l2Uhf%`]@,(',$Tkl:\deHNMf!!C@DOoPOb&gm6%U+??q*XUs/!<EN-'U0@6%g;G'o`,!n
"-Wli"9JRT!7h,N%3D](lRW)c('<Fp!=04L(>T`,'F`n"!<E>H"j[>R#6P"9!1X#j"W8`R/@@#0+V3?.
!WifFp_KbC!>,Uo!<)s!":(J$!!DQfJcO^/!>6ZS/-ILT.N8QC!!*E>ZPN$G!=]1`!!!,:"l][c"JPmn
!!3NL.c;l"/-7.4!n.,M"qU):]+tD]$ISnT!X/B(X9AV-!SII)!:'Ud"VrMf/--e%nc7JG!WicEX;1jJ
#6<rfk5YMb#HS(0"9S5rJcNmm!>6Th/G:Ur.N&E3!!*E=aqj.U!=]1R!!*0+fEKq3!!K>&NrT4f)_1S5
^aoO5&d$&Q!WW?4[2&fW$3AWVnc/[l"LSC7"9S\a!.k4#!!339.(Ur1*XhiF`;foG'YkL]('+pM^]4E:
":*3Um0*Ln!gitU!!*QQln$X;![nlh])Vj:&c*9_('50Z!l+g6!!!)7"T\i2blE=qh>dT\)_/cW!@/<@
!71]H":i<b!>5b4!5SX8"N(BD"TsDXU]:Gt&glThkUZcb*XT+P!W`WBn.s[m!=o==!!**&r<:@J!<`J8
!.k47!!*NMbq&oE(';tcg&M-Z&'Yjj'F`q#bQ%YE"O.)O#6P"r!9aE7!65'@"W8`:/--n)n,U!!!WifF
dM;iq#lXh(!!*3-gBI<T!!A2\MuWkk,l'"K/-7:?"fDA!!!*E>eeS8q"LS6u!!!,O"TS\B!.k3u!!3NL
.blQV-56O;!5ed;"qTH(!>Gn+!4;e-!X.3\!<`H!!.k3;!!3<>..8_X/--e%RK*Bj$l&XUj;%b,#GD.n
!!*0,hus,a!j;TU!8@JS&gHEg!\,&kaT0Qc!=BG"('+jIf)WPc!<WPe"TS\d!.k3E!!3HG.dAPf,n^7Z
!0[B`":ao;p_EoE$3?7h!WiK.l3.4l!s+nlJcOp5!Wj&amOSA[$afud!!*E@mM5g6#/^G`!!30(#OV`r
"9QsNJcP!7_uKfJ+nI5d-l<-9!4Dk.#8-PC!Yc(FhuK\U!!;]p!=&bp!.k3.!!3<C.f:jr/-."/L]I;P
!<`o,(',$TQ2p7O!!N!!!!B"sJcO*s!Wiu]r@A""*XTO\_#ON;$5ECR!=o=W!4)Y+!<`3&!<`JX!.k38
!!E`P+r17P!/:IU#S.LUJcPNF"9AW0!s+MaJcLB&JcLB&JcLB&JcLB&JcMtSJ,~>

%%EndBinary
grestore
np
123.31 279.92 mo
173.62 258.66 li
223.94 279.92 li
173.62 301.18 li
123.31 279.92 li
cp
level3{
gsave
[142.31 0 0 60.132 123.31 258.66 ]ct
<<
/PatternType 2
/Shading
/0 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[142.31 0 0 60.132 123.31 258.66 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/0 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
123.31 279.92 mo
173.62 258.66 li
223.94 279.92 li
173.62 301.18 li
123.31 279.92 li
cp
0 0 0 1 cmyk
@
0 0 0 1 cmyk
%ADOBeginSubsetFont: SDYSLZ+#e5#be#ae#e8#bd#af#e9#9b#85#e9#bb#91-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
ct_GlyphDirProcs begin/SDYSLZ+#e5#be#ae#e8#bd#af#e9#9b#85#e9#bb#91-GBK-EUC-H 6 GetGlyphDirectory
4054 <051C60D8A8C9B5EE317630CFCA7A5FC4D1646848279EED3AFA3DC23B36
91788E55DB77581134EE59A736D5F2221E2711003446BEEE04590B938EFD9C1C
8C23B5B1802AFA0B44BB4EC12286F674D813A4F0E0EE208F248D3E9B35320FAB
B389AF0ABE190470F187645DBB4D9B88D02BFC3EF27F5CEA709A5EC925338089
D37F1E39E97EF4470E2BDE5208F1DFE922A67BE9BAF157A786B151C74D8D7D02
A26B5114E42F122029F63F9F3CD3A53885E64A71F12F4E7B1258469B34E0FC42
FAFE9EC5674C7AAF92096DC3DF048F3DB37486411D485E5D6CA219030704F7DC
DCC32CB687563547DC77A0C8DCF2E629DB1ED3166EBBBB003394DFC1EBF5F073
5104722CA57071A2AD79BE9EA87E3358CBECAF98A87B8ED2EEA57B35B2DD3ED2
6B502C4137D6A91FD9EBEEF3D7EC34C66355A39CC6937D48EB47C93CA9F82E3E
CDC9F2ED11FB6970BF94959BFC91E21121A9CB296E579EB3C4790DB3D7BEB884
23DEEE6E51B8A35C31960B42BD284B2F139B41820F6FF69A2AB83F43150A4682
FEAFEDE6AFD091A4907A5AB00FF866C3B1F8FBF1516465E15A3E460850EB0CE8
F93AA7073875C303A0979A4B855D4F5861F5F7EEA20E90B105FB5E74173AB002
6806D3602FA637011463EA3446916F9DB552BA2679ED921B4AAE6C4327D691AD
C4D0D58093B43AD8F7D67D58A0595631B7EE46CE8F5E0105B76F2F02BBC3740D
F140449D5C3EAAAD722A7DD51987CB1612AD13EFB90276B41D446BDFFB55929B
67654672B4797FF978AD> |
1996 <051C60D8A8C9B5EE317642C4C47C4A3D202BC4C0909DA2DE78070B8A33
CE2CA0791DE12872ECF9A475530AD258CF00CA6BDE5C7C35DA6788FC80186EB4
CD5670898A60D4D6B728B524765074E7E95A95903F968EFBC79A499157B1759A
670C6FD5AB46347946B681EAB9D71C7E8F812572DF83CB202BB827B191ABD54F
1D00B01E3035A4E4C885D4D59021E5404AF02FAD478671344E050478B4097D6A
E10E22B85EDADD9102C125437544FED40F842D122C3E9E6C41224D50AB3AC486
4F93CE93ADA430990C66217B38720307B1232C5CFDAE15609CEC37AF87718405
A7F9B9C09DC3AFE1117BEF90A2B0852E5068E7F7D069D10F8ECAA46C8EFF719A
C796D90E1209207663DFE2168256EEEBC7981D66B75DED7C064301613500FE6E
AB8D48106B1CAE8A8FD93E1684C7A21990BCDE62DB025B24C9E3DCEEF773> |
1361 <051C60D8A8C9B5EE3102E77059DE2D89FA6FE12DBF6878FFD75F4226A9
8A3E5D1D6F49B566A2F146E2E94D5D898610FFE6574BAB0D881403EBE6D2FD5A
E5A4C6582E2522533BFCB6E3D170021934B5B7CF69EAD75AAE42C18CC6BCDC7D
1EFEB29B8217D9E70311775BE65B02E62C2354A9362BCCAD7A001C5ACE161843
FCDD68E4BE79D07BBC1FA94BC31D29EE31C6F7A590ED8EEA0CB81F10EAADED41
43DD9189E289B01714556DAEDCBACAB68930C0C4993A2A5CB208D21E9D2EB93E
787AF6C47D21FEB2CBC972311282B3640697552B4CC35985D5CE34DDBEA6116E
7043CECA075007DC8C959657DCE3A4795706CF513D9501> |
3476 <051C60D8A8C9B5EE31764DF0E84FBF6C7E94C854BD6C99AB2933F98BB5
8F213B0370B53AD69B293C652DB232D73A28C13721290C58DFE6EFC9EBC1710C
9D415295369C5A05C0DE19DDA9E049512B8B347593853E5E5B21E62D0AFFD4A6
17420B82F911FBC56139237E51134CD57A8A30235F0A8B1CCAB1E0320CB8D80C
C8A3786BC98E7BD79217EA1E0786B2C6652E2EBBB743527C5FF5B60CB28B9B6C
C5BC367BE04A3B8A0AF65CB5A256A5DA0CCDD8C25473D04BA2C6C15DAEFB6DB1
2AFAAB145EDCB9B9CD240646F635F4A0D76C635803CA0F1EE878C821AB023E79
34836DD0C7B61464DAD3A6F6E0AF4A0D8317A211A8E752AD3F0CB7EA1575D8B3
AE81E20A08CD90C344F9E682F155719F77912BD80DDEB52496025F9841EFEF40
8BA6365D24D486C76BC073A79A2E30B971E41A1B450D9244F75577CA9DB4F86E
82A3388A1842129F4AEDE5BCCB545DF3573C074CCF11AE23515E6295B1A2E883
DEEF449AA4BA9DDF58614968369EB8642C5C882A378A8AB72C771969E0C6BC6F
16EF4D1CC9D16233A9116474C680B71EEFE2CA761F7B2A603B1D44D0D03ED796
11F5CDC9B40EBAE815FDB29E1E45011904090810CA5C74DD1BDF0A1800C9DA75
7FB6CE5F11656B3F779021C94FFA3EC2B155BF1F7A2148B4D9271AC6DAA23613
6D85EAE568A5763CCB3E2FED1AFB45CD5280E508773F82AC5A8231281F61B9DF
AA3D570242D49D9AA13991F12CC8BD74D31848FD4A1A3E05246714CB1B9DC03D
B8DFD78F22986404812C2F72235CA0B8DC54E2974B9E05AE3AD4FC992ABFA6A6
6FD1DCCF68813B9B704766EE3FB5C826F98C49A2C1FF787761F43D53EA410869
8F819F7BA37A3FADBD724EE3C03D8ECD5998BA2ECE2073D67A73DC578ECD99B0
EBFD3141C62149A2BB6BB43605593116906B9A13F4DEEB5A4F8D7FB623512450
8CB12A6A10CBD30A63CDE27E85> |
1394 <051C60D8A8C9B5EE3176E1204171460F778147EBE0A31B34A84139C27C
36C072DB1CE63E49DA4F557C64B6DEFE295B5F1243B2EC5A9E3D7079946C3413
8FF073A5E9B509977345E2191ED77A44464508A36B908FE7E5C9633916755059
8076D132BC55FC63AED02F41FF7C4FDB84A84013484EC5A63782712D14B16B5F
4B58761DD2272CC5522D267A2A0A8A465AA45A62BE56CC4CAACA96963A8D97CE
E603004FF5C7FE582CCEA965A1CD0445F1849E6E7B43A75AC715B310F7DF3360
E9C944A941930D21EC7DB846F8332667811D6ADB2D7C6DB4CB3F61566B14DF47
420886A1B071CC1CE4B0F03100F41BD163CA43787FEB3F174907DA0365E7AAA3
2633E9CC4DE4D70C24D11B057F82E5749B27215162A91ED8731A3459C25DCFEC
F5EDECCDFE88BEBFE6380FC4623CD00DEBC4B92A30DCF82A6C8A8BEB0F6469A3
1731FA92E2AE6E12B5ADCA7106A74D84D19CEF32801D3D2F73C33B4ACF1A7A62
A9CB899B1BBF21FDA6B0857D0FCEFD7DF0CD3E9634BA1C2BAD> |
292 <011C60D8A8C9B5EE3103BDB91C700D8590DD29E88CE8F41C7A6E964CD37
22C4FA6CCF56FBDC6FE7C86D832AF41E7A6D1CB7E2CA3DFF3EC594F454006D59
AD7BECB8B2AC24C7DAE86CD5508DE6AD1DE4121F923FB63397404A5ECD928DFB
92F40114F106A63824FE0BC35C6729EFBFF03B8EA3A8491AA630B25B2944F562
80A022BD803F102513B01F4C2F18121770B84> |
!
end
end end
%ADOEndSubsetFont
/SDYSLZ+#e5#be#ae#e8#bd#af#e9#9b#85#e9#bb#91-GBK-EUC-H-Identity-H findfont [9.775 -1.19709e-015 -1.19709e-015 -9.775 0 0 ]msf
138.8 283.169 mo
(\017\326)sh
148.575 283.169 mo
(\007\314)sh
159.093 283.169 mo
(\005Q\015\224)
[9.7749 0 ]xsh
178.643 283.169 mo
(\005r)sh
189.161 283.169 mo
(\005\236)sh
198.88 283.169 mo
(\001$)sh
243 360.75 mo
112.5 360.75 li
112.5 327.75 li
243 327.75 li
243 360.75 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 841.5 ]ct
[132 0 0 34.5 111.75 480 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 176 
/H 46 
/M[176 0 0 -46 0 46 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 176 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 176 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 176 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 176 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
JcLB&JcLB&JcLB&JcLB&JcLB&JcO^/!>6fW/BKFF.N8EjlMpqm'\4%d('4sH!Ug$e!!*0,L]ulD!X&N)
T`CS_!<jt;/:oGQ"mc3h!h'nO(B4O'!6YP<"loZ8!7h,M)m1a*/-74$!pfme%c8%\('50N!Vuff!!!.a
"kj+]#6=k,!0R<_"Y0*pJh6XI!#4`!!!8r3`YJO]l2]?<Pm%3k!!%TN]DqpNa=O);!@S$8!!!N)(4m=l
(',*MlMpnfWs-9B!=&YE!.k4F!!*6QN\'!;!#4`!!!9kMX;1dCl2^8VJd(uS!!A)YZ2akDdO^e;!@S$9
!!*'0KGN_d!>GS#!!!/0"h"R8#6E-NJcP0<!<js?/CQ-M'^G`!!lu.O('"^,!;QeM"n2Zq"-`ea!!!tn
/<;=_-j')Bp&G(&NY^Fd!>GS#!!!/:"fqk.#6EKXJcOg2!<jsI/BKFC'^G`!!n%jO('"^>!:KoP"kEhW
"0MWa!!!u3/:oGF/-..#lMpnpW#!8d!>GS#!!!/T"d0#i#6FDrJcNmm!<jsc/?^T)'^G`!!pg\S(B#!K
$L.V_"j@,M"1S>a!!+#iJh61<!@S$8!!!M7(:b1]'ERM"!!M<cL]mea!W<"M!5AL7"Y.MCV(;T\lMpnd
p(i5qo+h<5l2[ad_?BoA_>o/fq#CC6M_*d;!@S$8!!!MA(9\JS'ERM"!!MZmJd))V!=&X]!4;e-"Y.kM
Rk+ORq#L!d!!88ufbOPpl2\[)W!*/'g]2p+hZ*WqV(BV;!@S$8!!!M[(6oX9'ER\'qu?^"L]ufB!=&Y"
!1Nrh"Y/dgJh-pR'^G`!!h0tO('"^,!6bV<"TSYe!.k4$!!!tA/A*M7-j&]7!"Rp&M\Z=-!Vufe!!!.b
"ka%[#6Cn+OT5Cc.eG9D/G:Up'^G`!!i6[O('"^,!7h=<"TSYo!.k3o!!!tK/@$f--j&]7!"S90JeeD'
'ERM"!!JeqcNO=S!O_uk!;6Bn"Y,QagaiF>lMpnd^D<jc!".ukn-+CIq#pa#MZC!^!#sB<Qn/7d!posh
!!!L_(?QA5'ERM"!!K_6[06R9!RLgu!:0[d"Y,okdOYA4lMpndaVLQc!".ukq?;HSmf`[nPlR]^!#s`F
N[t2Z!qu]f!!!Li(>KZ+'ERM"!!L(@Ws&M/!SRO*!9*tZ"Y-8ua=I<*lMpnddh\8c!"/)nrW%WUjTPVd
T)bD^!#t)PKId-P!p]gd%[e*\(',*MlMpnfap"IB!=&Yt!.k3l!!*6Q]e$<;!#4`!!!;O'Jen8"!".uk
T*<CA!!Bb3K)bljJh6.;!@S$8!!!M8(:Y+\'ERM"!!M?dLBR\`!WE(N!58F6"Y.PDUauK[lMpndpD/>r
neM34l2[de_$'f@_Z58gp](:5N%Ej;!@S$8!!!MB(9SDR'ERM"!!M]nJd)&U!=&X^!42_,"Y.nNROeFQ
lMpndJemPc!".ukZN[fA!!CIGJcP3=!#q4TeLU_L!p]gd%`]?\(',*MnGrFd!!J,^iWT>f!M]X`!!*6Q
lR[W=!\>l:lMpndS/0Bc!".ukblsXA!!DBaJcO:#!#r-n].<t2!p]gd%cJ1\(',*MqZ--d!!JJhfED9\
!Nc?`!!*6Qodk\Godg(WlMpndVA@)c!".ukf*.?A!!D`kJcNpn!#rL#Yq,o(!p]gd%dOm^('><f'ERM"
!!Jhrc344R!Oi&`!!<BS/1cB(lRW#MlMpndYSOec!".uki<>&A!!E)uJcNRd!#rj-V^qis!q$'f!!!L`
(?H;4'ERM"!!Kb7ZipI8!RUn!!:'Uc"Y,rld4>83lMpndaqgWc!".ukqZVQTmKERmQ2mc^!#aWEN@Y)Y
!r)cf!!!Ii(>BT*'ERM"!!L+AWW`D.!S[U+!8mhW*i(@-/-$CL!!!P[(7#^9$LRom!!!.W"loge"/#X`
!!*-8l55-j!#4Vs!",5*d1$'_kl:_b"3gtA"98Pb!.k4$!!*-8YSb%j!#4Vs!".ZoN"#aop]0jb!<E:d
"PNtY"0)?a!.Y~>

%%EndBinary
grestore
np
110.2 355.04 mo
222.17 355.04 li
237.05 325.28 li
125.08 325.28 li
110.2 355.04 li
cp
level3{
gsave
[179.39 0 0 42.092 110.2 325.28 ]ct
<<
/PatternType 2
/Shading
/0 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[179.39 0 0 42.092 110.2 325.28 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/0 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
110.2 355.04 mo
222.17 355.04 li
237.05 325.28 li
125.08 325.28 li
110.2 355.04 li
cp
0 0 0 1 cmyk
@
0 0 0 1 cmyk
%ADOBeginSubsetFont: SDYSLZ+#e5#be#ae#e8#bd#af#e9#9b#85#e9#bb#91-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
ct_GlyphDirProcs begin/SDYSLZ+#e5#be#ae#e8#bd#af#e9#9b#85#e9#bb#91-GBK-EUC-H 5 GetGlyphDirectory
1307 <051C60D8A8C9B5EE31713FEAA85370F4F891270EC4500F8F5D7FC5C42B
9CC98C4A9A83718CECCE2EB672D3267E5CCF7152B9EE58F5F759B852F58A4B5B
19FDD8908FEC8019B38C2B467F86BB2FF62ADB41BD3476EA874520A48123537C
22E8FE6C612C95AA8145B56B4897C4D393660A1C67CD608868D81CBF8144E320
ABA222D43DD38C98F7BF1E7CB2B37862CEAFB384F270201F0ECA38B3BC53980B
2B6E017AD924C04B4FC131FA282D25538284C5D35E661D792D856F7CB8F5ABE2
928146C5D096DDB970C8585552EB132AEF68E654933F443D52159163DFF16644
D37C3CA5E4B17AAC9611711AC0BA73AD6A0FF4F48A1EAECF663E0BB005B6644C
6BC9808936D0E4DDA1AEC610774456277C1FCB0F5208E187CE472B589636D9B6
08FF66E1A3363909F7DE0741075E77B0E5960C8B702BCEAA20AFA88022C61EBC
D033E5B1C2A007C89593B826EDB90AAD6EC543A240C6A938> |
3684 <051C60D8A8C9B5EE3176EC777A8D470FBB0BAB185FD2FB9A84D0FBFE13
B3B32A507D705352BE5889757A5B15747C7945ED33070E8C34817370AAB891EB
3585B48B0345DC892C7B75BDD18A1EB26B50F46B5FBD6D05C4B080673D413EB0
0FEB554D2A0654442F6FEB3C25A8239260EE2AB7EDE649E74AA6CAD19B76C806
C96510CCE4C831C06170932BBDA8B850F32E31BD17A9F783582D2EF3EBFB2F4E
CC452FAD4D5656E29EE010382EA2AAEEDC836E0F669EEC894E38FF391BA5D542
D9F5CC699559CEA5A6BD0F2C1B0610CFC5EA43CE850EC81B33D7C0AE54828553
DA1624B8411AAC5C8AC88480F46176F352E2D9A50FD837495215E434F90E8371
FC422BEB58054D99DCE6FC2E533025142735099E3A81CC17498ED3E94E746347
2F7EE0C79CD0435DD5B69CCD5974C6A71A68C4AE832EE281B0BDAAEA730AA707
C468275D651B0E987F44673D02980DE0CBAAE6836B8075C929654F24A9CFCC3E
C8E809DE4383E7CABC835FF40A946B802153B002886DEC3FF8668DFDD3B0398F
16347FA0C6365BE7EEB25C85E294C7471F5D459995AD009F087C479847EC70B3
3571244D3F514DF93C6B89FD888030793E> |
2105 <051C60D8A8C9B5EE31713EB88C58A92B10BF0E17E10243D747382A3DF9
12FC894296604C6A70611355F8D85046C7FF839431301EFA0D0A30389AFB4097
A8A3733D76E435AD1DE19C03A1F27813336D48EF95CE020A091DBD039B2C0DA0
CC6F3DD386D4B0EFFF109E9D35CE1FC9E8D16EF3144BF0A92E4C603278BD3292
7A411DAE6A7C54CB29F8EE5BA351DD98A1904A367950E969CF9F17F8F4886D55
37D67A0627132DE95527A8D8A3D733F3E7F0DF9279D2D329B38DA183CE9D8AB5
241ABAFA8E67681FDFF535C95FD3DE8B230840E56F54267B870CC3466414BA37
C89ADC6886DED977EAF3CD3E51DAAC59ECBD9F270062350F528F9DB370E58732
F2CC9302> |
2226 <051C60D8A8C9B5EE3176226FCE8AF51BE273BA2E92C79BEA570BA5AF54
FE4436574B15F6A87C450F5CA5368CB25E155D6E114CE88F7DCEAB413A97822B
9F9BA8D17F0389B6199471F88387F5727DC9E8486E45239ABD37E29D36B2F596
CB85A39DCCF496DB7169791CE327EC24684EFDDFB51A3A2E3DAA3CE84380CBCA
B052C41309D6AA6040BE2C6917BD036461C23EF8508106C8136A2580F31DB4F7
9FD22C3D1A77B776DECA73373AC78330686D0AEBA88BEC78D87559C680221190
D7859974DA4B9DE2A27A3E78F4762A45DE95F574B4CFE5789425D5C50A1FE03E
1DB3258BC56CF0B074C689C45564AB5112CFCEEEADE58D90B9A1AC754CAD8A4C
712F41E95E6AB4B15E8547666E587BCFA66B04923D8E5F74FA8946428D042FDF
A5ABC056DDB1A3E5CAB92BFB423424A4E3FFEC6404C5B78F9C9C9A528916179E
14FC3DF971EF80FC9BFE5680B25496BD0D254F773A3E2E80069EBC8BC62BF34E
BA65F8842E0DB6A1BC65C5B97C8349CC75E92999423704A77E703DB9BAA0989C
7C876738B432BF6ED00257812BDAA57068ADEA7B432CA5E4A358CAABDE27A98A
5797F50982C8A175CE3C936FED3800BF514E39F9257CFB3CFECFB56A1B162773
722716DE79932258325AF047553EEE9682585D6C3F2A866A3FA11BBAA38A904A
A10909CAE957C4BC28E724908F8207A508DE6493> |
1876 <051C60D8A8C9B5EE31764D16AFA5BF3DF1A3402BD29F7DAD7E9C2D1B7C
F1AC8FCD015D2957143396C8F605DE8D67922ED0B7EFD680815586AD113C2E2B
6DCB178239E9B9BD1C30417857EC230B4C3AAE6BDDCC53762A7A6C4A8DAA7D9B
CD4E7CAD62197768D6C7B881487DDF43214D1E9644FDD544851A8556CA3E7ECF
CF2B18142C48E8EB6BDAD48F58135D19D240081AE8C1206E645217CBEFC1D32B
4D2321F9FD9E16EFA6F2BFB294EE062925779262636980D9B78ACE525A27DF96
4EBBE991C0D070C9649894C997B02850C9643E9220CB20ADB668CB880C4E4F95
261897E2A420567FE31B91DD11156EED74F94D3A4CDD74571C50FAD0D90D8ABB
99DF223146934F320A4F17DB6DEE5056B6E002A3C925AFCB9238ECF76682C1AB
C9AD82E061206A8F33995915D05F63A337E860F3EF5B> |
!
end
end end
%ADOEndSubsetFont
/SDYSLZ+#e5#be#ae#e8#bd#af#e9#9b#85#e9#bb#91-GBK-EUC-H-Identity-H findfont [9.75 -1.19403e-015 -1.19403e-015 -9.75 0 0 ]msf
143.8 343.47 mo
(\015{)sh
153.55 343.47 mo
(\005\033)sh
164.08 343.47 mo
(\016d)sh
173.83 343.47 mo
(\0109)sh
183.609 343.47 mo
(\010\262)sh
194.12 343.47 mo
(\007T)sh
1.2 lw
173.62 77.95 mo
173.62 94.83 li
.763302 .517082 .0459602 0 cmyk
@
177.34 93.9 mo
173.62 101.34 li
169.9 93.9 li
177.34 93.9 li
cp
ef
173.62 138.19 mo
173.62 152.94 li
@
177.34 152.01 mo
173.62 159.45 li
169.9 152.01 li
177.34 152.01 li
cp
ef
173.62 184.96 mo
173.62 202.55 li
@
177.34 201.62 mo
173.62 209.06 li
169.9 201.62 li
177.34 201.62 li
cp
ef
173.62 234.57 mo
173.62 252.15 li
@
177.34 251.22 mo
173.62 258.66 li
169.9 251.22 li
177.34 251.22 li
cp
ef
223.94 279.92 mo
245.2 279.92 li
245.2 221.81 li
222.3 221.81 li
@
223.23 225.53 mo
215.79 221.81 li
223.23 218.09 li
223.23 225.53 li
cp
ef
239.09 252.79 mo
251.312 252.79 li
251.312 240.79 li
239.09 240.79 li
239.09 252.79 li
cp
0 0 0 0 cmyk
ef
0 0 0 1 cmyk
%ADOBeginSubsetFont: TimesNewRomanPSMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /TimesNewRomanPSMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 78 /N put
dup 111 /o put
def
/FontBBox {-568 -307 2046 1040} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/.notdef <1C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72E
FEDBB222483BD74F8B> |-
/N <1C60D8A8C9B6079FEBDAFCF29D322161AC3F52EDD22433113CAA67ECAF0B
056592AA81FE2842CB172B65A1B8C599C7080F0FEEDF52AD2A1E3DD4CF5B5A3A
BC5E3E3936B6025ECB4BBB9A6B9E506B790F934302A34C91233D5C7DD4480C8E
57FB7AE58D5F049C8795FEC67FB4BCA555E2CC51B9B80AEAE5214780F4B92D63
E63AE746DB94B9539BA648935E38> |-
/o <1C60D8A8C9B7A73DB903ADC070A7C49752E736186D1727D7954B8F3DD441
6250EFB2715F7FEA4B4F24611BB7B770A0989FFD12258A4EC0D90DD9998BDAF9
96A44DE027AE6C486FF30337F30EB574748A139900482713C8EF6F8455DA4367
02294DB22515A99C4ACC57A269598D687C25D5F66128E3441FE6E0D99B55B68D
9C19E720D771564C6692898D127FC55C985D08C7E6B95F874FD094> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/SDYSMA+TimesNewRomanPSMT /TimesNewRomanPSMT findfont ct_VMDictPut
/SDYSMA+TimesNewRomanPSMT*1 
[78{/.notdef}rp /N 32{/.notdef}rp /o 144{/.notdef}rp]
SDYSMA+TimesNewRomanPSMT nf
SDYSMA+TimesNewRomanPSMT*1 [9.75 -1.19403e-015 -1.19403e-015 -9.75 0 0 ]msf
239.4 250.03 mo
(N)sh
246.899 250.03 mo
(o)sh
173.62 301.18 mo
173.62 318.77 li
.763302 .517082 .0459602 0 cmyk
@
177.34 317.84 mo
173.62 325.28 li
169.9 317.84 li
177.34 317.84 li
cp
ef
165.85 319.23 mo
181.402 319.23 li
181.402 307.23 li
165.85 307.23 li
165.85 319.23 li
cp
0 0 0 0 cmyk
ef
0 0 0 1 cmyk
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
SDYSMA+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/Y <1C60D8A8C9B6079F6DFB7BF0F52906B46CE3CAA0E8323C912C9C50CE04CB
EE3BFA6D3DADAB51F1D2B8A33B1B6A50365D1DF565AD1D4D0481E5884AA6753A
385214AEBD7F48442617E767905360131875D06221ACC33FEB7E156BD0E01C3D
31B41D10C6403AD5736AC0D2C01267D72B9EB39A3AC141912D5F9AB1D3FC1041
71790634A884F1C7CC0406B7A6D00B5C3177700460D6FEB100FD62497BF422CF
B493271031B0098EFDDA7C3DFB256C9CCEBEF393DA5E207B273184B7E0> |-
/e <1C60D8A8C9B77FE2C19119FE019B929F076F8319E8913467AECA41BE2BEA
D3EC175346E3F888D3AD76D215AD69034A954DFD661ECBEA3B145468480B6A15
F5C865D2083DC0B04744AA76DE4CC9E0C9DBDCC2C59DAA00F28A6A47092C7FFA
0397DC47C5CBBA69AD805D3DD20D56411E92B0DE9E3F19C2FDEE1FA501318984
A59E1CFFFD06EA629758085868D3F5F7204292> |-
/s <1C60D8A8C9B7361F027554B74948DF9D509740193A97E4C5A946CCDAC22A
CE16A97A38CAF70766C30631C22477718670FA129F481BA880FC6C2A8C233A03
9A7A46ACD6F3CA0422B1CD13AB9E5980A98B78F274FD5FB0A519013427E3DF40
BD973F22C9B236BE3D27B0A78749138244A4ED344575D4F7F677439F8C2359FA
AB210EA03D2DAABF38A6B5B4F0819D6E85CC68A9859B12239E01058FD0C7C593
B22AC00DE1C2A90508610457C5DFEA41C78C4C677B338B4C0ED41B0474AF509B
93D8B3403DD443273DAE4F97B7CDCA81379AB0933639> |-
systemdict /gcheck known {setglobal} if end {end} if
end
SDYSMA+TimesNewRomanPSMT /Encoding get
dup 89 /Y put
dup 101 /e put
dup 115 /s put
pop
%ADOEndSubsetFont
/SDYSMA+TimesNewRomanPSMT*1 
[78{/.notdef}rp /N 10{/.notdef}rp /Y 11{/.notdef}rp /e 9{/.notdef}rp /o 
3{/.notdef}rp /s 140{/.notdef}rp]
SDYSMA+TimesNewRomanPSMT nf
SDYSMA+TimesNewRomanPSMT*1 [9.75 -1.19403e-015 -1.19403e-015 -9.75 0 0 ]msf
166.05 316.53 mo
(Y)sh
173.559 316.53 mo
(e)sh
178.072 316.53 mo
(s)sh
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 ]]
] del_res
/SDYSLZ+#e5#be#ae#e8#bd#af#e9#9b#85#e9#bb#91-GBK-EUC-H-Identity-H uf
/SDYSLZ+#e5#be#ae#e8#bd#af#e9#9b#85#e9#bb#91-GBK-EUC-H /CIDFont ur
/SDYSMA+TimesNewRomanPSMT*1 uf
/SDYSMA+TimesNewRomanPSMT uf
/TimesNewRomanPSMT uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 17.0
%%AI8_CreatorVersion: 19.1.0
%%For: (keming yang) ()
%%Title: (CA.eps)
%%CreationDate: 8/8/2015 10:40 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6=)Tn<[NO_q%IcTD8gMC*JQ[Oa-rX8JU)7&H,pkLk^%Z^mr++H$D:gWK#4Q#.^Y-E1!=pl5)LLE4T:'cHSU]U%<Ln2pe=:s5
%r?S=1G$!:q>.&+A>,uCZZT+P;HMu5qEVt179;162-K.\>):'t*S+Zaa2`2upO/AQY*DJeuo!gb'Ehcci+*Y9[Znrh_q.\DaqU$@0
%:YKaN8_`"\#(uGahVt3arD^L0*KOg2loLJ8mr7T0DOjG(GC&TBf6&^PT'<>S'C_^E=jPHW>&huM<3AlV3n+`3?M0*/oT]7?@Q\If
%)ODgQb).k8PKBKDoi;NpE0+a5qZEu^k(i>lQY*!,^.U8aik.M>S^*!2NmE$>%)0up0KQA7#S.1en/:+Z[17rTeg38E+k34j67n\'
%PNIu?Ms,=@_dlYe1)#_D^BC)nGLEHaMFk.RA3-,ddj_ejU$,15@M3L7:*^Zu-^Deadc_E(_5%p&nHL'6oY:?#J,\2Pp()ZMIm!tS
%QLX"WYg%Ym%>PZj>]I['TKV?)cnh)#1uXEM'Y5bXMa\4QE3TZ`V5XSd;jh`jA^WE!J6NG9)FVUZ#qCXI!O-YiSr%)8$(=UD(i2fA
%8>oRd/ah4SpKQ5'-kVDE*E9)VE"r*#AcHZ[HKf[EU<$>ZF>4kVr:R!!,f&>b)=mXG\Ao'*)fc\D62OBl"KFi'$72k/r#7R^dpYA+
%chc[!eshtuTJ8ZKs58Fk8VM8d<TN$5,6Vd=6`k;"?X(:>kNKV1gFQ!qKQ<L3fn:;MNGidf,4S@\S'Jqa>WRGU28cY)-Abq>:O6`D
%OW$a5<tSbI0]Vp?)ClE^WW?'g^"*YW"4pHP8RNY@6Gu1tLq/*#qi'tg1h7gK0,#/c^;fno1>0RdP7'j''Hn3?BKCboL<2EgPJKJ_
%,jH-cB:R`hd"=f9L,pLf*7HC.-mg5T4h29\IJ&V4p8He;<0Lb'1kRIg]u8r9DU7$>0:Q>_hE(DC\+jIQ:!l=A--O._R=o?&"4pFB
%]Z[VMT4Qt1bJI2D,u674Mm"Fj:b8#fDoj7=9.$?710L`:Q"DdJ-Bj!9cqXFa-3M4B)(5]]i!RFq,q)eD_5jCF4=QPg9XP4'X4:_n
%^L"$/JSLI_6lJdg9NjhlP,IfLpmbpClgPFB6,2=b`LpRIDojg!'O7=?F:,1\mijg6bKqoP_DgZm>bNX!/5e?I$Ego-n,[Do^Aob"
%.;8esK<E$*b#GE\:E1\9G_0X]97eY'P#k6D8I%fX8a?Y0gj!h;`$47IMEr?C$<<4>,X!O$KRnad:^m1KN\j$2Go?Ga=82t?,]j#f
%U%*(0Y##Q'#ZidKKNne'8IGNq8.2rt+si(58")tf&&ehF7,3m\P7HNjPGSr5Ui(2)8.k@sb!62#)MJ[\f1F<1A*>.BTbsJGkTdnO
%Go<b]#!.QH(TCZ08HaGE#,-.$S40.akmfYDO:39>EKZ,f9<_4G7rV6H'BJ,lMZY3tO#.r9M==+0U]U+Wr!890'9uBP)1-rX;FM?#
%&5ng,5C!LI0$[dKSr(OOk5h8uE=U'SLgQLJ8Y#VIBT'Bd7g%HjU(b9oUI8q$fOPRLWL1=jdioUK@[)6c57Bn#aoBHnaE@9?s-"Ps
%3`6jbO8PXJUf-9cr1En_"W<Iu9@2/):SC#paoBIYYt2UPs2bdt]j)nnjT";=;BarZs5\ruIKVhF@gH-k^>up$NVnPq1@\7);(YiM
%X26`S0O%*&rftmsnNsXP.c]EDnp_iN^*2;EI82Im4J%,0"h7S?R0$F/dc^o76e;[V>t#8Z$!&UI.Uu"`-C)YKM(8LXL+\2Z_s?PH
%'M_Y!E<HGOYN"hD2<\`mrnom7?VSSg-g4kTWlBJ-bqo;c>&G2m08MbD./lTo1[82pE[$N-B?5RR9(@DZ(3H/mLnfL3PUK1tQOk$C
%\/84[JguEcN#-.k_%c\l]e1FcZltuJ!'0P<?ndbjJ%3?Kr5TWc##9hJL8*`>(JU*fJ7jP^%((sm&#IZt-379[PD0V3[7UMXJcSIt
%l*q!"?@bs$*C+i=+8H>)QbK3.$_o<G%f\gP7fNM:^_Y&r?j[6M7"&_,.MHG7P>3;H<@cECL+\Xf5aXul$g7eIM@94#!!Qb@AcP"D
%LPZe\66U#)r(iDU;iK(%YtBPFm(^nkTgoi2!@h8.SjN!t+PHlD,M`#]6@=?W"c,YC>fILZW`=%2OngA*,X;U1L^8S:ipj1mAAY-m
%X:g4R7R1O9<%(FBR([$:!DJl5E0!gW:d5gkQol5)dWE>o$Qkdo1_hi'9:R&68;0qq2_kH@6;<(:<IopugBF:%'gb(a'3C8^hlBWk
%nL.dZ6?&!$VP-d^Tf<h7)*FE?7O!9r4VdI<Tb@V58:oht\01NLU-k:Y!bl:8*5LkXJOG4S6;^E-<=GM=,Cru&VG;jSAcc%l0os',
%JOn/_!QMF\<u@X'.[D8R-Go((KH2Q[Z-Zm@7>g./bS)d57N>%u3qO'$7H;N=QnXVZ^kKs0`L%$s#nHD0;[2.#&B9[JJAC8c:Fk]p
%EP;eo<i@&5So>P<s(YD3,s%"YVXs+t]j<<!!dGBH^gQC5+%tW;GUB;N("hHbKCPH#<;qKA+e*L9nbht9q1[)3^?/p9+<hJ?^j.`X
%fGi`IPllq"<giPh0?mCP&tS`\MnKV?I"+QPp,_7U2]207dlmgTla>X,3*uB8T#\Ej^,mFN%_1D+'98]uO6>!cW#*)4[e]GAp,;@M
%E8:WaFV['>Gj0I)e."?5IJ>V(gtu`W86f-l66::3kjC"ANI(!VH]/p'J$]-Ia2MY<]>oJ<#urn6!$s:Z\QEc4)fX8?hb,=PZ"C2c
%nYjK,DeqIKG7cm!nQ:"\oA$;A"+<b\3rJc:)g0lIk8-1INeuk-h=9Q]:ab.IjbE_2ItV-(0en@]I^_HWNG#Nj+-Und'][S;9MsEO
%?>S9^6F.5,d3-CTKD?4p3M4<'^Q#.4KXC`GO3QO,Ng%2b]CQmV)pZ-=RZ69Q]e14Q>[*Q\o`kRe)6r^&IKMH@fUd9L"5KVm)BO@P
%gH9ce5/+K2Y69T!F6]SX9WWd/!EE,B&.=BC/.h^pUtuo\"0k0=<YCi4X5MT>(&TheV4r4J,/&1c8f\HS#Dt8A;OP\o4a)\`U2%up
%$YSOS1W9`7UePLMHc,Yeet3A"`6P4^TS[Hh6eCD\CW4KKdT]H:nEPGG,AQ34+emW7?lEeo^hp>@D8k7H!kKs`d`1KaF0Vm(%Z\3I
%OkMhkAQ0Bl^"4X.qP7(t!MV64i=J%>"Q5X]+,atS.pa&#7AT[(rEoG@K-4Z!?C_a#F&dSLdQ9\7iu(>+&+R*kQ`CJ`\0VVh=4?u,
%bBcqr+UPk\b\/K$mMNV0=`;K[ceH-or#t2<7a,_=-ngeRdb_$O&+1WNXC;FJ=8\T#qD$r6?ps2)2feG`?KpmtoPY@DWI;Ye:G?N`
%!tj])o:+28I[4k/#'9F@`fK;HK@0#;o1Pb')g=:1%G.-oQN&mKc[47=5[T-"^`uK"*gotIrD,S^8c"RGfLIhcU&XXQ-;L<[dVI6R
%IhK,>;'!#hc:ab'GO\c)^Q\E8h!:=Laq^#MO%^1o0$^+jU6[Ru1P>ZSPNY5b>+%]?T[A8=iY8uEVU16s+t"KPKD)7gHgq1U,"j]t
%C-q]Vn3YS,8*E1C)]c9clK)W%NgbLNoE:kus/Ur;9lhim-ltALFUV_H;['l_;$,26&?Z]1r]uT\bKEdYC;9]-B&.ZJrPIBU5\RN;
%n)!%(.0riUH),t(Tji`bP3q0I,BT&OS,b.KO^<]cm,Yk;obRB!o\FjO*Y6cM_BrqiV[T"WclaZt&1E<RclaV?$ip>f6jP?lS;ded
%$l^Re4\9)3]5Lr*T99!M8m3RTA_\a>+HreN-56Et>:#6&(TD[N%%+7Hb;,F![F+V2mWTYq[EBZ0c?R^.%Q3#`\dQuV!l!&IWboL4
%i%BL%c.`hs7qN+8d=_o/<<BprZO<F,W8/1ts%"^CWd*olHDiijoDX\IZ;q)OWFW,eGLK,7L!b<2(?2rm16;WFg/[>aObi1eUpi<]
%l7Y"9PjHdKlOEdjs87BEl$rV\s7@uDq`k,Hs6B(Qh7ra65Q=f`*i$><De$K"*k$B=Ok!L0.s.&M(`Iet9S,iF+(g6V0I<U?<1#.5
%BP<\t85-6Z6ptat^m<V.>@FRP.Se$P3#dq!'CfTq(!jf+SmUKrGUZsZ<t\Ja"qP\tmeLE9_kJV[Q)<IMee@NpdRVYkJkj`C3fX.p
%F92=Ukn<t1=sp_>Altalkg/i.C26:PD%Zf6-!2_;TYEIO5_"UPd;KZrV=6@!Iae(5$N8</^Ol(_^I@cr6IujaQDkLs&REd+r)TI<
%<!C160Xs`dP,]cXM+YFt<gX5"Tuto+V-GX>b/JCpS11AZWH,;7.*'MIR46U]C8k)\QV+)`WDLa%d\Tnl=\=q<-+:abI\TMneRG@W
%/s_C6@\K/<VMcn.CR%Mg>X>PpMNpLSK74,C)7g)\DLpFEYn^.ucnC!)>9gQ][n)0P9qgGiqG!X?3<!L:08"agoF#oBink)\='98W
%[&tOZ0TB:nqB3.%JQiNLAML9rGI(<1&NZ[<PKk:k9<r79&I/cSBLH$\9IA%1_=s4G>>uf,W!,<WEC<#"*X=0`U/QjXWC/elYR(LM
%9F7=g<U^E7$%Y+91jTm6Zjcj5"/G*S$5!JrLd$rU+9_lUeH!e4&-PA<*L]aD@BD)5l:PW,O@0;$U"Bc@-^*^>PD20#l3HamUJs?!
%'_O4p2C?*DYZXd1+K2",(Mc9UC4L`9%f'EOmP/Yik.NgoHZaS"JYOj>h>^-Ui%N`41m!3$"@*V#"3%PsIRN_c=QF]EA"ePCrtIOZ
%`Qh8ao2G#R'K\OucH=*9CEdrST46u]f_Ht>IYs\g@csZA=hWIERu!X1:U0Lim/.PZ5K1oDZ1Co\XBt6=9Z0]cVqCeoG(,=>T46u]
%f_Ht><\JWZ-=S@u;saDr4$U^0:U0Lim/.PZMhiCk./XL!#.qt#ILKWENnD`mr7_L,o4B-OE&8U>]s6&[ORn4Sj3.F@1>ntkPkPS=
%DfDD(]R[U9nEgd8qEXe(6S7r%GTWM*DpO%W?BCn*8<Ce/D:BWqNoq3sXN\Ap#;,_+s7Gd[eN`u$s7OLJ$1ddAW:Dk%!D"`p6:g<B
%_,WF.o58$eUOc;chCKRB*l1<m^s+"b#,!n9X6uNnRj<s8]>&n/:i2fRkb>hdgfg[OmKi3i5Fj5n=-!qk_B(.\ctJ;!,XK"<eUJb!
%8!RfWRR%M=/8i?NUd):siXI"optG2RVFYS'LN);AjS3iPj%LN_GQY\k#:!1jd[n_YIV1k)VEl>@<4Ka8mJj9<X9a]X>kborkjdG!
%.)gF@#7+>XA%9a39K;!N?u%T9rS$D34(s@Uc6.g8?1unD?nN1K#?-h<,K(XVE^FQ=lEC6O;:Xpk^$',WQpN47jCY;,-P"M"/0=dX
%F;B]RZ_jca3Z*'*\XoQkMFCT<'[%_Q[RPqVZ0o(_"4#<<E&,"Sn\KFq'XGJ7B+%Q0O$VjRcgH0A)\;rKm-e.M1coQ,dKVH@0cK5>
%qO_9STEbABg@NoRQ)Ch#r;l-Z*s!a]%f5"r*]>WeWZ&M-g&m7.s46Y`hAqTe;">.5]CAq,[XEMc@!<)NSJ-q\+aQZ3p?[!9oCO,!
%IssBBc]::]Ih8Y0NlP3!l&97GXZ5HLB4N)f8);Y/oS:g:0Pe<@chT2K2s($KW";M*r?9lLjC[d#d]HQsR*=!<=mlY,&k=dV-nS1o
%$m0ZV0(<,XJG5!VP3:P%QV(m'hGbsnM2\u"mUI>Pb8\6d@B52fKN%;7-\M,RP;`FiG2U^Ho&'KGs7628_9fn;ot.0E@Q+u:1+fer
%7c?Zcn0eJ4$Z9o@^*%qt9,ci)+.A021K%]so#/Y.[$D:D9FLd"1N)ft1ABLo&!Y)H4Q^)jN(+7#$3rETQ$ce\dk:*/Hh947^N&,M
%GQLJ-@:R66go<<t7tj9LiDt.bi.YBO;FK36h<W208I(";l)45]HdJC"4$&pkB/9,o%_RMkD!\iK_qnGm^Ce*%8=dnJB7,%_S[?L^
%>&Sf'kFKa!-!3uad[kD?H9.Q,g<`38)2'2r?G2u+EVFN:T:n<d&oqXhi3n/QD\oif(Q!g%1MP<)?H1`^VihAErcAQ1e"`'Gp':u$
%P6olpgU(Q2[?HfO\SYb]Eg>:cfL8Y=9i,5L:9nS7.P"D2WBL*c4h[(MP?&j._/iP8s-<1^EPKihXq0npJ'agEPTP/FO8nYJr6mn-
%YQ*QGr8""FL]?L.5M_<rKWo5QU(^f1bcBe2#t`Np%\7RfGDS(06$_QdoYjBfWEqTScR+IBCgN:@.(7ZWc/i.GTL>AGg0M7U8i.J&
%^YjDV<a]%2.$"SUUlm1-Z8KTT#O"jGN`$3mn6%`Lc3FF`Z,4f_kc$Cr[#T]Q_-D0<"%a<,1JF%Pk;OM9b36CNmc@SUihRd58t4fS
%G5"Mo7Y5+#*d'oEnUt%jd%@?*/m!Qt%W+jKHteMFVN!$EK7SX4)08]S_erT:;-dm;0IDEq,n'Km,+XU\'WV_`@pV1(M)5q^[W?'E
%KI');^X$F6n*iK!)qBjY'FO#..-TK_'XU6)G&u/A%9PKE9T*AES@uX3\XCA=XN%DrPh2=UBnYeP9K=HAct:/sbuKfs-;@^/FZ>S)
%':b_Ri'<2RM%M,KY7f/tO(Nen''nqa5s\+?&BRqbFl[WKHXAfc4[Y07.N1lTPV"CNH<)!!i',r'8,_[6Rd3Sk@*',QmV+WYBqGYH
%?n=@APfbuG8ofVej,(&FY5+Pl;\<5UWlgJR>a[GC+EGYFV1ogZAJ.gN*4EtE#RG@;V3=ZS"Cf<oKULe4Sh'I.K2I^,rK?K,8%.DM
%o2<!B:F1,$=U?**PtF,U]8U7?NQ3kf5r!!?8SD9>Th4o/94q-kH88-iBSe'6l*tdiK/sI@N&I+$'2cpls2sjF=MgD@#"i=Y-str<
%H565jD].g,Zj-rKD?ct"kYI:P$EG#YHXS_dZ,-U&3n58B4g&F*+aIRqj-fbSaIJ;g4%,;!TPS.F)8%No.44q$@NXW*'PYeo4Y:A@
%nJiOg`'Jga:!r3<J'pW]q$a9-XY#<JhB!)I*WfV5A4[tLlqR$bkV[8F/##b2I*Jf7i]E#$!l5k,0V$%##BgdP!gY,oi/qT(?-6Oc
%2tS!V?ku9,.+h=SGuA=ZE)Mi8fpu/uJ6Ml%OU?-4!-1lDf9DMSCFfLCPlq`3:m%-Jm$T!d/lhHs-/2@o(bm:FA91^g;+9`6=e/X"
%'U?pGKYU4?dX,Rda[d;I5_U-L:sBBI]1_J4=eJSS-;`?.:_55:I6ZDL6WtUO/Zh@aR-7DGoKeGU1*cDa8!rCgkD*8n4`lHVO\:^I
%mi67#OVC6r_]PL//>CUc%GO]cD4__H4F%lp7QU^4l]#7YU[opibeG?L'sSm,LNIInKDOLXih+f%jQ99<jd!*((0h*s.#0Nn0SIT#
%e(Gkt,JH&u=;"eSfG_CM]V+bI3dGGf)ktB*On3`jHHrQ=JI(fs7UnWMn3T.9O[b%X"t1IdR3_!cR1tiY(lpM"9=_hC%ab]E'M9]>
%;mc?^Wc^+-RR!_GE8kCBG4KiXE]0L;gRcKZk%@eA2:M=P?I9Ibm3chP.J;$eo&'GEs8CjSl+d2/5QBPhpS\&STE"05r9OCXJ,cYD
%#XVN9PlT6blY:EU?HO=iUp@8Ro!PDk>>ELgTG[CPg9@(g2snA>PjV\o8g!7&Ma`qSif`?RrkM9U+tCTsYW_/QN-\n(I37rUR+XAd
%OJRR4_[IOC<ZQddOp($bTsLJ6^_djMHdOPYdGc(2[pdB[,[]HLr83<o_kbpQ=KAYO$k2n_C/'XR+YdMcVG)nB_':AYAm=b+S"<Be
%P<nqu"e-`j\tc5N=ee;>A?e`&Km>?!O:BnW#Nu^+>'0h'6#HhQ7$d0ZMG58Lg)2L&nq@#n-B"(Scn(RWBCbt`/4"oo89TNdVdWO?
%$ADcZ/h_3cdkY=#oT<Ee=,n8q_V<<M!Z0EB3c0=\25FuH`E#=)9$`b#Z7E!j:(D@t78"VbQ<W@AYd,QE1[B0?MtR?5*0Cr(n?:l7
%,s-d#ds4HPV6&'X9i6+ajT\`f3^q1D.,EHc7bh3PZ!M9F$?US8cMt/H+Xi0-d`A;o!=e_0V%+Db5#cLthX83o.b<,n3=T;U&Sdq#
%7Y^SMMPZ9-_=*Sdg:tL&7W;3Z?>i:Y9T$RKMOG4n7-70]cl*]GhI`7O8-E*`"XeLuD-!*i*)F.H*!_gt=q*\Kd@4?R6E%hE5/H=R
%gH./8V28s!qPgI57Z$)Nr7$;=_8TaDUTP>KO[=Xk/^]oESA?kd7jBHF^t96QMqQf<a:),=T>4l^dN4Mqm(EfrdHG(eL=6X6/4hOl
%Q!1$3n=W*U$Hd6][C<.YQ;m^]Pb*he]KY08s3;&l*<4/Q,uk?$`;:\>#(#%!T!1Ou\L(&-_Ip%dGk)VV::GM,\4%A;UD\^Y*.X67
%TNg3"+9,C1pN6C>?+EgZU.=EYqcE3=*9+pPFH/c&]1%k+Vb%STcB&Gik^`F>c8J$#PdeGf;n+A!*2F6Z%YtGC*843$UdDV]:5k'a
%:*QCeqi$5)9RQRsb=W;jV,-m&%\()!(!EeKg1Pj4@]s'dV4.;0;^SkqOaQn?Zjs9e>BfHD"ND7XII4qCL+h&9>f!6I?dF.oHiKoq
%[/[[4b528[!P#eY=$M-S$@`>8CQigaRZ+Pml$6sW)'72[KtU'p<skND0_$U(Yt.glPH-?Dq#-tJ?q"Sp#rQ^oV1"I-Hfj)Dk__%;
%<,93e0Fpab7aP3<HIE[Joc=)KJFNg.dkKQk,(LPaUqQ:GNUTfACSb@"H>WIM#]Y6TY31!>WI"HEm(Ocr1q>>,Sr`cc2pV`C832og
%(1$cg0<]*"=+QY_I)5gF^_`LUqc%C8)8u.k5`LOPi):6HjKX7!Wr0E"WGd1B:B2_cp9IKE>?kn-Hh*L@s8H2);^r]TVJAkC^&Eu)
%eco)lX'$3"E]iIZS`pU`3(P,gZ1ql1K2ts?Y&3#=0Pp_N&3t0^,A>;hgc>A5[%/"&Y3+Jr:RUI($oL5_\/^o&IHI/*n!>e/F`5^9
%]pH[hp4P2SqOG3:QpIjX%m$tBA#R#R#6\YMIa`*MGP?L2^Rm)@*#_*Pm<%C#-;]ollSnR9#oP43!<qD+o:DrtP@oVHf;]qWN=ieO
%0S2ns?b:GZW!LT_'5pp1],P\^W*51!)Y^Z9Fj6/R3h,?@pfKJXraAiXg@4to(JkPmbMU7p0iUQ/SVh`,+8Dc)%E<?`:JgSZpag_3
%0nP:un5#8ETaY$*20hg]XIDNCo$;%Hc5>h\AUFA+3Bt>V&Jtu8l2%2X21o)Y0dHPO(hu1c%.+J+:Q;"KV6*bP#oTsbBTLGs-;]ol
%Ru)52B*,KoU8m7S.h!.kRYIJM)gbf0h#"K&eCo3E`jDpR&RSKSf?3,d<JCij_sa`3VuD'g$@oU.;!Y6W3+Z#%/_&g5djL9s7fo-n
%V@q9)_(Yqc!K=U:?_i^;k:'o>#A`r'EO2,mKR,Q7l:+T9h>lK/kgq(re6N4M+[fTWJ'EtH*jO&3eS<BB#kdJUIt45%>sR<'bEM#;
%M](#"F[J<)N1h:_eusD%m2ZX8!.t=04RZ!=OaIi#=q`]j-e)uY=#>J3$/Oam4:nl.GONFNc_aN'euk$k-;YeJe5Q5jUk&k\#iO1t
%rb$EG1i*Hjq>%1)$?aSS!cM[I:T0W&0lUgdmT-OU[Cb,fJItkQ5E2`P:ciJi1O2<Tm0ZLZ[b#+K$l+C,KMRo+ZR#sOL36>=p&\UI
%Q+K/1]#SS4:NkM%$W'&DgD[#[Y7GEP7-go`Qsu7C;"KPPWcIr4"/lep?Ta=(P,C.c@^o>3L_?Ys5UDA_&hk/Ain`K"#oniYaHhk9
%I$"g(V,&05C.o-q\[f0#XOe'66_=R_O"$[69Bon;HQL^ZpLCj;q'8dXf>kpHnW%kDa86^s40&;.-n1cDZ_<H%N]Q`0NK@c7><]JS
%S/B!^&#.1PTA[qbnq\JbqF478l\m'RUU#5I+U)tNqL4JdcEdq.Wos-N3U6A`(H6\ETT4@h8V*Oo$C%J&heh*6Bn\V6*aG'qD,HXr
%c^F]1X4]UgWQUcRT?6C0;<fW\&hn[$TWW]M;5:$WhY8LJmRmiioN\Flh-BjNaAZfm8P]krS$tr6m--6I]9+O58CJA7V/DK^P1e:g
%FhaMo14/j`4l+q4b>5N:HV@:4+0T+:f,lfuoCWT/p,#RQP-'\j;aP1MSrR\1,tqW`#O'A>F(4^IZVD=GSuZI!0Bo8'[6o#2FiX.=
%-dt#"g'c?RO/";eVhsTae^!ULh@s\J[,LT]&$`8P5aG0<Y'sRD7I0btnl3d9RG#Bb)aF6SH:j87HjoBtDs,-Da+I0]h4<MYib9jI
%I3BG]LqE%M!kkX2EBHB1S8<[nZDfP7.Z[h3A=^#;-F6+3cdA6XfZ[^&?KG)0npRok<PG['7aXB!=t3"RV,B$k'LK!/:5%5*2@%SK
%Q2m.7@kd5M*u-pY&prhg13enKB^@!-nfp6fDN=*-`+NG$-,Xmhf&,crd8XAO+CchS:pFneNUcHp,,2)tm%La!"nu%a9tYC_meXrC
%:ufe^F/Wm)?;.C--im8sX5^Yr<2;@CohX:R:gZni@TC)WaXFaTgY,htU%6ZKBIZ;Z2&MA2]cZ^!:hp.JL=ZJ^<+4X"aFO*^$QV*Y
%MJ:?=.^D$r?1DS2<KK/>TiFBI800O`:pF_C$5MobSjF5iG;nC>bb:n0cgT)OJs'RGQ)O!43p8"E@jK*akIR?mc\;Vupldu2=jqBs
%N4S55UFP;ba3Mg2)n6k1NN`oT32uU!0hVFBSKi44s%j?j?MgIQ'goiN7-)L35>R'<l*,8T&B@7:1^&<V6ogfF66iGh6K*s[DetE,
%FX?\6AR<KR!<-D9Et_ng88gB:RK2;?C/GkMb:5+j!^+[5%'Xp25[UuYKhM<G/8O6shb0KUW:3.lK6`p:'Ra"=HG?a7>f%juJfnM7
%Ls0#i"/<\r$AV7'",DoMF(K_bPaS9VXICLN0kjRr&geCqV8Tj<GH#&icQ+,L?\BJ0e(q6`%3I3sOIjTi8j1+Z$`/hn0SW-u5-Z.r
%_P-/I@e3MfSm+NbdRZ#FL9c#bFE/bi&msc8YnNG(&r!\MfiugNXZ8,40:B<](^K\%^!^[j],>.5H=D4.fXIVVa"qCad\'o(2YQoD
%F.qf"a+]u@M$ej]InXQ/8#-2,W@;d72-RtQJm5OYhe7<o__\&'aj%Z'*a]'B@99Q3qC7Obg?GTtj2TQ3=@NLcbL&i#et']L;tWrD
%\]D@)kK&?m7(;k;_;0rF9CTTn225`68ab1Gl'F-L5?B7NqKZl1-.3agO;X#/6nL)p@reanD.s]0'r@VO.`[jp%0G!6'\n3qOPLU0
%]8d13,S;jfNsogi9MO%;UT-S*WbPI.5^K/oJ0!dq6*E/P:\7#TgKOiBeU[m`[cW%7"J18mp(T3SNHUS4RMV"f*SP7-i?C+NGe`nS
%JpOBXLT7Ak`;o&I\66t_KhU5j]p>B'-J^dGf4\gf#V2%7*gZSfDHK*O]X?*Bj[,Cn!`U66lY^GaWO1BTJLW+0E(srLZ67Lb.`[1s
%X3p;DJ)+;-_TYKQ=6Tqb1ZPgZf3Th4g*YK\8'PM#pR+D/Ak?a/ZSnpi8PaU7*=*=3da&@qD.DDI,#AcENNVG\$kX>808aPSY*Z:c
%W9T#Id8ZqZ)qVKs"cR$16q<ShD6NrB]@A(L7cAF;c.?diIW\31E&ZB>'0K]tcXsWcV6Op+in^pi5:RS>AP1OQDXUfc\[?*%Zg4j,
%;n(n'9'oi`5_r_B>[,bNXMYt#OW/@&BMN8[F`q9Xk]eNZ=`OmQ:U<>`/*bdE@*oo<%cMT0>$@srIL<cnD[^?:%6q(3M5YP`A!giS
%,.'ba!#.s[Z6-D[`\M><5ID&P7`JpCcC<Zi]#QNC8HEhX/D1PoRe(NLpd)OO*.mDR0[OX-VB_]P:1?1[E1:BD7#L2KfIVH?B'Tq/
%!N>:l$J3,BX?[p74q=*h!p^oQ6@MW>-)A(@]UebhU0J=s@%uoK!p(<5?2UWRh*\CPSu1u%B;UsYN\$pYj-L?H#Y(L\I$m]PPF4&B
%5T/S)j^_HO90Lb!U0(>gp>M]kZC@5$[_=/5,J1DHaI-N%F;Q'&R"?eXY2Ht%d-l$4nL3$M$nNF0U*)`"U]!i3</-0EmcNfQW,m3"
%CjdHn9/9l(JrUBg(H=fjDT5=n8LnA;Sm,..SpmUJkA"MUM3CI`DZD^&GO?(Whp.q^gT`!eF^pbk>0Y?()`*JBc/u/f'uEi49JP/+
%9u^U^jOD3s07"Lt<plF5[%rM#LQ708N&7qU1j8WIC!!l+C:Uk4]ZFIJ"W&G."[PqEZi\Y3NNFH"m(#nD#[,CjJ`AA"`nds&Fj)Fr
%Q;.K6^^:W^e<5mV!X?0>=*"C.C<:*@QU$=l1gMork=;2srJF$LoVmN3"WVd/f9MZ/f`\t"FMGD\;snF\TlN$57KV;S[npqo9C$!B
%3:P@jg.Z.Q$P!W0LL/Pk%jMl!BNGNWX_?I'F"jFn<"rM-^Qb23;ADX%CCr.4HWc/?M_6DY"_ONQW!@s$:%[jgRH4`T<WoC=<T46%
%-E\8t=Xc2HAoEU4=ijQe3?2usAD/;\)X`@JASopY+iqN,]st[\L:bQ:%4Retj)1eF20Vt'=h%ai6FAi8DH7)Y34.A8-SMReDm+a#
%BEBY7.F#:F)g5[rMdT-:MO\VuqrYhUCk'i9MnP0=HQk$j4^hrT(:%+B.L)^1a-a`eU!d5"3&4pbJ5N\UN>Y+XC^.e&6rs[X3&$=W
%F/ZA"h-c8DQC\Jf$)?3*3NaQ4^^8K'E=brT`,RV=T[oX#)Vn0=Cclb'J15PO@p>(Xibr"Yb&aVcBSiYp74hnj4'9S5XiNe%'3Qlp
%SWC9=f1p3`I%")"[b#7;XaFrg*BUKNb_;h/.(m/tL%bO[(^H`h$6@;[<1B<LD^6;S4h"7WHgP0!Y4Pn,-"=!iG-W$kL+6A!)G+BI
%<O?je'!B4#Z_rkmZ`f0CP)n22d?N>2CCsY=d98LrDdKc$YYIAo""oQA1Z=-nnh?:*!]H`TEbL4W5KX2S9ie>_.hF2V9X?$-A4sF6
%K$DjPE,BLT\^_sDnHb)KH1$3>B*1^UUq(Kb_LUK&d6BM3YWAQKcI1nC.ejO`M,piU?*bM!Tc,Z)'^qJ&NL5l]0qA-7:!L2FQ'`1N
%j+MPND029k$As&r^',mPJSXJW'X]ZeS47!S<=,_2E>?M)[@,LL>A":ACp%Wcd5sZ1"Pn/:kt>bIRJ*2N-4ii9\Q&i.g;[LZ2OSoU
%'k@?Hdfa"kjn*eQ*IFe<6`LpA!U&k;T=rh\2sjXk]f3,o1E6/QlIC=cih9G;c=`]k#JF833hLOI*s/d;F?]"q5*%%5ET)"'lWcUV
%Ai8h#f"$0]TN@6#B:[6/_7PZ-+J$gY.VG$X\6q@iFY9;AUb49lc=`]kkE1r+Q;$JJcK17U^6_RW1KaCAW$uSgF?XgI[!<u2p)g4L
%MsV3Bo/s61lS]%hg/53C@`;-_VOG+P/>9.N"^!bRp7\QgN1"5s`!sKApiW'k_M>GN+ls2617gT4Bg2Ai2O.-OPn.ODnn5[7BMk7)
%PaB+>`Yg9:P5$$k;!7%G'_/aS,(5r6N"m_bZ?(+jZtZ8^Tj?aJ\RIWG9(fa#[)3J5s(l;IXGX&U%RWo>$SLqjQF&-pD/&_[lJ/-Y
%Y1+Yca#<>17=9rk?NAOBgj#8^\l=\N1o'EcmMs34#UEf/)bk;5@TJ@WcqY7nS-4*(GF5X)Xmk7Z58tuV1]Gp5k-iPLa*FlU[FUfF
%?tba1NB)+21o&L4UCH"EN0T%JM5*f4CBPqCXS/UB!&53_aN+uSEos)kR3(N>+"]X^dkTY='L'j6-G3IOfp]"(RHEBl7$kd2AY(-e
%R3pl@e8.X;pGK"mqm-Z_KMfp_6G(<ck;e6cRPFHu1@e`3'Pb:P().pI_-,9"PMtPp@8^PCWm,JhI^*eEDe%_&2Y4>;7?D,FA`+28
%lnYuJrP`<R9[t3&,i-NgIE.J=>M$HD%?d%<BlBKPB?)r)f@K6\p)osiZn8J1X)%&fe!O>Ep>@L"S`ckr[HtHSeZn59%\mPgF]a6h
%M(9%E)-ZB)p@P,UM]f1g(02sp2:JosmCY=9!k&qcm"d@gW`pb8)9Y)TI0R9Y#gX:JNMQYfPsQ$1o@cmoVs2r0K6<55dn?fORc\3^
%>UAS=Q0P#fY+?:2A=f*`$Vjl-:]!+*Req,pe6WVh<&pPZRLghuV0s>no*&9-YULSY!`-/pPUqrl-alSd)lmS]o%k4mM56<-B!$lh
%9Y<;*7C&Oq<4VVWB[%rJ;"WU<lb.kVW!0jn>"T_T0($>\2mRuDNMWOc2@cjH6W`+`_3naJ/3#asg3\H5(CsW$N&].=ZhN=$D"iLt
%q/FN'Df@6tk%j4+j?m_ONCU6PT5Ca(\bF)r4%QL,!.p^f#h]Gh`+2;?@2)Islr%=6.FL^U0c(0NN`3r6!p>Ln#Esrr2Kt^4ONcut
%gTr+EV/%);m&4tk#?2'%`emTR<jD&F"Rg):\au6L'L,6N/#sY5.=P#I>4"WjO"C6O[`PV>4?pO6e;0dBo)(>Lnq^`N[0s;(SfpP$
%+sEL/9eMTsB4S,13o,ZLo,NEhY9GdK)5SpUR3r3VC6J0('0>9DH#A7C(X1+PRCFM&Dq18$)Z.NcQFc,#4PN[_;$gM\1XDi;?8]t@
%=["W;)0p_nOKgC!R:eB8/'Q3n?7C!)/l]G#Y9NKYjIK$C\l8X0+?^`b&dP+sW%)Bo>QEa\d_VZE<]/5->[FU#a2#+<fTLd&MUWu]
%<A!>s)dLe=>6*SbE"KSE.Z^VACSM?!bp2ZtKifQOI=GH_+"NBuEu]M%,ZuMdZ+9(1[q]:5X5@fU([%L=r\)8S:GWH6p,b#Xm8WbA
%-<alpr'd@tW!*hXXnKVOCuXH3SBj\5Z$*I:q06Bp*-FFaLPe=!XlFY98:d[AKhS-\l2m:0Sf>#jA!J=o?FqoIT@kY'Dc`AQHb7]O
%g"R5faZb0U+A%l*Ml\6s(0.`1,[%'Zq'9+AAL0pRO@ElndC$&CRq:#^-AocCY]fP0(hq_"f])SqZ,JBV##d8rP*bnp8U5Wep+8j]
%;E0`.J\PGfSp#FgphraH>LN4eRZo2QSgI-I77hd!q`u;(ZI5O2$&j%kj@(Z1cI@Y?a^GLuoNGn\=6c.\bMDW`,s7)"^JAXWaiTF$
%!bl#q-)AL"cVW.c]3;PFB%,7ITkq7piR)TDTcR$#&\M.k+9Q*Y'!Mq"p0$"92JMk@<sDg;$$VZBq'+[J_uQJ$o_6/?7LDn?a2bk<
%:$NQ*?>oYJO*52D\9r9(#HqLO_<Y1:mAiPd4uK!<aVQsP-)fJPB1`_1HfImJ,";Nr3p.!=n1<#U)DOj@BiP5ieA!_=*\j]j]*i^=
%/j<!nrSkX`X0fM%Lac;N'"J<JI&+8%4\M8fpM?+<k=_10Kp0S(W)ujEj>NGS_!Uui/<5uWcX/)nlB;,8!SoM=m5]mrg[0i#!aO4>
%#e`19\9`8=IT6!>DP$4(q&-g/QpGRn-i;GmXD)nSl.b1..9,3bHLfbu_dU`!^U<@CQ=af=hF92Hr(0QhSG+"g4'Ul)&]A9Mf?X);
%%a+>5f&rnsQpRuf\"0UsMN\mj*Y)kr10-SO]D,\WjgMEOe>tFiG"?\D>U0^A`n&)X:M&m#0gF,;YMG,j-DJ[G\]FK#)V+\P\T`#O
%j7Ni71tMs,YMaXgUZ$:U[VPZi(/3$'3f"m#p8>$k@L"L1Fpi"aoi7QaBA,_6_mAk!%U-.%U$0/@mfp7?<ii&P<h(Ajgun$IhGCDr
%nOH*J;Yiro:Z^%BKr[c21WnueaCf"RfOn_@&0\a8`'0sAGoZ6bj!(bSaCl0QbpjD(bT\33SChJ>:q"6Z4r\_?WY52fZMH\d2`%^5
%lncfL>>Rjp-2&4Yo8j]JPpZ2BN,+]/=_V?;eLKto'Dm`UXYOBt7>ZGqp?5[BYtp!CSCM8W]XhccT94*`Lkc;?0!Wa$9tE<RjV.OP
%0pHsu1d)Z*>kNr%7UtWo2D\KE@\6LtWl<uJ,k`*eopKEn/=tM'*7>fSp,PInnqhca=a^Z$brW,U.'(Zb:KoTZcU]E`.^pp#lncfL
%e+a)IOk=<RfV5T5=-_ENPgsD^ijqqP1E(%uKp>(>qfJT4],BAG)u#2;<jnnT7bfBb).iJT(;3b2fOr\[O*9\31OU",[CD2Eo<akN
%<0oc_.,4#--AcK+/2\DX@==*4e*JS8^1!gX/:!,F,F)d7;uC0*3Dhf,U!!';i,-a72s.&b[nYD^V$!GZ_f:3MBD+A+53(,h/->aO
%Nngs&X&n%&PE6AiQHd?khBlce\mdQ5W(OX/2Pqf7]92oJWD06WXi[@LCf3*P\0((_s'$gq:)Q%">`OO:iI<=1L\230F82BEb@,Di
%TCXm.PJdE*`^;D*pn--nD1)>T/#S]\iI;4q+l+7>kJ8)ofq&/P8A:>2KnOe_HiDos&L9n@X=M.#(/7I_>%N`7jCmd@aecC&eA%id
%M2k9i4$;dAQu-p@1_G`U7<cYb0:eATA/&`o)usJqCnF:0Ln"#rHt&^B!1gG=28Du0)*p>XBaX(KBh/RF-(d"PQGUsInpsm"8Ud(E
%83CX%gh*`L(SOm^,$7R<(#GEfGtLF`G7nKK,S>+n,</7HU+0qN!Y-`$-j,<f[]IR;<&CVo6OqaN1t,d_-Bh.:4jFP@f4Oo/Duj7Q
%mg!L?)W`s;"kDc!Ht9YAB,3mqC>3pMfG)3H'UtF64>u?6:)Y%?Q73M,@suEVp=ZNXo7E,X*bE1+R-U"YmWcFV_]>rB'T/`s^s1N2
%Epp8)`!e5r@q]V^%Nfgjd42RZ+;MFNiEIBZ64W<;O%+.+(5jN#I^.O"(573$2CJ@sM!h5ij20)gGN\sn8#?P^s"-2P%C5J(2BU2i
%rH"a606-EP8"5=64o0)Ze0"Y"Ig_[Sma(hf'5Q%DInTN/kHf/P=J*#[b71jiB&bT"GG0*X*,j_@Hi.%o^J*X$8F*V(QZo%g9<W&(
%9/T#IbP%da*1nnQYrEaCiLFtNpL0PI8X.t0<+P1iEY?cR.p=pe=2E@)7E]?@hV.@6k;)p@(U[asMBJL^QFTukW#`t2]!do<=uVg_
%S.4bs`I)cq89H<P`c3Vr2)Z&rNhNr.UYL(?@H\3Np?j&O?=DZ"FjM\+b.m]8@!Xk)Uq.eb:?T/eeg[#aG.t6KBd0@YJ`q]B</0fG
%e1:t`h7^h\R0qA@XYb3uX0LTMia$IT:![B<q*8:F%-<\@K#_QNH]-+T"aAKP*#hl3WXcr59^u#`okK^ic))1L3EqJ`FF`:TbP=H'
%VQ3ShSA(7/L5FVp\]]fh]N]Y"mjCk"L&con3/2^ro?;#<8/OJ51a1E=$8-U2W#ImQ'Z1R/1Q8W[R13m*[PY*"5,iS`paNn5ZQ&!G
%G0SEVCJ6WrS=-ju[Uknqa3S+eLA?@M1ibDno6.:t&F-%Te>EeVZdnKGZ4K66NI@Qn7!q/21kiM0+1Aam:jYYlE^\dB/@=E5U:]\1
%\`rrPB9nsPY4$jW%&L[Q1@p)C+&L).eE?l!=WPDHU!0eRPNs/(6fqMR'lsDL],'XlCXm.S*,7)'EaoI,cNR58$:gF@,qs';p"40i
%Q(MCOq_V-koFqrNo1tK!e^/=S&O-1>$q@ICh]"U*pH0OX<6W@XBQF(;\T2n+>@lf"TKYY\6Aj&u5upKE1J1p@#n1snZo[BpAX4V;
%XJ7S:#.q^/dR/:+a"EH`h&?9mZB]U\8/A,oR71tl/87V0SiI8T<3;FB*[ho^B^i%QHO)W3K$1IK8J)09@,TU'g%GOc7DP`WWZ24\
%3D,@e2Dr;*V8jHAJgtjCQW3&r#0\Q3#^U/'#k+jMG[\Qk(mma]berP,HCD1Q7.W!Vgs2B0o.X@A3Vk^?[/mGdgs[JhKXM4\ULLg\
%Xt.h81H\mg(M83)b2\J(LlKkPnB,L3M40S"(&66-X4[%Sne'8+<ibMDF=HQeb<l]X/g\nW$W76*L`SL#CN``Q`A@eC\N`e/MF-VF
%LH<YGBs6>IRs&q.Q?7mfF#"RBZLlme-aZl5O3<No&AB\RrXTeIK(IjAc):*II&8:FF*4iR8])cZS`e[olZ8)0Z;B^1g'-It5&G8A
%2;"6eJa/V@`?>%s'o=[-H$8=S0fW"[<=4u99Bm]S;*0N$<Ct+,"WZ]kg7J/9*()K"b_M=i9bh\:&\'brS"1GWR(dg?'NurgdsZ(N
%#i?D3[b4'OOLD1f;4oCk(!sp^As!t/b@4L*(;!@6FK.7ano*<[,T9?P_gFl.oQ6F_kVOC/@s"<Lo9;Y@q1oCB\O]>e;^9J-D9Z3U
%U=4KX;hNn/8tsd^7$Hg>V^[Hto+=-oR9la-EHBL"IX+rL-!-L-k4shcOu?*-4M*N>QeTCb4j+gCkPVPNO7gn/X#d>D#QbtEZ2A$a
%ZJ3YJs&eWl6:7?QqSNZ*0%Fl&XAJ;mqmOBLjc#IC4fhHrH2g$_'jAN`5dNH;Z(nU29q#S$X-IYXTfNU"M$"9j:HMf0g<Sot6Yfc2
%a*^r=G6]0mZ)loXB*GnNi<'UWO+D=ni1^+P<\$3"d/(+:d@%<4JVPlK4]dl&@;sqo.7(R/n5*q]nS*b^_dhX-&$7:t^]V!sJVPQY
%A\r/:`W7b$*-c/Q3KO.7T$@g.Zq^VnXQK!c2"7$cBnmc*8;cL=4EM>I]C^Z0@WJ9L'3H,h\(#taf$d`<7VPeo>TA!%/bohJZpbHe
%1eR\/I2[^[Z2B0.%b:oUKP&mXGj$uLAB=oa`T0SMdgdZXb8tnA?&R!rZKQjp#.5kfN7CF?/U63IBeATp`KraWd!@iEiI4ns^dDmA
%:5J=ErkLm4_jhe3[(q6Jf'>FrjSc@h*a4>D'-2B&#9I%qUFDNRQ;"jIXA1iVCRn*<Gj(G$/9p*HokB2Q?^<[Ld.r,8i^1@N7E_N4
%Lp]?oXWWnig,.nX?6An=,1=o&#9I'hd#(@uqS5JaSOYMka5R=FWY<.S);?3<dZX29.+Nm(:3kQV#9I'l5S$&SD?U7d=tBLl=6C8M
%ZN$!E3JGZ&8&NdcNQ%@@!tVMo.)]<("g`2mi1Y:\!O:3VE8[G_Bnn4sBt"S:+$%DOaTE'UPojl8_nlX"C(RO>%:7+;BQW1+FY+r@
%;=4rW1p7'bZ%IuMB*TJ1):<#7i8Fa:qQ^?@aTE'U:HMO+=mj'mGs3.;G,XJ99-&8U&O`'1.YVoTgjt73f"DE).ndP'STa5Jf;V5C
%Eb2\WdfU,_:HKinAn?g#Au?Z,mY@VL4;@D!N))N7qU:`knBc\7KH1A5G6]0m@hZf78e*rtO_0!pU!<tTk^eKsCGtSj4LEDk"A2n?
%JVVfJ]#qP.V%,VpQ5-\u<@]]3R9k*tAeq[=&/0fQZDo`#lLd1Wds?\p4UZ^W*UbZ;,<Y@(Uo(/K`oVmYW)8]qJ81W51f>Luk9ifG
%=RELn8To34[0^c[\.[-V?hErpg$W:":>]A5rr'5[/co0]p!?^6c20C@6X)bD)Ys<Woljbbn"UHJg&K3JG'>R-Tr\1UR&X+L@T;G6
%Op+IY*h=+GlF;=;e]or_lM0;E73)nGhl*j^pJ,"cYSl`kTRT=7:Z#NY)eq:(DP$Ube8=7n5i%4!K@Eh4m>Q@?^3c\[([R*,@IO-D
%b=UW^kP7`/T0A9Z&/]jkO)F`<.ik#R;d5nB>g+>@e0!rLl=]e=b\R4?l2Jr:]sW.;fLYH>MOTUKg>UW[kN:K%-?^;0+*9FPigHpT
%cGs49G?[a5oZb:;pur/-'*O%8i"`7n=.@\Df0d"d@mbD`N6Ul,2.AV#"P7-jUtCVV%`lSfUH=*E;8sDA(.K4Y=#Q'm1B4(TG+XCL
%Ii8XPmMbgW*kVmJZMlsd/KPY+l>--UWh#[jVsD[N%OBO""G$AVQ-`k6oE"7ZeWp_$,gWI49r`on5GVb$>ZdbSWMbmD.)VCe;"i<e
%3`f9%^T0cBCo_[Ur'9`6E`&W]pbOY^p=D@j6i/AcODK%L*1@07F53Ft9CtuYhi?+2fN*IafZ.L'="DKd)L]2ed,DICI55_Y^9Ca9
%`BMnJpiUa)1Rq<A+<&.)JaEVo:ES@MHD;N,#F3%"^I%EI,^di@,4IH6Hp*LR$?2roF`pgMIXYk,=Q4i\%*-E;_U7c<':S*jN6p)Q
%<)A%:m)/g/8F`@d;;)[*PToZ#/Cs6mF5jNYR/@BW>&OT7_&4gfGXd=j3M9ih]l!S:&p15i<]gB/#`SQF+:<SU&<^1W+]Qj8OEm:D
%bgD%N)Ll=>f08i7Od@S:@@[tcX+m=h2U\Y:,3BZVm*^\o*iBUj3TDij29oY2+cKt`qKe.eh'N4<CHSi+PKQ`;]mbZi@"!5>Sq[f0
%k`CZZO(I+ZLgXQ9kU5gDj]HkR/,M6q?R%8Th+IT4_&!F0XPKEtX]Ehk'rC8:7c]K=.ZN^,ed-)l'Nlfd13f0Mc_P@,]Uuec+7t4"
%3DmQZBT\7WQr#fU3NiYP#7!qAd"6?CJ]O;I\CCDaP/o[s&\q9]iAEJZ?a!r@ologP\oW617%YN6U?9HVccgk#J3i5GBsZfs?CWP^
%YD7i%rOfpG7^/[X?ghI@l^n]PputqY\IOdea882E5'sBj_6]2><Em:p,Ne+KCK'ZGk:h`q#?sm.koK1Ppf_u><mQYUoQj^"Xs%$M
%$!>V%q*I47U>(]cc0h;=e1Om]!0Wa5;fn#E#LKA,/Ult>E`"*?02N0l+)tS-'!n(mG&VpYFV@n>WP4m=B!Co<[p%5pF]]"t#d\eK
%L+5-+oto)s[;I4gL%XNeXE+8Fm@V7N05n<58%J9i-$jZTkC`^:EbE9\d:b$5@5.DDKUnf.;$c(d-!4?,0+(/%?bjdP4@3BpO:[5B
%YH=3`G]f0S526)=Q5C6:,+Q?H@#<-J'Iri5rk.\+O"0@C@D"Z51*^uR@f<oAP^'5)iG8d8]nfNc%b9=u9$8Z"mcO.41UQZ0)M(KM
%3rY!#)mN/Cd77WhQU)XFhAjL$ql-'2l/f7ue$@8/MFquN_!,f+b>XA&'u,n;nS`((_<JDX_]VNN-_uG5-FjB%Zsb"I3$U2f4qO+@
%?u8l>l]EY+FXScDk:V:KSSr;VeAN2c%CQ/JM1"YA"F0=a"GKp>n#;,$g%%Q]Z$rHlMMamtBiM$)LBH(4XEDZ;f9d)K$N,$G_/kGo
%]^&D\<kj,Xf;$'S8(r90Y8J^$1"KufDOE)D:tJ]('iI?[jn/3UNHmB/#,RE6K26SYK0$etGYa)B_^\m7C_`>(gS[NBhs?UKe=ih6
%T(:FM$3o+erdJu#klQ3-*auM\-[!q1mu"UbKH%?8ldr9MfttjPb<Z;"&.J$\_C]5p0=Uma^eGg-k+[ge8UgsY1rc&:bp0isd2_C5
%jIm*.W.H-7pRt>&2Y5\5!`=NSWT,jT[n#'AokQZTBVrcC:`U@:dmh.F4:9m2;MUmXA#LWk[-G>pGo\))gU#jQiUR04Mo>Ok^<h9.
%_@h6i6+dQf`ZN'g+P?rGe;^'r_G%Au$Z6cuE9@))0A%B5q]_g,7sIYBShW7B$C*CQ+#;1;ao30p%NSYO#Ak\P>!rNQdM+RPiUSot
%HO&*Pm)iCT8Y3Us>N,F)iTtFU\8YH.Dj4VTV\dtqReiWRAZE4".eESprOR/-85P/"Ws#MZ=rnF))Yp:G3K\P8>jZnAap/I!_ntLt
%Ya41k<MP_*on=8F[^9N4Rj0!EoZOb\@^0(.[@iq*CHK<&ptdJj04+G%le\RMh-hitV*7839Y#M9;j3._I^mC(#e7i#g")ti=T+Di
%ruF"A29V?_eL`t7j1kK6O6_0l#*$FNTGp/&"l<<e%.ni@F__$c<0f,$4-fM4\)eCqNu?D$s#s&uA^?&n@hd,k<;QB$5R<2Oq%VS6
%-:G,#<iMMQdn6Qgs'E4H\`J%F%0)1\l?c<TeLuq5mC#5_\aQZ6j%5*CV!!?PnM]3fa'';2kmllO&MABI1!]Ns>MBmsmUEJk:Xf1E
%]8jZdmJSg$L;:=a]g:6fVV%[T,UK.`>V+Lg&K%`P2,C&riNL?TiMiOB[2iYQB0Q@VH354Y!@Q\'Ap`d#'\IiDoR,V]]=KZ:o<8qf
%$i=9.d)hal:4!H/,;;U9IMn/u:ga%BO1o'V#l[7+%g%]LUM2q&0>lra(^GIqRa5D8g:#=>*Cf+5ZVd#oA'oP7kViR&*Q0HIBjb`d
%UH&Q^&^,3?#BPp8m?Zf'%`Gqg8lJ?*pRkr2^-e0*,1`&WAW1V'%!Dm>G2?XPE`4Tl/3hR[o*[)Nh%V@JQ_H;=/Iib+$aLU''Tr@J
%Sf-:="FY3flr2pi"+"-6REVGLDR&tW\pfOOAh*%*;bP@!bK=\lni._\jc0]@KT@cL*L8@:'rDI0]&="rS:08)59B4D"ugaeW5o(+
%O%h"jfK#W\ENsE_@M;)\lk9$>X0t@)W9g-JY%NeKo%=B%07F*,kEU@g:ZoJ"YsS7ofUl3f"1fnjRH*DC3!du30H/Lr$1."sBfbZ%
%oV>G9IelQqj_2e$2-$hB_Ochr!o+b[Pno%aF0nen/D"W`T4jVF0/o=/5h0N`mZf8@gF]*s3p#cTg<PgCGH+U[+^>;'=VU$oHbGqO
%F/)!g9%IS3CTri$[8eUiet<%XDTrFhd!!WVV$;9p5?iFn'TKT8$Q8UFRo/VG3KQ1g-EKtb=;gH2<iVj\EF0[&@l<6nGVr5+[F4iq
%n8"k0P[]^cBq?*W'+.u3L$nbN[@@UN%L_7c2-$6Whf"Y(Gra-a?;5Smr);cp-V*'ibNlieV4?;CYgodZWqfrkAl2S/]N83A?+E\q
%9\q<,H=I%Kfrmo5LM.$\Sf^6031%(n/rX_42m,Ri('M'o[cfE`'oX@$J[ON-M!J<n8;f$JZCqkQ!i7Ilk\ll01qJ$lPj9\X^N90q
%@FTE44(t^#/YcH_-5cmFHJfU4FQ.jTghl0b1bkbqca*d&)<#9[ALnTZD$`gUe7"cnSB\ADHO]Pcbrf47lO$7*1s[.91)uP-rh<qK
%n'Prc7*q:m"]+SCi!I@!lPID'G=oRR[u61unlWF*0B+_]"HVJ,'Om=[iG6s[gc`pY_Dff*lmr;.T\<b_KX9$1gEU47;FeE_U'Ia/
%/,!X9FJcQSS5Du]@ugHBQF*;n'5MH]*Y"mIj5*nK%p*7OJ`h22pZ6Fe>B^H%QFcc6rj5+!Gr"S0r+U$ST:!,HQH$C[DTtm<Ps=YW
%D/k&/OpsmTV5M6')>a3`E+R309m8lolXkP4@f*ELFoCjsBX6Yo,W[d7+[T7=d)i74:1mh*gA2e*<ssZSLBB_q5G;7I<P2#4G<Zj0
%EnXm*KnR3*;!Rp!JhG7q_I_\)KZ`-0"$)86A>TNDNqRP#dX189ZZE"bPO/`Z"J:Em^2`Ls7$!ILDHdR>W#X\TqKV5C<S[$^I6@-G
%Zh_>_a28>/7,L*&cBjBR)LXa?@c5o5NP>"L_PK_/%"S09dDnVXhu_dmqMpeEX3h^tJ&XchLqo^$ZU7-4&hI0oHpc%M1HbPV.A?<0
%PrN)LOUd$*hHoP9(>KV5QAEYen@d*AC&)"=X5ZLhG2`jPF-gnNd$o[.E)^,`]3q$5L=3Kp3%^;@Z*)I0[dKPN7K;m$:R0`l\Unn>
%"Z1AG<HZg#lH5?Hpa%p7$HImUp;<d:m,3CB,$YYpVl4\j-JbFNd__=^J/mK=A2G$WhJ6^>mc!m%Y4"f!7[?Ramt&d(`?Q;.GRZg/
%URJ7mga0$e`IgsDr/][)iIs,#iCL,q\sS=pIB'(P4J[4<MSZ'LGdLEJ.D#4mNMe-a(CbC>KGF4T?m,1t:_4>taT<]H9q?\>-Y"lP
%>+T)pSaP/;Un"O.-\P&^fN'-RJS.%ciIirh3(qG>J9.lb76IMEC3tee8_GiE8gH*/k7SEqPt40bd6u_TA@)deg:O7"&%FXd_gkM*
%878$dSZ!1$E#RFDTen-ALs!%(pd'TVJM/o'*"W3,$M/>$`90<%&&.i2@8"JTSHUat)FFgnO%.VE:mtr9QQtfWCb*"5':7u>Fl;<:
%8Hn8*65UZJ3Zc&%Cda1_:=$oEkY*"="BQ_'216K)6ZSTT]IW2<5alK:)YdRb-M0dJX):DpkIIUEk#bQ5KJ_k74AM2S2N="/_f@d^
%N=Kl+!VAi]a1YIngsgL8[Pnm8j@Wch[1dSqn\-8_2*U3#'mSfh7I*"S5'q+7b<VfTn7uJRc(SAI<Bk2@<N=QD6pXO9H`?:/?'U]1
%Ch]leR*r)4ea+j&J2EMAj9u@63Oq*+%B0IM`/a#0o5dbYOX[CmRP3>+hOFU,V6oB4D4*k$9"SG;\!qQboMMd/kJ):D*<=jYfJ"F6
%hH1qr_gO,iLj*/SU_ar3cKE[X=]c'rc=jX/',)nkRP-4f_'l>hM!k&,%:g/mgOY.I3!=!R5q)F]/>J_,kMkKS@k!BGB,sW7`eDG!
%_R5q'G,pW#"20m[)5iC`Cj5NqWNuc93B8.'3]8nh"^=-@[+Y@Z1j0sc.@E$oHT4IT6oCjo$roXZ6oBC1P\A0F:2kfa`jB.^gW<qZ
%SS>AWOcZ7BfrHAc&^Z;,CaPOmmms%'@Udp@i+c'^SI_5E.X9LqJLK9'eLP":SVSce8?nR8jcO;a8"8+p_G,'aQRrrT[ru)>_1"3i
%>ST`;311SWL5HMrcQo,?fY-U/H0A=L7G;W>Qg0G=DFrtM;a)kNhVGXqZ(&3:qK0FtR-B27?c8H,W&_6$E0I!7oh%S:gd&E@XT\74
%4>UrX#gQV4L]ANpbf`bBL$VRe3V=jOOT=oI`7CiuU$E_*8pDBb'74c5Khpk9gNTM45%Or*8_u6MB_SLPoA6Bu_lscaofXFUgSfYS
%qZC$GaG68d"qRg[4\`3/M]._(l47=tQJ/H/6(2=I,]+u\.8@LV5V,4]PhV9L,@0YTiOneZ5!&1=+sPpFoDJSoVjn-#?Bn1Va!Z/,
%OPtiZ@[&tLbAgcU-?t!PVk3tR\&.6SUL1S#2(66`/`\,5hS([>oB3cJrb@TXNdG9$5#-*gGZ'f#MRWXXB%8GP-mQ=1dp9@N?od6\
%GRl#Rh>]$@0I]Nf*U75=6boR<@aO@VQ1(dJ!K[(.4CJ@G">I\&<mhlY=-O<i-hjh)VhNW!0-F[$rmE1Vh`m40EH'Y5IbEN$UaW+u
%+,:U+--bm`6j[0MO6%M[e6Y3C_mm!m19%nkT:U2J:,)#C'iNTD*AWH:nM%tq<3EMd_]+dco/(m96V?Ks4QDD^N52N@`Z%Wrfm1?<
%)/h@f`MEk"UD?d,'/EV9&CeRcI!t[J9\Q"QE+rZ/(G6YB9gRVIL*6mggi4["pd*C?f\]RS9/DY\?"])#8<2N[X]LWUR-&Cs25)l,
%hVAmcn5c+?_7Y_B9_"^V.jCgI(H3_[^TDsHWAj"ERq)P>X]fG"3h4J^TQe<c'76ZNgOnHJVq0MFhKF_c#;/7Q?o6<*cf6cZI`S<U
%m[8k>b].%4ZQ<0CU56!/,Rr9EEDW]BX,9:iS4Crc_c#5+`!U\Re.Fj&X$PY%6X8knb"'pglX:+Jo$`Dp^Z'>o=^nAJc8/+Kkqg7o
%4$5$1;Vb=@D("Hp@l]FV<qqQH,9$l5_RcN\LIbu(7X)TE8[7d>RBV)QW!a`00a,/`R?4)V;o(u7B_(Z1P@9Jt^&FrrqDN.OELj!;
%5OZr1SmG^@qVd&Vdi'2jKj`X=:"D<SEo)Vc^TQrKFG,g5m9\u>E9Xrc<K=\p?+QX%QeALqVc2#%Y2+u98TmUkm-Rh=lN2fhDd`A<
%!`_mRg$M+XQJr'iDpf<J2h?J!2#sIY%8*j?`u$EB`>%YBE"G%_21h<HqIK^r;^Sn(P5l?PNsCmgAdAb,7(6$Zl@IZJ;Mb).`VKL#
%ZqO=E%i<jXPCn/ErV2EAhhEa.T6T`hhVZITOd3m(+e%,+1nn6:%'+J0Am<Y^Ki6=4-u/$i^u@p:#B4r%]aj?<$d)/R&^&bBQ-2j(
%@!\W^L;#rcb1Q=lBr)S#dfc0,k56?:/Mgsh.Jdkp7:s[D'B[QKa\5i+<m2NW>4N^$<!*.nqd,`o@hXFhAt&m4;j<lS[5i?]'S?1U
%E,PQo.=&MFVFNh;B%bG0XKY:g1md:f*h,LW]`i]DK'BD6/ND/Ickpc'[c"sjE4l:>Ym#o,'eloN*;OC\6`.K^3Q.d"VdMMDM&4)W
%N/\d?GX6.lPhUdN0SpfY1V:)m_58E4HoVFa2)^!nXMhq_ND6Ks\g:/HfG'i))d#aWl;D`m:\=RjJ4n;'57s*0>F2(2J"dWFNa7Oc
%3bV6m.BhX1_Ehsp9gIF4*407+Cp@EifU(tO/8t6N"0DGNrT6-o]O*F^Y13aJ=n8*;fG=`ZA_j7ZgUTI`d!;uG0HX2JNO+&qV,Dl;
%OHVN5ohqtJXnufu1;GY7%Kl2GS>tP?j/E3J+VrM+B+Xb<gAnCKD_o4<VMt<KB+30W1X*M9=(eh<0A-*tf0uq8Z23kn)(_BIWqUQ+
%kB4`N$&K8ICBe`f"NCN2)P+Vh&J=@E]\B.40[uuII]VFS5*B.5&[p8'r4225h3eZ^O=KqGJ1eXcp#IjND#:AsSK1G!#Ftl)-:eF9
%#E1G"@3pP0pJ=:<]T#L<n2*#_Wa(Y(re@pnUR[/,lstdNr67@j=LbEAf5EbcOgZ"'lb+&o5?g+LVpq:HU304D=kT4:2SVcIMen4<
%)USraE`tJ4$bMNVhK]S^o*S^3]nb,df\,^%2PVq@IYKM]pO[_)mSsg\:%FrGm@fjj-e)RA0>qaF;cWHZ'O2KE/A&mY="/%<XpV(N
%aAYR8LV]BF2BF0Y1Y&AR!0ESXT[IO@e'),+)SIIRRgq54HS]15E45dXp0'k59sg^]9U@r5C>W"fQo#W4gB>+e:u#\C*fQZXkB$!U
%DaR&DX2F(_k>=X[p%6[m';\<lBW^H<<tk'geTgMq]_<"Oq"MYWiMLOq<*1s1j4R\GO9];@bsmQ2B8NmN)k/kE,B^8f)iZK>>t[,f
%K@%>Fkltp(Jrj<$ibti"M-flD>Ir4`G^QP2$8\/i?+Q0sC#?LDUYP85)jbI'aSTm]\d8[g"N$!#/"?'llG"i"X!#toXSj(eX$CAL
%f)CYn<Pb*/9'tLaRQt7=.sF*kVRo?<R.)RGc^O)NXQ$g`nNgs2ZY$dall4+cT*mCn$]624k$,JG)Nc:,moSg<d>0&7Bo_TZ7H9.g
%ZWZgW2k'/"Be,eF7akZ4g_Q_"\dU/iLZW<de3$0-Cb=/`88"MPX'(.%>"h.$>+;E6la4)sc-=^XDO;['dLu_%pUm1U:M]ad$^HGB
%:kt%cTCmA>'=@5AY_^@Cn1Wtjh]BF!\.UJ\9cu1uV<IcQhg#+3p,lb4m^$)OQr"Q@jH5/@pqq3U"K*0N^#^EE):lP1$.u=!c6H^H
%]B:'jBHp+'&6]4K\`<4^[f"@mG36`i4RG)1Mo\jX4uQ\3Q[G>NX1lG>CN6@GTWmac0GV$@/FR_A0X8GL0=U*LfQ`)+B\(AEV6bba
%ETRi/ZET[D-Aa;!aC20B\>[:';(S`;bu:fskIRme^#%b5NA8QE=OQ3a[Wq0q4g?\\,N`pugPmI:JQu#Y,qbk")Y7VJp@]4JA&Xde
%0g?#D%j8*](@_LS^<p-rWShif?CrMc6Q<-,1sl]D"B5!b"ddn.*JB]$P@aGTT9@N7ao/-@EtuNiVRiP4oPL?e/o*%bKH,05lJmK-
%,IRk_W/h<iM^J&8H(^e9&.jmPl[&qLg_uY9DcWTk>@S>V^e0i2CM\=8F)_XuV,t1NNg\-!c\O?]]l?1,6;\l.Ci<n7OLlnP=4gJA
%VQ;2C`X&'$$`qR?5n`DkJkub>4,cOle,ArZW7F85*kXefIS_&?8n1@SM*il->h.K/Qd_CG*3+,m.Lo<4NC/CWTVF%Y(#r,!%1(Cu
%Q#WaOU`J%W@4;Ji`"m6:0:I?P49CK`%f+=A/JGhd,.6sB,l>qOj;`>/"g;i<BtBef51D+i+\O`.9tdu;3(pUh;Q^`>Ps-DY"JeeO
%dDhWhKsE0K>4]s9\c1%Ce^lh?d%K;lQ>+l6C>p_e2XH_@l`ZZGbY.FXK8(>5?0.!g&Qso53t5jOiqBBI7lE<aN6k<>l-RsC]@H@V
%6KL<"\e&`rV*4s;T\E-DY0I8aqJX1/2:Y$Q:/s5VX-lNFJK.^MO0B9B0p)MbH8H[OYE5]i8/VKX.Y7t+Qo?0WQ1c-$ni0^'"KfW=
%6+d&>*pT'"oDULO61HA3!aEnn9%59Se0CJ2rDVf[NQPZCGe1E-i@=?hVonO.j`#iHO*]DapL1_[U/(aR<hi\9`[cB3Pu4GIhQ1ht
%fuVY2+^=99ErF\4duVO][Hl-^K?-7&cU:GM&Q;BD<oaC7g-fkG*q$j/FKZm%I3o:a&_3brTh9$:1_kY:nnNet$TUKYN/Tdm0M^uI
%f:U)40Z(HJLgEB^8K6A'L;q=.;$#IbYc5'E4<2;D=WeRm$urJeS<a7h"RTRGo^.jt+rD\ZGL1?$Rl^<R1R9&i\FmG612UFrcJ$/F
%h7\;/+e=J1^<Y$Y_`mF?P<f=7bL#4l/-=Q"Xs8`$aeW`\;?W(>^TH.fRP:5%(fS`W(t4F&nIcq%g>q9nJ(SKX%;r'K-dFV`A3Se?
%16p\m1GBR7G\jt?)I)F_B*$JB\g't&4#s/Xoc:gcZo"NGC6l"mfcs%3gOn5Flk\KnYYKE6)!.k[b';CM(*/mY-5c*Nad_fRh4*&)
%a""2H$u`5hLJoM:q=3.=fFShii<V$a@K1]$\HsHB0\hA*l9FNab0_acZGR$Wfj^o&:4nZlmZ'sE,+hZK,*lV<6MsF91X+<!HRK#%
%IUb'uR/$^+_-F#%eaEn.OpmE?%H\9,_)DU?rR8t>>V_]4Y:HL^7rim@aXM<Gb_9-YKXJ4+%-GFV&((pF)pAJXaL7c!)U,%%5C?*X
%(S:'#+S`*I/j.sH[C/U[QfK1ZX&eg&LLbubnUHu$8;GfTCY0nO+7p7n]@\XWR*53kF%qKq.!8Yg^qTtt6pukl,^JK'"gD+PdO@T?
%+!m^aFjHCGjY..._*/fNYqc[jb%.F&5qfD#](=;W%HA:]#ME`rar`&IBWOS1DjXqGMY,6e*(!+;liRRoAfjECMe3@!Ns+:pgeP"+
%-q;Pe$p;d\I9G:`!=^V\O1i<VBTQHIIHmaf.BnN\dhC6KcSuScn<`D9ju-O".Np!#4n<9pR%RB"2`]Z+.be$ki3uK,&K[o[737_(
%+TNjMk"RW.TVc9djg%^#;9QkAM/jORR;:8hFCMoBTi$^e>@T?rX(%kC*=tY;4fF4t6?B]G%CCB^46aaYIIeX"=71?_IM4rNhCqYK
%[?Ss`M[e.b(:o,-dkkg/h?g`]%F[-Xd0"$0J&@"T)NfikI)C\Q\nFT&*eE@%a0>Gg49S+^GYIY]J4D`6[pJp?9/CRMFfm(Ld?KJ<
%QLKk.G\H&`4J?1.(2:hP(F0DA5RB5l?9BE%7dW/03#FIeR<9_9QoP."__!Q(Q3k30jI)@`QT\I(/>:p*PgNE:N]N]<o8(A(*0=hu
%=OtF^#'!2F7c2bK@VhXfZ<u6mLO)+T<`*qDBasr^)EgU1As!'SZfnqjA,h;?IdaJf\%Stnl4aKKJWO2SM].ep\^J\ME6b6"pKU+s
%FNB\qWp0t"'0Ec.KI6^jWp0tn]6]-0q/>+Ran&:`Dp8ES34e9c>j$ur/AS<Yppju%;X:IcAp%M_s!WLN85?"Nm4bA=FbN-nW.YtG
%6j/]*U=g"i#G'h=_H8'ZEM!J=[^^I,JBd]i,8!Yf&9/QBas%F!m,\d&&])Z\8sb)D,a<Xe@-tJWB45#\0^K8USm/)/Sn@1?I=R'W
%nIu#TObAhXKS0%eA<E+:*:,J4HP=,&*:5O*)tC7";]]:SE'":dF?L]p6Vnr,>Ua38\2WNjUs'T\?M9=Z$CN#j[/Yn2FkA*r62N=U
%qVc1CmcG!7LiP-AR+AKd@_0/S%Nr[oqmYuG+fcS8GF)/'Oi.\OUki9N%3UIB#aVj4DZ^8W3l6>spO:q`CW)?B7#YlHKX>OHLh\WF
%\'`pR@M;./#JW:lgGfgdjX,f#H,%eWDo*27'1;k5V9)OPCeFEGMNa_jfMm*g<o@XHoeMZnDF6ome@hVKoJ5gY1gVNgm_7FC]X<3J
%,InE_id90`o7@VRd"[RUF1khi8Xi-1PSq>!ZQ\6h4&@r=b14DFFsqNl+(&_&:%.,e1ha$`_9paMSq1"MOeZHl3'(Bmd0(Wg"a2-^
%`IMnU_.H+B'kjmVcm#WdYYWu18s;+<ZLB9bDQu4.%AC1)rWg%.p:QG3g?g<t!eh<nS6=(K<)1n5>U9nh.C05`rGdu))bb_IbK_RK
%E%Kg*4tEjkrY9ask:ajOM7k+^RU<kM;pTf4GVXs^]OqPlJ^)U$5\UJ48I0iLHnT008)??jKnT%kp?D'.Pnq890'YEtBn\mo")"\h
%ZOJmErp2_T)%)5**%T[1)'WNANAl[Tkal-;hmZgjP1b6CDQVRBOJM%umFDUX*uT!!<B#n(`eVL7,0n4RVYkntDQW207_W`K<id$m
%L5/F@aDKE@St=iN>:[^jJ@+e!X]8Vho15kO[W/X"*g*'V%@U;.]7mcJ>dcB9`6G$%p9mV<+&7"lqqjP*VI1P6.VRBXDQ7Oq2lks!
%3+u@PjG":i";hXGfcmhQLR03*e:FcCbm'1FOa':^521aqLl2_B3/EL6Xu]OK-l>A<I"<QOh)]!mM#`8_JArr+CrF6b&8?M7ZdErT
%GY+Oqk'&U241?&<JuK2[Yp#dVGn6Y:Ko^OF,Ef.&&IB2o@c#:BjTM81EX:)WM2^%8@ZqTlU^R!=Yf*o:JrnQQOL/p0n_)"DRlNop
%a[;&DpS7(ZNiknN7(gFO)#LU`G9tuu$+L7geRfVda/5j^5DZ^I#_+UT'WMI!;Gk[f5A5Sn$<@%8,gH:Rb\tm&*Y8RYM1L9FCnN7e
%KaXLaZg2I^!s3>&hI+o'\(;*:GWt&hfO.-T92Y6(C.sLZTOdj(Z+2HkSOZ!-K?UDK4b+L_jg4!/ACqnkPRj?aSFdr$Hn["_8IoLR
%K3IdQ@[0]tnN@0C,IaiY*O5NV=BYVThNK"B;psq,7\7I@!LA@@GX+e'FD1Gq^9+=6BsGPKmH7nUWk4D9$I_1d6L9-3)qfk=REo@G
%68s)gQoc,L79U;+(L>U9f<P)ObCOKSa93`-@!5T`("1TTk!a8$IG6A2]!'.V5+)_O/Y+#a=*HO0J@o$X,.ICLp-U>Ug+t6n@LE?,
%FIkb5hpMSD:>B;"0d^CObMk2EM4E&3<-F!fo^uOhZIQo=I30,0^Sdl'$Mjhc<\gTA=g]@JV>RkI32Sl(&n5eIP=iA>\D40=1Vm^D
%#u+H.aG^p:GN=ZsSVQk".4PF3[t87Cg*^uVhL_Hr6qa-hA\"#638BE22!;OJEmlS)6g8!d=uj,bMsE<XFUSpSmUbo,CR!Z-h0flW
%!TlA<;8rdbJ?2a+Gq+jYX@d>fLdYtX.=tOPOM$I/(oG6F,bF!CVaM_-!RtQaItE=)?i=@,CC#qcMA"4qchj:>F+,]0_^+C)Btep*
%lefskB"*J:k\rG5)*A[CU`Im;4Fe8)_D%eop.GYl/c2N?`-.aUL:P&8&mK_t(+fU?bW&33epcn]?@)DuoU+Y:F\\V%rF:^WFH1AG
%X=Hl\0BQVN%tb/=@mLqAABP9!3f#b;$e^0?"&]IMe3AhC[8@[K(/;<)>e/(iLr+p\l+c$Jr/sZb'&I_nB"YC,q1.MOq#4KIj@)=W
%4MSfA#;gillA_i,a'E]"ccY;9I)q:ZhQ/Y:\1AX?U_@=B477)pdeUh>9G:m:KjaDSB'rR60?UJdg1Pj4@]s'dV4.9"CDIe=='o><
%Jg(?;E"#s(^<eu8q]Z4;bdY^A'jm?-epQFarXqoD3OVHjme.t7F3Ge@Bt6_C*C+Opj6cqU?2=WqBc+QBaW[U-nCnnr.U=RtMUZFb
%LGXi`5"XAt]8+PJ0PH:WS-Q;pVQOG<J%M72b,+:KO8?h5\W])o7Z%1B)[])TZ[<ZA&JCWuX/03NA,&U-K)WGqJk-]A#QT\l_FtY-
%"n8r(TEBb$"\1Z<:Ip0L@gAA8?@_/]G)/Va2e2D:"3OVUUasPc$>EXoXS<pMXdEmhkNqX:hqiQ.\'ecGmAK6`K:$_ddCGZ41Qu8Z
%P=RE@0oEg=cR`AY])6p<ZMap_H0:1c2IjLVJSo'X.8$?&V8g5V'gAW:NH5SK!$%M^bmP$`Z[2p'i4*Ro/r8o.f\9TfK\O2mLEEgY
%G&5&[k`EilIoNQ<6Os>P]<5E].RJ.@H;t>!E?nSR:p:kdYWkbV>gTQe[ZXG?,RFIq)*gi&g9U1pW0TQDiT%<gdUN,&(+G64gj3B=
%>2c:PkITJMW=7>ZhK.%S9frm4%*tBoC1tVq'l8m^j]Cn;ip^fC")e:B>^N3,qWT?1FpES+A/uLFgJdH[;&eg=+cLH[c60kO=!])#
%^sK$^Ih=g^[6^ubLQVm"=i/*e*]esGdN^g!X;e>^MZ'[,Ych]>gY8oYP'r2@:6al^2>)R<IuUC^7/91V9m\2l2bL6WQ)lK:OUtD`
%j=!S7U:$?Poe3#DQ$4_=\mBjP4[pg`cW5Y78;U"IhG!W3(MHu7U+sN9'NU\`ZCEY)5m6F8Q0W<JPKDR!UlsMd*Jj\M/oRPO--`Sq
%QE$cc'hu/!C7+^(psu#J3_:qYH9(L^9#G7d8kmpi'o/[2U0(];o:lh\.BTBcJu?`0`q"rM2DJXi<&@";\Si$RI%k``Sg%K0s%)a!
%m=Sd,EG9!;UZ=_pH*hi9OG&5`'2-bW\Zrqcp/FQA1$`ppd>OB6UGagdPPXuHA6b$:Ia)\gZ*\Ts_Y%^#XXdl:$6n-]i<gBqN[YI=
%,f+B;P;mD2LcCA5$6MuHla^q\&KlI;O]JU2b_CfDa.5':JK3',94qk?n[4'1jY<no?LJnmOeR&0"l13%`SL,V-$?#bhQB!HG$L(R
%+,G9EQC\<T<:Ag&8^T.rP.o$;'(8cf3Y'mum'gCE"HM1iq:4n`LmZ8VKV!Z?GM3;lR8W9iL[_`a,0]5qWU\&@$E;^D_4YDl#2W5*
%etY-\`KYT$`^##-DkK@G``hAS^l.$#Ai6l$6GZMQUObbKEl':i7\#<,cROhk.>e-FaVJT-p3If%!r&k"G8=9D[eC+A8<g`%lU;aq
%ZD0hVSe&D.oJ)Ful5Mki@fm4M1,*(cSV3rq&76:HmW&Kj8VQ(1J/nl&CbN#Z`^]A+HeJ;ZPP_3aZ.")TQma\G]ii19Y;t68VBCPL
%=i?Rk6jJ<0(l]"m4\Y0j&/J'rIX'Q7LK-@Fm=aJ--^aTgTfa]l@OE:Hnu?R0Hi;kU[B#dG=M$5)q>m-Y2Z7Tl'9)4i:2p*fVL)K1
%d=Y#X9Du)L.eU]*=Ch9eW"[,HDBu/+RiJRmJQMrX'7R(D2FW'S`sgN>IhrhuCHu?`\aR)AlNDW7SU!65%#20RdAAQS%RjZ`Te<c^
%\=s!0k$f:LY9G-0`%UA\\^/M/KDA[rUfB[g%EhfZ_0-8Q0V9T.qB7,[H#qaFr`.MN7h,A/A'mNjL=m\.cS&)bA)CFqn`+I+2K4;f
%`b[hk`-Z=*k6u7:>g^Ol'$%\BSK1UB'j.q2HI@-<\rDG+H.^-W=R-5!8UrSV?^r?QE4I>SX2(Pl@O=!M0WNqS>:;ins$8fKEE>q!
%+ml7O^#58;jts+iUE"9q-+^1`$]r;@fCk3s*1+=YWdC7J4jPNX,&s2I%QNib)u*LsXi+r)j#-&<KFjK4fQ,]"\SieO7j:Ve'7Q.p
%^t_AB#7V6A_bKt`M\om:!XZdHQgjc$CMb$+%QEXub^JIhO[iZmG+8-o,"?s'!L!#<[^D^GOe3LRDSZ7o%"_WkXV@/?USp,q4GNfo
%?M%7)JaP%mOVMj&:p`#\8k852KB86'Eii-L\\[jX>.LnFhV)@_A?FY9g"b(bH"=$^T;4\_YY<<(FWa21-CB2t&NF`#=0Z`W8OY2B
%V6dTcXq1<,3%!3[X#X)r*(;H0p!Gp&PhIG>fa5)F;lVRi7NE@$90P1%5Ho(mHUg(nm@C8NlgHXGjOu>3k6-^-b_IgiqkffF?eC<;
%Y!!'Qo1`Q[?Al2UV]N;-Nk[dn:R.:%G@7U=M6(Rn[8&)$\o`a_/b.HH>H-;N7HOJo!Y08g3gkT%Nm"`9_HB,km<>_\))cYQe##+4
%Ir062%=?UUF@kr#,MfmQdS5Xk2C48hD)en,?bP'de,@9>c_0).1A@b0p6fr([YcD$FF/pCqA"73R\X;;QnNf^ph\u`]oNY%)M^gL
%=0k-mr#UX*88Xl./')KWX^A+c#9*!\2qb\1o@iCdeiLY2GeJ"10p\\;6Q$V/agA#k#)T,*#W^lf-/@'nZ;p\%O6LW6P-fk_)Ki9!
%4\5u^j=9f1d4BSpeq(/A^q4TdA9++0]3s5cMKMI=0\m_kC2ot@LG,[!QX^]7R#2'MF&n\Tc6TN0H[]Rloj[4W>9mc'SG#=lY^!C`
%iB-AfO\KDN/L8WYhVf^p3*OcjdCQkodmV.h>gDR+8g\jdW'/_>l7nOA74g*j[eIG(`ja,oh)(62Bo:-%.#8cZ.r0]-Hf%X++)Bf0
%Vp9</hE)IGCVEP^0Sqafeq)Wa*i/gTp`CtgrW*Sc"$tE*%iRTj2h1cps,[3N^]*c\s6TnB4N*r/KKj^D86`EHk=]71=q7En`r'`c
%2Xsp)&^Nn!#M[/mUDj'Orh,%ViAF^Z^,(SRdMg!4-8pU9ia9ZsSR6kt4CnsskFFnWP&.jU>"d@!Gd-<lo*'f#5*k]GJ-X9CHM_*p
%AESroU-"p,;4[YE4.@i&"@bV[1^cs.+sFW",A:2u2dK/3$WP(p1mSR_7J"Zs:`ueOVkJWUg1ii5J[f_,m;_?TEi6F(a0re'BFC8r
%]SkAR1877+@T+B@%ik0Dog\..?EQ:-C$:q]C^TBAH4?'UR$\M%Cr0c$L>5OL)OhIIp.RGanue];LSZ&^i^?s7n7L]!KuUP,F@C^(
%=)L=U!j+qc*@e0tT@Sonh-`S+r^JW[$t8B2[6bZ_@6uO=-3hsBQ+($!rh@d4W[en#`4_RQ]["%DN9S$XU8pdJ`Qf8$q;Y3]MG*Ee
%.SGWQ-u=0`r7ZaW1u\,?q5OMX_KA[_Ek96kPEG)RU`9#2esSjrBP?YPpHk-CkUG`inQPRnKANK7Ds)Ze*GTr-E'pk;gFX*5oJV_T
%P?nos7_g]`O3<WcUb2S?96fTWhAZrN8f$6EZo!&p^(+tSTFaTrY0r1UXmcKT6DRnUq=UQ;O,'2_5Q&KEEPhW3o._fo+d='UJjr+`
%n^u;6Ua$4+iO0$>Eg[#f7\L+b!MJL:L9b>T5_h5H).#ED!cBiG#H4\:oHt$ED)J?UW+?drCMD;l^;Zpl.?1G=KQ'jX#AlSLdLt?Q
%#jAq-TU#oXQkIkpJ\u0K6Z,K@iLfL8T[(bbSi:l:,Bae3G]-%7(^"npPi+UU_Em:okG)'A*42)9&[FY=M)[ef3iV`FqE\[`'3(=V
%fXNX:bOfc2:tll'Z,F#`E0d)GO?ZY4fWuHrdq-`m4:[*&Mq/1oaGZai:`?[s"HsoNmPd]78d`_(+6:F4b/HsLlRF;"g.A#VXAjBa
%Wf>H[c><mok(^!d4.**!@s`6qQt=br=$SHPhqbO3$CGIko/q_'p0nbs!3$P<jJ&sYj84_gJl1Y>VYk]Tn0NPu2)5>TM4p1jA_m-F
%W0%+URZna+=n[e:jkN([Ra\"j5;rU95EM>o_K'gB;*X2&lOTcQUi9(u:M2($UHad-P9M?c3NO$dg/"L+UsSb?^=G;I+JNFa5Dg?s
%0M^Ji35_=pg\L8jTujXAbD18T4/(fHpuK_EVpq4P=7(B"L77-hG3@U22O?A;4/D#75Wdm!A(:M?pCjKf"!bSVI<k"f(PW\a^G#&'
%pHm+2H[]_m]2r`BMedLMT0pkC+h.&[(RqTLqsK!./,fnpW/htrmXQ2n0V:N%h'Y'-`KeKX+%"4DnX5s:I]5=VY1WQ!&2biJH+NV7
%/N2LcnGGG?7UB!Lhb`;-a&q8('V9Neco4dGh@VWc`@#iC4/V/9G^noR8^s7E-Tg5b@e5Qdcem>g[lO0<$T0<uq$d\WHXc3B.m39W
%RcEDf45W2"F'?5coDL4TNf2qgmm'YF5)&0<m'N6%qsK3-PK1.6Ghs0&?eG1K8_6b5k.%q*o4@6F6J\@68^s7E%"3<^K1-2/X_Y^^
%,PTI%GC`U>]:J;VV%XX'P4r[e;$I,1XqiiZ4'd3*:7X8aqii0l$RktScC5],WnqR,[Ig=sWi!lQl7Ac*JDO;u$0<^BGk,Q-aqZg%
%)$&#*/EOb!>VKRG#(^Np=Ugb)"X?XUnU^l@Gq*p.>&PJ:j&!WEj2mhSc"hb"3*tWDDl-b*UO4(B!S?s#BAFLM(s0\#<H&bn-A/^k
%aprFWU.bjg^2KebCBH6(n]Km2lXEc($0J5K)^\6nPH-^QngU^28T[-!Tk_-FojW='\Lf"?A3:[S\h.sr;Pj:R%_]-Y5km(0V*$f=
%/U.rj2Q*WUqA/OeVsK]NY'eH<M/\ji\'#QK(kINWbd>CXe?D8:&T!g4\A:;+`ZApHFED(Jqa1AfnR=ADYXc%VqH-OJ.tYr@VN]?W
%bddVOe+a=GJr:T@DD!_kiEb/p_`;a>R]_fG2m&)qekr@hhOF+!j@XS!Q0bZr]m;[Da0u9T9l"IWEupX%G3a[kmA22WVMp'`^KC?3
%_SBB`<AB7\cPFr$9+V5A`L!CFMpf3l.pP+-B.F@63Sg[EBV2$M($KAZoUO6&30595$[7T<Y7sSN+-o8\%%Z's0QUr$6P-rqEM3!5
%D+)i&h$=jCC="bQbi2JY\QX@G8!GK-Vljms`"4GUi>M.:;^Q03#5+(1bV!TdJ_t9PVoaT:k\lqM&*`$\GgtcVDd#_)%b8XQ=S/R^
%fh+.>FbVtW6^<JZU&e5_`&k0"JEY@l/qS?V@E@@=P@2`Ip0ODf:Z=$kn<SP;J,L#KD[3A2FQ_j./E0tM8nC#2!B;gSPfsN)Qu#8.
%9LQ[+IMS7Nj#P_[*G)kaV_94qb%>nr@LXZC/krV=hEg;glMZ,h5?IHeT\eP)VYY8SB(bkb3r4RTO2f7$^*,lZ?!Q`8])Zl]b7Pr"
%KZUFGY]TZB9[q4=12+Dd?Gp64Aho1_?\CEn)q9r@gG7;'!fCpuQkPK:Ru+tI])Gc^SqC\e[+)9&&CsfeJD'@(dH[a$f)XA/f*G$&
%Ke1juWHl4e"P#rq@:"PU63G;ObQJ86OJ3'NLZ74<?W$Ua'gDN\"2Guk&*4/td/F2UB$a3Gs7WY20FrKI6a;._,Z-5sH3XG1!?V5M
%G`!^oidkZ3N2Cik@p,CR:ERTkr^%/!"rLI!!t<4KoP(-]X@0?2:?+</i\Y%WmXaIkN5X[V/5:1B:SCC2TJ;shPlO;US>PBu]o*Q*
%jD.A@U&TLg7#q7rs4@;EO8nu>s7*;mrr;oZJ+p_Xa1qW65PunHK*B:DIeSo!=nDun\c,+G/;\sL0FCVZ8(.lA!0SHG!6\jt-[ru'
%%)n'R-j%;3KGmUL4ACG5$_VI!?oa1@BY[Ijq-Y@[MIBYH_'(s$C?WLcKBUE7B/s\pPk=#8n\ObZ,1:nRZ`u(Y%j%g5dq,E*Ra0ZY
%[M6Pu1X`@m:1KN%/E_Y861$l"rSC(YhImE\P@YL5Zq0XDJMRg_DgU4)e@ZA7L"&4:s#0/lG.8U6f)UqIO2mZuof-l"M"((68R8qe
%=i;a'67`n+<F-coA.[MVBTC"S48s@cd=1Fm>-(XlU'N<g6hl9KAWB.r,gi9@Il><;aJ@YfQh?!/j`LL2m/tE;kZdLd3G=?UNQ#;R
%>Gn2X=IXc1/4JG61.>^F"2dbT;tpGfErR]\;F]#l(GX:<-=*d`QZQMlP6hH'1ccqaK59u=.\Q)q].Q0GWionA6Nml%.&+LlWeV7H
%ZKHR_FbMJ*?;]5S:##fYUq_5^M)L&3N#M;n7Z<<>3X[lXmtRrImpeYE0a5-f&VIU\JMsuJ*J8(AhAq:Si`gSp0Jl1C8pkCn<20nL
%a/7,@6qV5]O\gHJ<=IHtTW)9HT<[,Hiq,G24]#h["e[!aqf2-1R;dd1cjBfSmrd^OJF@<8!4[7VfZ=(VQOl%=$msRuje?no?JCsk
%#+B9c,G6"],$I1M,d:+Nagn6E.76'ChBe2Fhbl@0E"KtgCEhIUefmVZ?P1fd=]`t2%4\%kF2]td.5eb#nOe]N[cih=Z,qLR7.NC'
%3`5so\7Zj$pXc/XMJ;%bf?<L?_f02KZJ%VK2NU?$:3`D"m=fIpdUpJ'nVscG0$qhBCg6Ei:O;2hL^e<\8"B429`453pl*YsYL"C&
%K@Okl&MV2I;__Sf-P[?a9s@a=PKu]:6'o/4K&Q)O$^>:9RCs(VHS8.U/B..g.3Ous[e:Fie.bgq"p)VC$D]3IC)])5'>kqu<rDE5
%s57O>Qhe,b=J7G>YSRYBl6B[7rU1;^g%qBq+=ID-f`uZM<sPD$r8J"3[9r;d?2ql-W"49`#5+ZCd,U<R]]uQXiO\00e)@n'.p5^;
%OXUh+rQ[D-F[^MsJ@]J,%R=;YCr`3O*UFfFX4cM5e-D@U%I,0S\-)D4k*9SrMr68XqaL"[TIqI:%b,i9Sq;9t@q7l2d@Ee#Xr2ag
%:tH025,]t:q?YU$m'-_:4[\Uhq?S$4TK^<(+t.I.Q!JJb20O`307c@6n!B0&"8*.lB0a/b3@CK&&Md*IrI6!NT2EZh'L1LR64uM$
%,Dk<?9F`B=2r!t%f'n2bJ)W,J?(5_WfrAN?"Z'4;U`"oQp0^6D8(U"6igJ[]d<j6:TTULNTp*_a7>/jMXP*Hq&hA'H@8_o?Wtpng
%:jMdFmg1=?'AI*]"*K$]Sg3E<===hDl.:?YM(nX8r>7;k$._Rr&G)i^RW6`8P&bO2AGTtl9r;VJk+6.@J>-Af60rk2oQR&R2F!(3
%]ude3L"`@_[M=l"dOEKUB]bN&qKO(()K<Rd2Fb_]Pk`)O?)>J45,(prPm"/)i5tW1YfWNs2>W&\;ZXXL;7%OG_50<uFKm_^g0]K_
%H4_7M9_guWmI1O4o/=ls7Z2pg.*\=Mp4CNQ;\2X*lnR*BZa-4*Q/4Ptej2)0pe9(mFku>]K?_VAI(r&^M?"Df1o$dC5WgfokQT1>
%#-b5DkB3!67,'hsVNJ#b7[$>Qb8L^tK?mhlN1:A;q%VIYEY^JilZ=l$^g;$sI#`,c`CCV0^6<-OJX20jUDk/H./aKiMq7E[ACr(m
%K%&e$Kd63uE._QC8/Xf9!D^-l3cP^m%`f>;%sPR'E9\l;M[]tuGFoEcg<X(m/A+&dp0Z/Ibkkr?5)Uk\On$T/1J`j2PEg\fg#tL&
%mjJu?0W%3lXhts(\JH5,9k>O>?_hL]&WGMWAhGA'!pNLTnmFeHJ:(;5C?u?Gf\59J9P]l6rrl%H4a&s@%i"=N#N`f1Og+G2bi#$i
%cnBLq`k8eq5VP1]BdQ0Cf7-8YZ7qV=[t5ahC#rJ5pR(2j23hh'7f=i##PKL#,g@XTAdl,qmIitP6%C\G"@bBqa:ijGXS0N(j`/n/
%!1A8R4"IUjXs6?a0Y,!I#KK`@"c`?Z&Ie=/G&M_Bd,<;aNt2l_\$0,i>?1,rXtH-;a@"DZM]\q*OTq@%0i$661B8e:ij;TgXqHFu
%J;/2;5Z'?E,j"eU\Dp2VCN-l9*;)Re1K<^(@OZo`)Cba3&M-^6%/U#b#U>JfJ-LN-S7K%$#n3QKo,Ip)*9-Ns!@5eH%"YYdTP0ht
%%i1&>H.WusTLbS].'U*Mag>\@C%2'R\qrl@<j^\B8a:)$I8coj&"QT?2+iGS)5TLuQM;<Lhe2s5Qj8Ac;49b%'`Z4X4SDR71Jj/#
%RJ3@b\Mu8Z>d$hXH#5h".4=6Q*cc0)9.8cGPIf,9U[IN74Bf6.qsESk2:afbf`pUJ@E/pq]nnCtCc&aeQ=tQO6?d#AhJ@!_5BJ4s
%:`_ofPXcG@Wi0L\*=mJ%>S?j_q;GNj-$lsN2K.nqTtRHAK"e77`k5IOC=2a,p=L`Y'h,h)GJ.#C3QVKc(.q?iBnklkI'WH2S&\nU
%UDG0p.o9epImgka<Q9kF$c3R2+?E@CTi#=aO45.,M*`Xc)-:lFC5=pl!JM*9M%!gfF_BbR0)3X>??N9&?+L^`#MMoO0!e;bk_Ye8
%G4iB(3caQ@*DanA`lF)eZ,.n6MDEC22@OrcQ_e/>R8P]ofUaD;UmG>2+W,I`E0G6k4A4>_PhDPuqbfa>S$mXLq1[KXbU#=9'?>&\
%5k2r#">&ZbY+;m-j(HJo8rT%h@,S/*>FQrI[5X6<7?]!k-I_@%:Ap(65`o@&,(896FQ8Y;/#auK'_ubM_;(o]X2&t`3W6j*LYADu
%e9UW@6i6QZ,Gpu+$G,P`qXB,&J\F`:TX;77o^uBXKgnf1U>Q@mefS"qLNpS3UH$6iN-Z)pID'c2+7H7p`[?#GUJ$if>M]c2idJ4d
%m/ZTjN'!q^?e5%ri@V*%POQ:e&UoQ1(&CcF]J$;0AFYu7Gd$YOEge$-rOs:>%e$ahD2@hl)T")_f1iS]]\g+Ub2Rip%#$b>>35/f
%n#N>=$/Y-Mm,db$UWF7=j>t6Rn@iM'S`9U.C$c>cneRQWJ\(smWU`sKFXm3R!P"kST3bap/&aSX]$sO2fd#ZbPJGa&.?DtJ,B$?+
%=s+"<bW"$Q;sa:u.GbB(hs$QjPfuZt]s4/3:<>'0pBQ"V&G?g@cne&BOODf.WR#E/^s;mMcJJp7GD@eHCO[^[Dr9Ho2H.4l%,$!G
%6V<t'[7WV;TlaM,!8>)/:n[0H,1)W*MRQ]r3p?GC-K+Eng/`?c*^:HXkp`orX+Q-cKbcMgVWUD5;.nGA4%^jXYJodar+$e;>Jdgg
%;`AJ*8jS.[Pa'!j-t_kPOUC9g-.)>V4(04&qS>uU?%";;6<oaX`LO!El\d[jlqgn%Ua`nE\=*Rk,\qWB%*pX;Z1#nK?&e39Bc6`^
%UP/Xg`m1&--uN+.rall9MB6Om&b:.Ab:=3!5KC66B"u#&,bsT"KWr-mII[/$erX'k%&5:LaPQM/9X#t*e-\A*+GIMYd"0(V[YL!W
%q<$>D=@ga0SE$T!2jFt`0DH\qk6Sr_0iCPVWSYTK&AI-31?>/oFFkn<B&:7C_K2t^J,CLfmtK0F+6M$*-m%40@5r[Do:elAN&"dM
%qP$W1GP\$SP^NSY@t%SUYUL[Yc7*a90T?W)n*7>7Aq<Fb[.7hB<!Q.:2r?UZU@HOU=VA;nbq5pu:`)UB48!ckCL>OcR\sEH7%L7m
%XXJRQRFO)lddO29iNG_3H0QpCGditjOLhUab,4@..:J$3qLj\9eX<=<^<=sh8W?H(PuXQX8sPfLU"Ug#Kll1ZYQZOlGMKn@Zs'H5
%BI4i'MAWp`ioAa(i^h82cjWC-n8Ada=H\hH@B^A?+cgW#!YiqM<f5(#iWosj#okR11^OFko$9K(G?ej(%8Ku?QV#)WcTBEKj@80#
%!1_&CRNbjWX)Xq[*+sO8kLg+8f-)%<'Zj`BbOI\b6_ohDZipFpdt#I=J[5JP;\'Xg`b$As,cjA],g1#2bAuuQ:)]AcU4)M&>A0@A
%7bdlTQbPB.\(!&1e1(&fm5"JN668ZieFVZZ`mPA#5s-hHr_K9XFYW*s&caKJ`<S&Q3W;qMOr.)$&'+Bd_Z,:U`+6aHo9[CS>+5n.
%S?CW1H:?[Ug[t7*H::9+Ul9e1f@ufO+CpOs+4p1CMI$R#X6XU6%6P3Yl?^Y=AD*B\9nCRm2en=t-Jqf/TX2=#SP0Q^GE2A(B?WVI
%UFQV7:7=4DYZ^GtIDS"(P<trTqnqtmS0MG?:MC1CN;T`ip(2+CWDE%7e>JHN7DeH*7ZYo[D/e6Pmq_;cd$+9?+2.Ce4[ni3MuAcd
%7p.*mhXOZ;kZr"((;6IrNYq3n")Mqg;Rq"iGk)bm&\%M"DTD?8NWJjbmTh/!78N?P?.Zc&\N$.gVfmlKOhJsAZKRj,FYL*;($9P;
%b-Cg?R.8HV_&BfW23c.?G=GA4iigeAWo6:F:;!?E7E.+M2fB+3fRNg[T24&/1ta0j6!BerHnF6=XQ>e9S`TK)\s$YV=o>:1/L;.:
%eZ7d;rEGO&V$U!%GuoSW,<kbu$-,.d;N40BOtuR9/24tMf#>[>@FKfdRPeJU8gJFWZND8Z1o6qTQh7iB<EK0B0]Q%?NNh%L5so*d
%E8u3GWu@#JJocqWSGKbO^_M4eKB>gmjJ54A?`4:th($K%*S_=$33Mb6oS4X7WghTC?=14\Z\!I6:f<RU=&fXmb;$ELEimb$Je@[1
%hlJY&@tXE.hlJY&#8*aj]NT"d?+-N&DXKka_dDCtfm??'D/2/h)).%(;-@up3Mk]&060?HNU00YC?4lZ:Fcl;G!3E+'(9rE8pHjs
%d`drtBCRrom?2cSXX8IDWXIP"P+%e!WY6]uH.(\XgEOp:24?E/oj6)U(UrQmF4PdarF+G2Rp$9eE_8\eNM6<<qmb(9";liW*t/NJ
%Na^o:R_a4MWEC((AiUuK2unrC4MV!BL^3FE)Y'"0,_8f,JHLWm:In?lE<>@6dc_TcY#Z?:Op^GEB`n[.hC4FDP,:eX@13-s&I:&k
%8;885kg4R;Ue,Yc/]5sU7kg)9%FW(uYR]+KD"N?8c,lmhjh#&!8TY@5i2nE>+77tkL\@&1^n3Pi5,npbIY&mX1+4-uNTV\6iW":s
%T?WYoK==8kI49YMFJg"`!HS_^KOB'Gs1bH;/EF`U6CU%i>ppet'>QZ%1GQB[CC?kWE2*]7*;?*3bQ?7NZ@,+QkU&9De4eBI%2=@`
%:7i20WT=_0;a<#qD!e]`.?mk=IJpS9qD$J"6Aiih)2baB0K)Y[6;@;:YR)O[4l%%b*#*kP\GF/A3f\g"BEkLQI4m.U?g+PsE'uTp
%GPN5,\dK95-kn.PdsEMJ3U=F9L(73rmfuUWogUFiq""pMm*.a+eud*5'Bqa)d$.P8YW`si&>\0?r_\FDWL2WAj,s:*`R(1LDeE`X
%c_9DaT0PYU-`Zdqaj:B].cL/K3eTfc[kT_1*8W12Jl*>mWgN6dkX'T%]4KEHkB(82N=>3m<9^:2q?[qI>bl5o`6^.0X#`k%RKY=q
%128E%f-L)(C:(Q[E9t=c8"<IUoHe7]i<[?E,F?(U$X>;*4Z?g5B58oF;\llJ=B2,]^@r@sG!uVm_#fs]iq0AMW?/L9^6&TUV5D*X
%e0NCi"DM&-mF9D<aT@e:PI<PLZ.Ce=:2?7ZS\K^Z/f2hLc$?HUTZ3X=9p<>Q"YLU"LVXdRo:3d)TlNkffA8a6d-F$QXj,1J+j\:#
%+(BeF_%_01rY0)5r+,\g%)$'\:>pZ/l.3p6D/Z/Oj:5;MEhVK!K&X*!f=%f_rGG`qEigPRH@["Tp*KP/pJY"J.ie6O7o%-TQC=PO
%g"#tHZ0346J:(45DHF<`?*_7c60tWsO#="_^]K:F\=K.I*!Qk9Nnt]*9rM4+Z%;98="(1#GJXFY7?NX;5%"8&WUgBh;.l3JWD<l7
%?a'7Can4`F<;^cGr`L,mPo9O/L*h$YNo3-D/4$G^1Xj/17i;)k;la`.*-cP>SY;>E2gsp@H3%)Aq-+`Jk^.&LJ_5>!\2:J=$iM"]
%\eoL:_NJr")CI71HoFFEh-\0GJ!W/qdGC+]H)')Fq*)[tQOEPqWm;2RA(2&GhYIBk\6(.aWSp9ujN"5scD1@LBn\`:9saS;UZLjh
%`:KPN.-Jltp'$1'<q>,%ZG>S=i*!0[?Xi6MpTVHpif#2Yh4c$<5O<)1^8j5'?G/\#E*/M#3gFXRXXrrOK6RKTncp"8`D&,ahn]B_
%'\I[]p&R%N-WXCJN@]%Zn>jPe4)n\SkU+HeSH[jR,H'e^'H_FRqQ86IR1hlR^9#la_pmmlNT@-YMm5]mn%/Z;Gc,ep$K>2XZI%A=
%$XBiGdV9Cjj(lpV5Co7V(<(Q$]_hPHG@Z5cn'*+aZXAjXlMcci1`k@lO+'#mYg1HrSi;_D,/l>bH`_PV/Y?@*pG/Ju^m1SHOEOn&
%C(;_P!2V/_f+BmkUgP#1M,DI!cfH7]10,C5RdHc_rL+GT`BiUrkG)'AS.O,TdcPEQo)P.YIU_]Wr.PimI=K+/KaN\3`*d"0Q#WeS
%b+p!sVCj3_<$k:-29'(XQre([hPN)eF_5tO;@/-1e/14jdteGdKh#[m0j12F1[/MoIXVuI:-lIm,Lt<]bJ,?e]eTLeG%LMTWJnGo
%mcUsbTu*=JA%D*!I'$OmPPMF(c=b";n'LE@\H\0sBZBg6c%]*2>n+8pbHs:e\6Elo?Mb:-[\pDcBen87BC2t\5)GN02KN<[-s+GP
%jfn3!&Ti8CDJep@M0\sM(P]9#W>X^?K61e$I@6Dcl-sUGUT8FW`DPHY_rrJ2IBQ^B[E[s!-Pu1'9'CS"f[,;n(**7F;-4>)`o&Yu
%iQ=GQPDTQYJ*bS;l@uOGM4M</!_PR>mS.=-S\5u\KXs%2M^OfD^=ScbAg)6&0[;:TC+ZPF3F.2H+mV\bbKa'?M=,+u4aCWK9omcq
%9I3V,YI6jr6mUO7QA+8OMq\tlbeu8%5rC-LWd.c`;<`P@rZ&DcM0ZismS(=?UGnAoo^#`a%B`ktV:,]96RAe;Q2Sg9I99CEL2N7S
%Da`3ZSEe@oNj61:X?"Lnl&a=00UHWdP@6kIC.,TEkdf/I37Xa5[A^7]RT>@lmD-bhn\!G@YI#&9G]g<4=sF>p/,)#m5*$GX=H2OI
%\=%VY0>+!O@>-18M>A,XiT2;pkmE3&ku*4d:T#Vjf^'j'$T91_FS9(aj.R#q*H!17G!q^"\T.kG4boG*p=UR!LjJj,kQj8<k<XS7
%87M1(3Sg[E:e^/iDc9j[cOQhR+e'rO=pe,$-'BmB+>oIkC$pH;`?rc?]":\T.KjfQe(njb<e#r<UDG]A>og3(BmRF),?>tTZU(Xt
%&Z[Yd3$o$Jdr`1I7][eKA5i!nB-CFQSYjX9)To#C6P6@1N,6k@S$$nuGs'Sc\2STLVHV.ubA([<QAsuS-L2`HM0^9UTGJ[L!08"b
%'].$_;nsro9>I':'S&VN.[&MY[`m/;)qo4,ik(4Ucmn<u5Ntj']]LN].5]tHH1#>M?o3Z!YV.u-PEKqeQGaWEGNT1T&K"$s35KPj
%9s*k-5>K@DdSa>Q,mq[`!e/+O"@W;s2KP3i9@j?MdcYYCD5/$NcVb1pP<;4UB=;;h%$5hfU<@+tUN)kM=H"CoQD&73NHubSh+<6s
%oH&5FG@e5['Q*RX]DB@krQ\Yk5@rPr1kM"l1H2-apNfaF+<Y`&S<PlA1)gZno^e\#?Ije4Y;_&0[:jct]qjs\//GYs"'iG69=g6,
%mV@&g(!q)th=^a;XoK)#8g`l>fsH8@n8ur]P&eoo79'^PE=:E^rp%`Tg.7_D2!/A/(`U('h"b(!@n_G+<MW:U")Vqd-O6?Slni-a
%5WPLN&Du1GeS)kWZ"^O(Oj]]LkFH(d/dBQEOY*E<^20Q$"-a2Vr=DWb;S6Ln<X;fUY9ORR.f:CiNR,"-(q6"sp6%SN)$0QPMJ2f&
%PJDd35Nj5<]V/#Fq_K/0`_KB\EM@-#rZ%T0@TrX"b"u4q:)8i62h]=c5VjL(ln1eZ@,;9V2%VknYW_-4TsE\"'7rN*cQ6au`kXK3
%p-h,$-IXn)+IH@lq)r+Jf=52CQS6RFEQdK:L!EP_;Y&4ekm('1><&tGTIbf#@u^H-;0-!d#HmY,*=r0(C?30tcVM>0GkKl%6SI]%
%YWRUHi;.HCS.q%.\`(.I#iXX=3A-9RH1Q$ATRI_8-UlFonslC-')6IrS.oDsJh/%Vq;!haEaY-B@4-AEoD<7OS.l3thj8Q$5>BBo
%nYMfFm\i,p5-je95;ah-Kq7Z;;KH([0.`["S)7LM,7!Ajk4do73@XY\^G#&'J"2ski[[+JrD@W6Hsl.7!S!VRkBB+sf\GQ?pEs*O
%]CX-YTK[Mb]/PKDg9L,'W&ZIoG3lhbC/0X>m!O"Jbt2pRcM&!N3@W8AHt]dqag(;qZG:)8P?$Js?K(\b=Pt,5T(g%I[o7P."#VIF
%Vg#keUuo1sHKY/;e=769G!9WF\\YQ>ca(?4kEEB%hH]%8-Wo=('V9Nbco4mJh?>ba`FjD/qkWAM\8pd0+k3"rniP`TZ2'uUA&#:t
%N#.f*Rk$W$#RalspA)If!:rAkqY[TOXW$N-ps5\sUc?-\%?2^$EgG^0\`+FJCNARn%>ull#mnJZiQJ0*8n1N,#m7`Sg!epB-8\CD
%X@'lRT8Lg,Fc"J'?>se"S4d9!'3."cY#&klLE#$?4!s4;.99Ysbdq^L&]W\/+3P&C7Y$Sp9!T/1)&M\P91*[6HY:'d^)@86)YDU3
%mjSraWJ9O/m_d4C]QiUb6MUkEX;G>'7r]A_b)g9-l10`klO-Jc]ma@oDRV/R]hb?qCX<[_06Ys!i14H,D$-<f&LVuO;m=sb3s):(
%Gq*,eJs-P!pEj"DilPgXNM&pM7<c[qH$dbeGN6%%SsQ6iVKTG."`"/M))U<B>BgY+S8IChL[C";ckKj*>H]1Z)9]0>:[FfUTZ=7s
%0_/78i>UapBD*(+&LF)Pd-S7N&H`@kHF@G*m8oju?bdI_go,F<:Bc4rTHIRB-56)dels6^a`'[f)9R&An>+V-*U[N"PuUmmQ3">$
%.?KCa-]="jFee"q@<V#BIQ-O'N*fA>POa0q-'`\86AO$#EWd6(.+Cgi?d"jLkRdtG=o?qjmX8,H/1g0e.]9uamPHcLR_4+d?%b9+
%ig"btM(V,';AZOT]1mAZ$H9Q#-/Q\:Mdgj8'EhaT`hO=_R.FD=H":E=@^am=I+XQe*L;=2JT:P3[2+n$->$>4%hX.9\k%]c3ccU=
%CT:)`\O!ica4o'UU=QI]fSk#/@^t+\'ng1/+)%qD'$Cu86T,\I'UVHF<+MT[6@kO[bmjl?F>:>H.LI`Dqo2V@@#ENn>]^RWSTg8>
%^CLk5fNrY+nN_(&7a^]+TP,6V3UqhW!_$8-B,k;=St]"2TdU51`GcOT6/j_/C$pNV$qA%@=e*H&5gWC/"HD@[X9:Kqi&!#ml!9g^
%%PD3!Rp4?"s%&SAMF\n(QJ>fB`\@Td'/[95%^8&bEoK"tcVU,;MBXaE8''XGajW(kYQ,$n#aW@fM?Y%hOq/=k7[Mh;1k<i4,dY00
%:Tck(8V8D?T6/I46B,kPg\ldDI;,d$)0kdPVpn3=O4]p**_F&'Yma4`"AWot4^mM9+?j9Y#?!CpZ4r>O'Z2*F$k?APb"HF/?s=Ja
%;CDYX-[>d?icc*Cs,Vk0=:-\&n4OPf0d,/)U3AP\!$`c_TNHpn=TY=B'$^Z#_e@+r*6[mUlpf[l0pZ:A0F96AdVXc<=.e(0m;F>T
%ES0C=eXg>,P!j+OOt=WULbOb7gNYQ<4$s`n*a"=H!CbD3Gg.GN+5:!aW7.'lf78d_=0d/lrq/rKkm@89IS[,Y(llLIHEYc11BCa2
%0FA79:6613dV#M1]>Hi4b;$h)96*]K=6V(e!CJX[g`Um.6W_:!M'HS&%ccNr%1#:*L@:`@82uoK)kf5$i^KH4lKH)k=XH+G8X9Zn
%.fCbBOLYWu-C>WB=k)DNGLoMRo<<L".Kl4"gmOEm/k#Ph#u4Ze@fj25GK^3Ya+5JONhVTQGF9$2P=i'30nqo_=@bh*nNH,4Y0oJ<
%'C$Y@bm><M,p7Jh0TA@2GEV1P[V3T/,a?%E4As7aIbYQ`5iIJBaSXm@Foi1;,YIZ)9&A_o\4a..>nbMi"C0ADgh;5#!"KEi6t8]`
%;I$(349_6U3X0e+BljeZ&cj'eb.3Q>ji*1[Ic0'0i;;1BA616?K362<*):@:Q[>/SVs>MeBP(VuQ6f/kG^$Ik*k*E,r5r!mbSS(A
%(l+-C%)>F?;X@&.L!(</Dl,;Ji&M^!+Zt2$$q#T03cV\k,^!#J"P-G@d1uG(@]JoVR4:2]$7P&3*"t:uA,Vmli4>!K`n*FF;Jl3)
%s6D?-e&ef.U_+7*QJtH'j,MEn^n_uhr2hca=Ps9UWmU-CkDd<V1]R-7hP0OY3Y.4lA@cS.4#?ZsTf;Ek+;(0"7=Y/8oE9TLrBR+a
%,_Nl2np^ZjS".@~>
%AI9_PrivateDataEnd
